{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u65e5\u5e38\u9047\u5230\u7684\u95ee\u9898 django\u5f00\u53d1\u5b9e\u6218 django-rest-framework\u5b66\u4e60\u7b14\u8bb0","title":"\u76ee\u5f55"},{"location":"#_1","text":"","title":"\u65e5\u5e38\u9047\u5230\u7684\u95ee\u9898"},{"location":"#django","text":"","title":"django\u5f00\u53d1\u5b9e\u6218"},{"location":"#django-rest-framework","text":"","title":"django-rest-framework\u5b66\u4e60\u7b14\u8bb0"},{"location":"daily_problem/","text":"1. \u5c0f\u6570\u8f6c\u6362\u4e3a\u767e\u5206\u6570 def change_percent(num): return \"%.2f%%\" % (num * 100) 2. \u6587\u4ef6\u64cd\u4f5c \u67e5\u770b\u5f53\u524d\u76ee\u5f55 os.getcwd() \u6216 from os import path d = path.dirname(__file__) # __file__ \u4e3a\u5f53\u524d\u6587\u4ef6, \u82e5\u679c\u5728ide\u4e2d\u8fd0\u884c\u6b64\u884c\u4f1a\u62a5\u9519,\u53ef\u6539\u4e3a #d = path.dirname('.') \u83b7\u5f97\u5355\u4e2a\u76ee\u5f55\u8282\u70b9\u7684\u5b50\u8282\u70b9 os.listdir(rootdir) \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u4fe1\u606f for parent,dirnames,filenames in os.walk(rootdir): #\u4e09\u4e2a\u53c2\u6570\uff1a\u5206\u522b\u8fd4\u56de1.\u7236\u76ee\u5f55 2.\u6240\u6709\u6587\u4ef6\u5939\u540d\u5b57\uff08\u4e0d\u542b\u8def\u5f84\uff093.\u6240\u6709\u6587\u4ef6\u540d\u5b57 for dirname in dirnames: #\u8f93\u51fa\u6587\u4ef6\u5939\u4fe1\u606f print \"parent is:\" + parent print \"dirname is\" + dirname for filename in filenames: #\u8f93\u51fa\u6587\u4ef6\u4fe1\u606f print \"parent is:\" + parent print \"filename is:\" + filename print \"the full name of the file is:\" + os.path.join(parent,filename) #\u8f93\u51fa\u6587\u4ef6\u8def\u5f84\u4fe1\u606f 3. \u8bfb\u5199csv\u6587\u4ef6 \u5199\u5165 import csv def writer_to_csv(info): result_csv = open('result.csv', 'a', encoding='utf8') writer = csv.writer(result_csv) writer.writerow(info) result_csv.close() \u8bfb\u51fa import csv def read_csv(file): csv_file = open(file, 'r') reader = csv.reader(csv_file) for item in reader: yield item[0] 4. python3.6\u8bfbini\u914d\u7f6e\u6587\u4ef6 \u8bf4\u660e \uff1apython2.7-3.5\u4f7f\u7528\u7684\u662f ConfigParser \u6a21\u5757 import configparser 5. django\u4e4b\u5141\u8bb8\u5916\u90e8\u673a\u5668\u8bbf\u95ee\u672c\u673a\u670d\u52a1 \u5f00\u542fdjango\u670d\u52a1\u65f6\uff0c\u4f7f\u75280.0.0.0:\u7aef\u53e3\u542f\u52a8\uff0c\u4f8b\uff1a ./manage.py runserver 0.0.0.0:9999 \u4fee\u6539setting\u6587\u4ef6\u4e2d\u7684ALLOWED_HOSTS ALLOWED_HOSTS = ['*', ] \u6ce8\u610f\uff1a ['*', ] \u4e00\u5b9a\u8981\u52a0 , 6. Python\u591a\u8fdb\u7a0b\u5e76\u53d1\u64cd\u4f5c\u4e2d\u8fdb\u7a0b\u6c60Pool\u7684\u5e94\u7528 \u8bf4\u660e\uff1a \u4f7f\u7528 Pool \u7c7b\uff0c\u9700\u8981\u901a\u8fc7 from multiprocessing import Pool \u5bfc\u5165\u6c60 join\u65b9\u6cd5\u5fc5\u987b\u5728close\u6216terminate\u4e4b\u540e\u4f7f\u7528\u3002 apply_async() \u51fd\u6570\u539f\u578b\uff1a apply_async(func[, args=()[, kwds={}[,callback=None]]]) \uff0c\u8be5\u65b9\u6cd5\u975e\u963b\u585e\u4e14\u652f\u6301\u7ed3\u679c\u8fd4\u56de\u8fdb\u884c\u56de\u8c03\u3002 \u793a\u4f8b\uff1a import time from multiprocessing import Pool def run(fn): # fn: \u51fd\u6570\u53c2\u6570\u662f\u6570\u636e\u5217\u8868\u7684\u4e00\u4e2a\u5143\u7d20 time.sleep(1) return fn * fn if __name__ == \"__main__\": testFL = [1, 2, 3, 4, 5, 6] print('\u987a\u5e8f\u6267\u884c:') # \u987a\u5e8f\u6267\u884c(\u4e5f\u5c31\u662f\u4e32\u884c\u6267\u884c\uff0c\u5355\u8fdb\u7a0b) s = time.time() for fn in testFL: print(run(fn)) e1 = time.time() print(\"\u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a\", int(e1 - s)) print('\u591a\u8fdb\u7a0b\u6267\u884c:') # \u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u884c\u6267\u884c pool = Pool(5) # \u521b\u5efa\u62e5\u67095\u4e2a\u8fdb\u7a0b\u6570\u91cf\u7684\u8fdb\u7a0b\u6c60 # testFL:\u8981\u5904\u7406\u7684\u6570\u636e\u5217\u8868\uff0crun\uff1a\u5904\u7406testFL\u5217\u8868\u4e2d\u6570\u636e\u7684\u51fd\u6570 # rl = pool.map(run, testFL) for fn in testFL: pool.apply_async(run, args=(fn, )) pool.close() # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u4e0d\u518d\u63a5\u53d7\u65b0\u7684\u8fdb\u7a0b pool.join() # \u4e3b\u8fdb\u7a0b\u963b\u585e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa e2 = time.time() print(\"\u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a\", int(e2 - e1)) # print(rl) \u54cd\u5e94\uff1a \u987a\u5e8f\u6267\u884c: 1 4 9 16 25 36 \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a 6 \u591a\u8fdb\u7a0b\u6267\u884c: \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a 2 map() \u51fd\u6570\u539f\u578b\uff1a map(func, iterable[, chunksize=None]) \uff0cPool\u7c7b\u4e2d\u7684map\u65b9\u6cd5\uff0c\u4e0e\u5185\u7f6e\u7684map\u51fd\u6570\u7528\u6cd5\u884c\u4e3a\u57fa\u672c\u4e00\u81f4\uff0c\u5b83\u4f1a\u4f7f\u8fdb\u7a0b\u963b\u585e\u76f4\u5230\u8fd4\u56de\u7ed3\u679c\u3002 \u6ce8\u610f\uff1a \u867d\u7136\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f46\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c\u5fc5\u987b\u5728\u6574\u4e2a\u961f\u5217\u90fd\u5c31\u7eea\u540e\uff0c\u7a0b\u5e8f\u624d\u4f1a\u8fd0\u884c\u5b50\u8fdb\u7a0b\u3002 \u793a\u4f8b\uff1a ```python import time from multiprocessing import Pool def run(fn): # fn: \u51fd\u6570\u53c2\u6570\u662f\u6570\u636e\u5217\u8868\u7684\u4e00\u4e2a\u5143\u7d20 time.sleep(1) return fn * fn if name == \u201c main \u201d: testFL = [1, 2, 3, 4, 5, 6] print(\u2018\u987a\u5e8f\u6267\u884c:\u2019) # \u987a\u5e8f\u6267\u884c(\u4e5f\u5c31\u662f\u4e32\u884c\u6267\u884c\uff0c\u5355\u8fdb\u7a0b) s = time.time() for fn in testFL: print(run(fn)) e1 = time.time() print(\"\u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a\", int(e1 - s)) print('\u591a\u8fdb\u7a0b\u6267\u884c:') # \u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u884c\u6267\u884c pool = Pool(5) # \u521b\u5efa\u62e5\u67095\u4e2a\u8fdb\u7a0b\u6570\u91cf\u7684\u8fdb\u7a0b\u6c60 # testFL:\u8981\u5904\u7406\u7684\u6570\u636e\u5217\u8868\uff0crun\uff1a\u5904\u7406testFL\u5217\u8868\u4e2d\u6570\u636e\u7684\u51fd\u6570 rl = pool.map(run, testFL) # for fn in testFL: # pool.apply_async(run, args=(fn, )) pool.close() # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u4e0d\u518d\u63a5\u53d7\u65b0\u7684\u8fdb\u7a0b pool.join() # \u4e3b\u8fdb\u7a0b\u963b\u585e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa e2 = time.time() print(rl) print(\"\u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a\", int(e2 - e1)) ``` - \u54cd\u5e94\uff1a \u987a\u5e8f\u6267\u884c: 1 4 9 16 25 36 \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a 6 \u591a\u8fdb\u7a0b\u6267\u884c: [1, 4, 9, 16, 25, 36] \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a 2 7. \u8fdb\u7a0b\u6c60\u4f7f\u7528queue\u961f\u5217 \u6ce8\u610f\uff1a \u8fdb\u7a0b\u6c60\u4f7f\u7528\u961f\u5217\uff0c\u5e94\u4f7f\u7528 Manager \u5bf9\u8c61\u7684Queue from multiprocessing import Manager qid_queue = Manager().Queue() 8. operator.itemgetter() \u8fd4\u56de\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4f7f\u7528\u88ab\u64cd\u4f5c\u5143\u7684 __getitem__() \u65b9\u6cd5\u4ece\u5176\u88ab\u64cd\u4f5c\u5143\u83b7\u53d6 \u9879 \u3002\u901a\u8fc7\u8be5\u51fd\u6570\u4f5c\u7528\u5230\u5bf9\u8c61\u4e0a\u624d\u80fd\u83b7\u53d6\u503c\u3002\u5982\u679c\u6307\u5b9a\u4e86\u591a\u4e2a\u9879\uff0c\u5219\u8fd4\u56de\u67e5\u627e\u503c\u7684\u4e00\u7ec4\u3002\u4f8b\u5982: \u5728f = itemgetter(2)\u4e4b\u540e\uff0c\u8c03\u7528f(r)\u8fd4\u56der[2]\u3002 \u5728g = itemgetter(2,5,3)\u4e4b\u540e\uff0c\u8c03\u7528g(r)\u8fd4\u56de(r[2]\uff0c r[5]\uff0c r[3])\u3002 \u7b49\u4ef7\u4e8e: def itemgetter(*items): if len(items) == 1: item = items[0] def g(obj): return obj[item] else: def g(obj): return tuple(obj[item] for item in items) return g \u9879\u53ef\u4ee5\u662f\u88ab\u64cd\u4f5c\u5143\u7684 __getitem__() \u65b9\u6cd5\u6240\u63a5\u53d7\u7684\u4efb\u4f55\u7c7b\u578b\u3002\u5b57\u5178\u63a5\u53d7\u5404\u79cd\u54c8\u5e0c\u503c\uff0c\u5217\u8868\u3001\u5143\u7ec4\u548c\u5b57\u7b26\u4e32\u63a5\u53d7\u7d22\u5f15\u6216\u7247: >>> itemgetter(1)('ABCDEFG') 'B' >>> itemgetter(1,3,5)('ABCDEFG') ('B', 'D', 'F') >>> itemgetter(slice(2,None))('ABCDEFG') 'CDEFG' \u5728\u7248\u672c2.5\u4e2d\u66f4\u6539:\u6dfb\u52a0\u4e86\u5bf9\u591a\u4e2a\u9879\u76ee\u63d0\u53d6\u7684\u652f\u6301\u3002 \u4f7f\u7528itemgetter()\u4ece\u5143\u7ec4\u8bb0\u5f55\u4e2d\u68c0\u7d22\u7279\u5b9a\u5b57\u6bb5\u7684\u793a\u4f8b: >>> inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)] >>> getcount = itemgetter(1) >>> map(getcount, inventory) [3, 2, 5, 1] >>> sorted(inventory, key=getcount) [('orange', 1), ('banana', 2), ('apple', 3), ('pear', 5)] 9. sorted()\u5185\u5efa\u51fd\u6570 sort \u4e0e sorted \u533a\u522b\uff1a sort \u662f\u5e94\u7528\u5728 list \u4e0a\u7684\u65b9\u6cd5\uff0csorted \u53ef\u4ee5\u5bf9\u6240\u6709\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\u64cd\u4f5c\u3002 list \u7684 sort \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u5bf9\u5df2\u7ecf\u5b58\u5728\u7684\u5217\u8868\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u5185\u5efa\u51fd\u6570 sorted \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u65b0\u7684 list\uff0c\u800c\u4e0d\u662f\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\u64cd\u4f5c\u3002 sorted \u8bed\u6cd5\uff1a sorted(iterable[, cmp[, key[, reverse]]]) \u53c2\u6570\u8bf4\u660e\uff1a iterable \u2013 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 cmp \u2013 \u6bd4\u8f83\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u5177\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u7684\u503c\u90fd\u662f\u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u53d6\u51fa\uff0c\u6b64\u51fd\u6570\u5fc5\u987b\u9075\u5b88\u7684\u89c4\u5219\u4e3a\uff0c\u5927\u4e8e\u5219\u8fd4\u56de1\uff0c\u5c0f\u4e8e\u5219\u8fd4\u56de-1\uff0c\u7b49\u4e8e\u5219\u8fd4\u56de0\u3002 key \u2013 \u4e3b\u8981\u662f\u7528\u6765\u8fdb\u884c\u6bd4\u8f83\u7684\u5143\u7d20\uff0c\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u5177\u4f53\u7684\u51fd\u6570\u7684\u53c2\u6570\u5c31\u662f\u53d6\u81ea\u4e8e\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\uff0c\u6307\u5b9a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u6765\u8fdb\u884c\u6392\u5e8f\u3002 reverse \u2013 \u6392\u5e8f\u89c4\u5219\uff0creverse = True \u964d\u5e8f \uff0c reverse = False \u5347\u5e8f\uff08\u9ed8\u8ba4\uff09\u3002 \u4f8b\u5b50\uff1a >>>a = [5,7,6,3,4,1,2] >>> b = sorted(a) # \u4fdd\u7559\u539f\u5217\u8868 >>> a [5, 7, 6, 3, 4, 1, 2] >>> b [1, 2, 3, 4, 5, 6, 7] >>> L=[('b',2),('a',1),('c',3),('d',4)] >>> sorted(L, cmp=lambda x,y:cmp(x[1],y[1])) # \u5229\u7528cmp\u51fd\u6570 [('a', 1), ('b', 2), ('c', 3), ('d', 4)] >>> sorted(L, key=lambda x:x[1]) # \u5229\u7528key [('a', 1), ('b', 2), ('c', 3), ('d', 4)] >>> students = [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)] >>> sorted(students, key=lambda s: s[2]) # \u6309\u5e74\u9f84\u6392\u5e8f [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)] >>> sorted(students, key=lambda s: s[2], reverse=True) # \u6309\u964d\u5e8f [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)] \u6ce8\u610f \uff1a\u5efa\u8bae\u4f7f\u7528key\uff0c\u800c\u4e0d\u662fcmp\uff0c\u56e0\u4e3akey\u66f4\u8282\u7701\u5185\u5b58\u7a7a\u95f4 10. python2.7 \u89e3\u51b3UnicodeDecodeError: \u2018ascii\u2019 codec can\u2019t decode byte 0xe5 in position 108: ordinal not in range(128\u3002\u3002\u3002\u3002 \u51fa\u73b0\u9519\u8bef\u539f\u56e0 \uff1a python\u7684str\u9ed8\u8ba4\u662fascii\u7f16\u7801\uff0c\u548cunicode\u7f16\u7801\u51b2\u7a81 \u89e3\u51b3\u65b9\u6848 \uff1a import sys reload(sys) sys.setdefaultencoding(\u2018utf8\u2019) 11. \u51e0\u4e2a\u6709\u7528\u7684python\u51fd\u6570 (\u7b1b\u5361\u5c14\u79ef, \u6392\u5217, \u7ec4\u5408) product \u7b1b\u5361\u5c14\u79ef permutations \u6392\u5217 combinations \u7ec4\u5408,\u6ca1\u6709\u91cd\u590d combinations_with_replacement \u7ec4\u5408,\u6709\u91cd\u590d >>> import itertools >>> for i in itertools.product('ABCD', r=2): ... print i, ... ('A', 'A') ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'A') ('B', 'B') ('B', 'C') ('B', 'D') ('C', 'A') ('C', 'B') ('C', 'C') ('C', 'D') ('D', 'A') ('D', 'B') ('D', 'C') ('D', 'D') >>> for i in itertools.permutations('ABCD', 2): ... print i, ... ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'A') ('B', 'C') ('B', 'D') ('C', 'A') ('C', 'B') ('C', 'D') ('D', 'A') ('D', 'B') ('D', 'C') >>> for i in itertools.combinations('ABCD', 2): ... print i, ... ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'C') ('B', 'D') ('C', 'D') >>> for i in itertools.combinations_with_replacement('ABCD', 2): ... print i, ... ('A', 'A') ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'B') ('B', 'C') ('B', 'D') ('C', 'C') ('C', 'D') ('D', 'D') 12. python\u6c42\u4e24\u4e2a\u94fe\u8868\u7ec4\u6210\u7684\u6570\u5b57\u7684\u548c \u7ed9\u5b9a\u4e24\u4e2a\u975e\u7a7a\u94fe\u8868\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u4f4d\u6570\u6309\u7167\u9006\u5e8f\u65b9\u5f0f\u5b58\u50a8\uff0c\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u4e24\u6570\u76f8\u52a0\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a(2 -> 4 -> 3) + (5 -> 6 -> 4) \u8f93\u51fa\uff1a7 -> 0 -> 8 \u539f\u56e0\uff1a342 + 465 = 807 \u4ee3\u7801\u5b9e\u73b0\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None def addTwoNumbers(self, l1, l2): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" val_sum = l1.val + l2.val list_node = ListNode(val_sum % 10) a = val_sum // 10 node = list_node while True: try: l1 = l1.next except: pass try: l2 = l2.next except: pass if not l1 and not l2: break elif not l1: l1_val = 0 l2_val = l2.val elif not l2: l2_val = 0 l1_val = l1.val else: l1_val = l1.val l2_val = l2.val val_sum = l1_val + l2_val + a temp_node = ListNode(val_sum % 10) node.next = temp_node node = temp_node a = val_sum // 10 if a != 0: node.next = ListNode(a) return list_node 13. python\u5185\u7f6e\u51fd\u6570\u2014\u2014divmod(a, b) v2.7 \u5b9e\u9645\u4e0a\u662f\u7b97a\u9664\u4ee5b\u7684\u5546\u548c\u4f59\u6570\uff0c\u8fd4\u56de(\u5546\uff0c\u4f59\u6570) divmod(1,2) (0, 1) divmod(5, 1) (5, 0) 14. python\u5185\u7f6e\u51fd\u6570\u2014\u2014enumerate(sequence, start=0) >>> seasons = ['Spring', 'Summer', 'Fall', 'Winter'] >>> list(enumerate(seasons)) [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')] >>> list(enumerate(seasons, start=1)) [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')] 15. python\u5185\u7f6e\u51fd\u6570\u2014\u2014filter(function, iterable) v2.7 \u5982\u679cfunction\u662fNone\uff0c\u5c31\u7b49\u4ef7\u4e8e\uff1a [item for item in iterable if item] \u5982\u679cfunction\u4e0d\u662fNone\uff0c\u5c31\u7b49\u4ef7\u4e8e\uff1a [item for item in iterable if function(item)] 16. datetime datetime\u6a21\u5757\u7528\u4e8e\u662fdate\u548ctime\u6a21\u5757\u7684\u5408\u96c6\uff0cdatetime\u6709\u4e24\u4e2a\u5e38\u91cf\uff0cMAXYEAR\u548cMINYEAR\uff0c\u5206\u522b\u662f9999\u548c1. datetime\u6a21\u5757\u5b9a\u4e49\u4e865\u4e2a\u7c7b\uff0c\u5206\u522b\u662f 1. datetime.date\uff1a\u8868\u793a\u65e5\u671f\u7684\u7c7b 2. datetime.datetime\uff1a\u8868\u793a\u65e5\u671f\u65f6\u95f4\u7684\u7c7b 3. datetime.time\uff1a\u8868\u793a\u65f6\u95f4\u7684\u7c7b 4. datetime.timedelta\uff1a\u8868\u793a\u65f6\u95f4\u95f4\u9694\uff0c\u5373\u4e24\u4e2a\u65f6\u95f4\u70b9\u7684\u95f4\u9694 5. datetime.tzinfo\uff1a\u65f6\u533a\u7684\u76f8\u5173\u4fe1\u606f datetime.date\u7c7b date\u7c7b\u6709\u4e09\u4e2a\u53c2\u6570,datetime.date(year,month,day)\uff0c\u8fd4\u56de datetime.date(2018, 7, 30) datetime.date.ctime() ,\u8fd4\u56de\u683c\u5f0f\u5982 Sun Apr 16 00:00:00 2017 >>>datetime.date.ctime(datetime.date(2018, 7, 30)) 'Mon Jul 30 00:00:00 2018' datetime.date.fromtimestamp(timestamp) ,\u6839\u636e\u7ed9\u5b9a\u7684\u65f6\u95f4\u622e\uff0c\u8fd4\u56de\u4e00\u4e2adate\u5bf9\u8c61\uff1b datetime.date.today() \u4f5c\u7528\u76f8\u540c >>>datetime.date.today() datetime.date(2018, 7, 30) datetime.date.isocalendar() :\u8fd4\u56de\u683c\u5f0f\u5982(year\uff0cmonth\uff0cday)\u7684\u5143\u7ec4 >>>datetime.date.isocalendar(datetime.date(2018, 7, 30)) (2018, 31, 1) datetime.date.isoformat() \uff1a\u8fd4\u56de\u683c\u5f0f\u5982YYYY-MM-DD >>>datetime.date.isoformat(datetime.date(2018, 7, 30)) '2018-07-30' datetime.date.isoweekday() \uff1a\u8fd4\u56de\u7ed9\u5b9a\u65e5\u671f\u7684\u661f\u671f\uff080-6\uff09\uff0c\u661f\u671f\u4e00=0\uff0c\u661f\u671f\u65e5=6 >>>datetime.date.isoweekday(datetime.date.today()) 1 datetime.date.replace(year,month,day) \uff1a\u66ff\u6362\u7ed9\u5b9a\u65e5\u671f\uff0c\u4f46\u4e0d\u6539\u53d8\u539f\u65e5\u671f >>>a = datetime.date.today() >>>a.replace(day=26) datetime.date(2018, 7, 26) datetime.date.strftime(format) :\u628a\u65e5\u671f\u65f6\u95f4\u6309\u7167\u7ed9\u5b9a\u7684format\u8fdb\u884c\u683c\u5f0f\u5316\u3002 >>>datetime.date.strftime(datetime.date.today(), '%Y-%m-%d') '2018-07-30' ``` >>>a = datetime.date.today() >>>a datetime.date(2018, 7, 30) >>>a.strftime('%Y-%m-%d') '2018-07-30' ``` datetime.date.timetuple() \uff1a\u8fd4\u56de\u65e5\u671f\u5bf9\u5e94\u7684time.struct_time\u5bf9\u8c61 >>>a = datetime.date.today() >>>datetime.date.timetuple(a) time.struct_time(tm_year=2018, tm_mon=7, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=211, tm_isdst=-1) datetime.date.weekday() \uff1a\u8fd4\u56de\u65e5\u671f\u7684\u661f\u671f >>>a = datetime.date.today() >>>datetime.date.weekday(a) 0 >>>a.weekday() 0 datetime.time\u7c7b time\u7c7b\u67095\u4e2a\u53c2\u6570\uff0cdatetime.time(hour,minute,second,microsecond,tzoninfo),\u8fd4\u56de08:29:30 datetime.time.replace() >>>datetime.time.replace(datetime.time(), hour=1) datetime.time(1, 0) datetime.time.strftime(format) :\u6309\u7167format\u683c\u5f0f\u8fd4\u56de\u65f6\u95f4 >>>datetime.time.strftime(datetime.time(2,3), \"%H:%M\") '02:03' datetime.time.tzname() \uff1a\u8fd4\u56de\u65f6\u533a\u540d\u5b57 datetime.time.utcoffset() \uff1a\u8fd4\u56de\u65f6\u533a\u7684\u65f6\u95f4\u504f\u79fb\u91cf datetime.datetime\u7c7b datetime\u7c7b\u6709\u5f88\u591a\u53c2\u6570\uff0cdatetime(year, month, day[, hour[, minute[, second[,microsecond[,tzinfo]]]]])\uff0c\u8fd4\u56de\u5e74\u6708\u65e5\uff0c\u65f6\u5206\u79d2 datetime.datetime.ctime() datetime.datetime.now().date() \uff1a\u8fd4\u56de\u5f53\u524d\u65e5\u671f\u65f6\u95f4\u7684\u65e5\u671f\u90e8\u5206 datetime.datetime.now().time() \uff1a\u8fd4\u56de\u5f53\u524d\u65e5\u671f\u65f6\u95f4\u7684\u65f6\u95f4\u90e8\u5206 datetime.datetime.fromtimestamp() datetime.datetime.now() \uff1a\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4 datetime.datetime.replace() datetime.datetime.strftime() \uff1a\u7531\u65e5\u671f\u683c\u5f0f\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u683c\u5f0f >>>datetime.datetime.now().strftime('%b-%d-%Y %H:%M:%S') 'Apr-16-2017 21:01:35' datetime.datetime.strptime() :\u7531\u5b57\u7b26\u4e32\u683c\u5f0f\u8f6c\u5316\u4e3a\u65e5\u671f\u683c\u5f0f >>>datetime.datetime.strptime('Apr-16-2017 21:01:35', '%b-%d-%Y %H:%M:%S') 2017-04-16 21:01:35 datetime.timedelta\u7c7b datetime.datetime.timedelta\u7528\u4e8e\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u4f8b\u5982\uff1a >>> a=datetime.datetime.now() >>> b=datetime.datetime.now() >>> a datetime.datetime(2017, 4, 16, 21, 21, 20, 871000) >>> b datetime.datetime(2017, 4, 16, 21, 21, 29, 603000) >>> b-a datetime.timedelta(0, 8, 732000) >>> (b-a).seconds 8 \u6216\u8005 time1 = datetime.datetime(2016, 10, 20) time2 = datetime.datetime(2015, 11, 2) \"\"\"\u8ba1\u7b97\u5929\u6570\u5dee\u503c\"\"\" print(time1-time2).days \"\"\"\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u76f8\u9694\u7684\u79d2\u6570\"\"\" print (time1-time2).total_seconds() 17. \u9488\u5bf9\u201ccould not install packages due to an EnvironmentError: [Errno 13] Permission denied: \u2018/Library/Python/2.7/site-packages/vine\u2019\u201d\u7684\u89e3\u51b3\u65b9\u5f0f pip install --user flask \u5728install\u540e\u52a0 \u2013user 18. \u5b57\u5178\u8f6cxml v2.7 dicttoxml\u4f1a\u81ea\u52a8\u5728\u5934\u90e8\u6dfb\u52a0 <?xml version=\"1.0\" encoding=\"UTF-8\" ?> \u5e76\u901a\u8fc7\u53c2\u6570\u8bbe\u7f6exml\u7684\u5c5e\u6027 import dicttoxml dicttoxml.dicttoxml(self.post_data_dict, root=True, custom_root=\"request\", attr_type=False) 19. or\u548cand \u5982\u679c\u7528or\uff0c\u5e94\u8be5\u628a\u4e3atrue\u7684\u5199\u5728or\u524d\uff0c\u51cf\u5c0f\u8fd0\u7b97\u65f6\u95f4\uff1b \u5982\u679c\u7528and\uff0c\u5e94\u8be5\u628afalse\u7684\u5199\u5728and\u524d 20. xmltodict\u7684\u5751 \u5982\u679cxml\u4e2d\u5728\u540c\u4e00\u7ea7\u6709\u76f8\u540c\u5143\u7d20\uff0c\u5c31\u4f1a\u628a\u76f8\u540c\u5143\u7d20\u53d8\u6210\u5217\u8868\uff1b\u5982\u679c\u6ca1\u6709\u76f8\u540c\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u628a\u8be5\u5143\u7d20\u53d8\u4e3a\u5b57\u5178 \u5bf9\u4e8exml\u4e2d\u4e3a\u7a7a\u7684\u60c5\u51b5\uff0cxmltodict\u4f1a\u81ea\u52a8\u5c06\u503c\u53d8\u4e3a None 21. \u5217\u8868\u751f\u6210\u5f0f\u4e2d\u7684if-else \u53ea\u6709if [a for a in a_list if a==1] if-else [a if a==1 else a-1 for a in a_list] 22. \u9488\u5bf9MySQL said: Authentication plugin \u2018caching_sha2_password\u2019 cannot be loaded: dlopen(/usr/local/\u2026\u7684\u95ee\u9898 \u5728\u4f7f\u7528MySQL Workbench\u8fde\u63a5\u672c\u5730\u6570\u636e\u5e93\u7684\u65f6\u5019\uff0c\u51fa\u73b0\u4e86 MySQL said: Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen(/usr/local/lib/plugin/caching_sha2_password.so, 2): image not found \u8fd9\u662f\u56e0\u4e3a\u5728\u94fe\u63a5\u6570\u636e\u5e93\u65f6\u4e0d\u80fd\u52a0\u8f7d\u2018caching_sha2_password\u2019\u8fd9\u4e2a\u63d2\u4ef6\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u5bf9\u8eab\u4efd\u9a8c\u8bc1\u3002 \u89e3\u51b3\u65b9\u6848\u662f\uff1a 1. \u6253\u5f00\u7cfb\u7edf\u504f\u597d\u8bbe\u7f6e\uff0c\u627e\u5230mysql\uff0c\u70b9\u51fbInitialize Database\u3002 2. \u8f93\u5165\u4f60\u7684\u65b0\u5bc6\u7801\uff0c\u8bb0\u4f4f\u8fd9\u4e2a\u5bc6\u7801\uff0c\u7528\u4e8e\u540e\u671f\u94fe\u63a5\u6570\u636e\u5e93\u7684\u767b\u9646\u4f7f\u7528\u3002 3. \u9009\u62e9\u2018Use legacy password\u2018\u3002 4. \u91cd\u542fmysql\u670d\u52a1\u3002 \u8fd9\u6837\u5728\u8fde\u63a5\u5c31\u6ca1\u6709\u95ee\u9898\u4e86 23. django model\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5 comment_list = Comment.objects.all()[:5].only('post', 'text') # \u53ea\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5 24. Connection reset by peer\u7684\u5e38\u89c1\u539f\u56e0 Connection reset by peer: socket write error\u9519\u8bef\u5206\u6790\uff1a \u5e38\u51fa\u73b0\u7684Connection reset by peer: \u539f\u56e0\u53ef\u80fd\u662f\u591a\u65b9\u9762\u7684\uff0c\u4e0d\u8fc7\u66f4\u5e38\u89c1\u7684\u539f\u56e0\u662f\uff1a \u2460\uff1a\u670d\u52a1\u5668\u7684\u5e76\u53d1\u8fde\u63a5\u6570\u8d85\u8fc7\u4e86\u5176\u627f\u8f7d\u91cf\uff0c\u670d\u52a1\u5668\u4f1a\u5c06\u5176\u4e2d\u4e00\u4e9b\u8fde\u63a5Down\u6389\uff1b \u2461\uff1a\u5ba2\u6237\u5173\u6389\u4e86\u6d4f\u89c8\u5668\uff0c\u800c\u670d\u52a1\u5668\u8fd8\u5728\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e\uff1b \u2462\uff1a\u6d4f\u89c8\u5668\u7aef\u6309\u4e86Stop \u901a\u5e38\u539f\u56e0\u4e3a\uff1a\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u5bf9\u7b49\u65b9\u5e94\u7528\u7a0b\u5e8f\u7a81\u7136\u505c\u6b62\u8fd0\u884c\uff0c\u6216\u8fdc\u7a0b\u4e3b\u673a\u91cd\u65b0\u542f\u52a8\uff0c\u6216\u8fdc\u7a0b\u4e3b\u673a\u5728\u8fdc\u7a0b\u65b9\u5957\u63a5\u5b57\u4e0a\u4f7f\u7528\u4e86\u201c\u5f3a\u5236\u201d\u5173\u95ed \uff08\u53c2\u89c1setsockopt(SO_LINGER)\uff09\u3002\u53e6\u5916\uff0c\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u6b63\u5728\u8fdb\u884c\u65f6\uff0c\u5982\u679c\u8fde\u63a5\u56e0\u201ckeep-alive\u201d\u6d3b\u52a8\u68c0\u6d4b\u5230\u4e00\u4e2a\u5931\u8d25\u800c\u4e2d \u65ad\uff0c\u4e5f\u53ef\u80fd\u5bfc\u81f4\u6b64\u9519\u8bef\u3002\u6b64\u65f6\uff0c\u6b63\u5728\u8fdb\u884c\u7684\u64cd\u4f5c\u4ee5\u9519\u8bef\u7801WSAENETRESET\u5931\u8d25\u8fd4\u56de\uff0c\u540e\u7eed\u64cd\u4f5c\u5c06\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u7801WSAECONNRESET\u3002 \u4f46\u662f\u5982\u679c\u9891\u7e41\u51fa\u73b0\uff0c\u5c31\u8868\u793a\u5f88 \u591a\u5ba2\u6237\u7aef\u8fde\u63a5\u5230Apache\u670d\u52a1\u5668\u7684\u54cd\u5e94\u65f6\u95f4\u592a\u957f\u4e86\uff0c\u53ef\u80fd\u662f\u7f51\u7edc\u7684\u95ee\u9898\u6216\u8005\u670d\u52a1\u5668\u6027\u80fd\u95ee\u9898\u3002 25. \u5173\u4e8edjango.urls.path\u548cdjango.urls.re_path \u5728django2.0\u4ee5\u540e django.urls.path \u4e0d\u7528\u4e8e\u6b63\u5219\u5339\u914d\uff0c\u5982\u679c\u60f3\u7528\u6b63\u5219\uff0c\u53ef\u4ee5\u7528 django.urls.re_path from django.urls import re_path re_path(r'^(?P<album_id>[0-9])/$', views.detail, name='detail'), \u5982\u679c\u7528url()\uff0c\u4e5f\u4f1a\u94fe\u63a5\u5230re_path()\u7684","title":"\u65e5\u5e38\u95ee\u9898"},{"location":"daily_problem/#1","text":"def change_percent(num): return \"%.2f%%\" % (num * 100)","title":"1. \u5c0f\u6570\u8f6c\u6362\u4e3a\u767e\u5206\u6570"},{"location":"daily_problem/#2","text":"\u67e5\u770b\u5f53\u524d\u76ee\u5f55 os.getcwd() \u6216 from os import path d = path.dirname(__file__) # __file__ \u4e3a\u5f53\u524d\u6587\u4ef6, \u82e5\u679c\u5728ide\u4e2d\u8fd0\u884c\u6b64\u884c\u4f1a\u62a5\u9519,\u53ef\u6539\u4e3a #d = path.dirname('.') \u83b7\u5f97\u5355\u4e2a\u76ee\u5f55\u8282\u70b9\u7684\u5b50\u8282\u70b9 os.listdir(rootdir) \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u4fe1\u606f for parent,dirnames,filenames in os.walk(rootdir): #\u4e09\u4e2a\u53c2\u6570\uff1a\u5206\u522b\u8fd4\u56de1.\u7236\u76ee\u5f55 2.\u6240\u6709\u6587\u4ef6\u5939\u540d\u5b57\uff08\u4e0d\u542b\u8def\u5f84\uff093.\u6240\u6709\u6587\u4ef6\u540d\u5b57 for dirname in dirnames: #\u8f93\u51fa\u6587\u4ef6\u5939\u4fe1\u606f print \"parent is:\" + parent print \"dirname is\" + dirname for filename in filenames: #\u8f93\u51fa\u6587\u4ef6\u4fe1\u606f print \"parent is:\" + parent print \"filename is:\" + filename print \"the full name of the file is:\" + os.path.join(parent,filename) #\u8f93\u51fa\u6587\u4ef6\u8def\u5f84\u4fe1\u606f","title":"2. \u6587\u4ef6\u64cd\u4f5c"},{"location":"daily_problem/#3-csv","text":"\u5199\u5165 import csv def writer_to_csv(info): result_csv = open('result.csv', 'a', encoding='utf8') writer = csv.writer(result_csv) writer.writerow(info) result_csv.close() \u8bfb\u51fa import csv def read_csv(file): csv_file = open(file, 'r') reader = csv.reader(csv_file) for item in reader: yield item[0]","title":"3. \u8bfb\u5199csv\u6587\u4ef6"},{"location":"daily_problem/#4-python36ini","text":"\u8bf4\u660e \uff1apython2.7-3.5\u4f7f\u7528\u7684\u662f ConfigParser \u6a21\u5757 import configparser","title":"4. python3.6\u8bfbini\u914d\u7f6e\u6587\u4ef6"},{"location":"daily_problem/#5-django","text":"\u5f00\u542fdjango\u670d\u52a1\u65f6\uff0c\u4f7f\u75280.0.0.0:\u7aef\u53e3\u542f\u52a8\uff0c\u4f8b\uff1a ./manage.py runserver 0.0.0.0:9999 \u4fee\u6539setting\u6587\u4ef6\u4e2d\u7684ALLOWED_HOSTS ALLOWED_HOSTS = ['*', ] \u6ce8\u610f\uff1a ['*', ] \u4e00\u5b9a\u8981\u52a0 ,","title":"5. django\u4e4b\u5141\u8bb8\u5916\u90e8\u673a\u5668\u8bbf\u95ee\u672c\u673a\u670d\u52a1"},{"location":"daily_problem/#6-pythonpool","text":"\u8bf4\u660e\uff1a \u4f7f\u7528 Pool \u7c7b\uff0c\u9700\u8981\u901a\u8fc7 from multiprocessing import Pool \u5bfc\u5165\u6c60 join\u65b9\u6cd5\u5fc5\u987b\u5728close\u6216terminate\u4e4b\u540e\u4f7f\u7528\u3002 apply_async() \u51fd\u6570\u539f\u578b\uff1a apply_async(func[, args=()[, kwds={}[,callback=None]]]) \uff0c\u8be5\u65b9\u6cd5\u975e\u963b\u585e\u4e14\u652f\u6301\u7ed3\u679c\u8fd4\u56de\u8fdb\u884c\u56de\u8c03\u3002 \u793a\u4f8b\uff1a import time from multiprocessing import Pool def run(fn): # fn: \u51fd\u6570\u53c2\u6570\u662f\u6570\u636e\u5217\u8868\u7684\u4e00\u4e2a\u5143\u7d20 time.sleep(1) return fn * fn if __name__ == \"__main__\": testFL = [1, 2, 3, 4, 5, 6] print('\u987a\u5e8f\u6267\u884c:') # \u987a\u5e8f\u6267\u884c(\u4e5f\u5c31\u662f\u4e32\u884c\u6267\u884c\uff0c\u5355\u8fdb\u7a0b) s = time.time() for fn in testFL: print(run(fn)) e1 = time.time() print(\"\u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a\", int(e1 - s)) print('\u591a\u8fdb\u7a0b\u6267\u884c:') # \u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u884c\u6267\u884c pool = Pool(5) # \u521b\u5efa\u62e5\u67095\u4e2a\u8fdb\u7a0b\u6570\u91cf\u7684\u8fdb\u7a0b\u6c60 # testFL:\u8981\u5904\u7406\u7684\u6570\u636e\u5217\u8868\uff0crun\uff1a\u5904\u7406testFL\u5217\u8868\u4e2d\u6570\u636e\u7684\u51fd\u6570 # rl = pool.map(run, testFL) for fn in testFL: pool.apply_async(run, args=(fn, )) pool.close() # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u4e0d\u518d\u63a5\u53d7\u65b0\u7684\u8fdb\u7a0b pool.join() # \u4e3b\u8fdb\u7a0b\u963b\u585e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa e2 = time.time() print(\"\u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a\", int(e2 - e1)) # print(rl) \u54cd\u5e94\uff1a \u987a\u5e8f\u6267\u884c: 1 4 9 16 25 36 \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a 6 \u591a\u8fdb\u7a0b\u6267\u884c: \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a 2 map() \u51fd\u6570\u539f\u578b\uff1a map(func, iterable[, chunksize=None]) \uff0cPool\u7c7b\u4e2d\u7684map\u65b9\u6cd5\uff0c\u4e0e\u5185\u7f6e\u7684map\u51fd\u6570\u7528\u6cd5\u884c\u4e3a\u57fa\u672c\u4e00\u81f4\uff0c\u5b83\u4f1a\u4f7f\u8fdb\u7a0b\u963b\u585e\u76f4\u5230\u8fd4\u56de\u7ed3\u679c\u3002 \u6ce8\u610f\uff1a \u867d\u7136\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f46\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c\u5fc5\u987b\u5728\u6574\u4e2a\u961f\u5217\u90fd\u5c31\u7eea\u540e\uff0c\u7a0b\u5e8f\u624d\u4f1a\u8fd0\u884c\u5b50\u8fdb\u7a0b\u3002 \u793a\u4f8b\uff1a ```python import time from multiprocessing import Pool def run(fn): # fn: \u51fd\u6570\u53c2\u6570\u662f\u6570\u636e\u5217\u8868\u7684\u4e00\u4e2a\u5143\u7d20 time.sleep(1) return fn * fn if name == \u201c main \u201d: testFL = [1, 2, 3, 4, 5, 6] print(\u2018\u987a\u5e8f\u6267\u884c:\u2019) # \u987a\u5e8f\u6267\u884c(\u4e5f\u5c31\u662f\u4e32\u884c\u6267\u884c\uff0c\u5355\u8fdb\u7a0b) s = time.time() for fn in testFL: print(run(fn)) e1 = time.time() print(\"\u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a\", int(e1 - s)) print('\u591a\u8fdb\u7a0b\u6267\u884c:') # \u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u884c\u6267\u884c pool = Pool(5) # \u521b\u5efa\u62e5\u67095\u4e2a\u8fdb\u7a0b\u6570\u91cf\u7684\u8fdb\u7a0b\u6c60 # testFL:\u8981\u5904\u7406\u7684\u6570\u636e\u5217\u8868\uff0crun\uff1a\u5904\u7406testFL\u5217\u8868\u4e2d\u6570\u636e\u7684\u51fd\u6570 rl = pool.map(run, testFL) # for fn in testFL: # pool.apply_async(run, args=(fn, )) pool.close() # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u4e0d\u518d\u63a5\u53d7\u65b0\u7684\u8fdb\u7a0b pool.join() # \u4e3b\u8fdb\u7a0b\u963b\u585e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa e2 = time.time() print(rl) print(\"\u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a\", int(e2 - e1)) ``` - \u54cd\u5e94\uff1a \u987a\u5e8f\u6267\u884c: 1 4 9 16 25 36 \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a 6 \u591a\u8fdb\u7a0b\u6267\u884c: [1, 4, 9, 16, 25, 36] \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a 2","title":"6. Python\u591a\u8fdb\u7a0b\u5e76\u53d1\u64cd\u4f5c\u4e2d\u8fdb\u7a0b\u6c60Pool\u7684\u5e94\u7528"},{"location":"daily_problem/#7-queue","text":"\u6ce8\u610f\uff1a \u8fdb\u7a0b\u6c60\u4f7f\u7528\u961f\u5217\uff0c\u5e94\u4f7f\u7528 Manager \u5bf9\u8c61\u7684Queue from multiprocessing import Manager qid_queue = Manager().Queue()","title":"7. \u8fdb\u7a0b\u6c60\u4f7f\u7528queue\u961f\u5217"},{"location":"daily_problem/#8-operatoritemgetter","text":"\u8fd4\u56de\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4f7f\u7528\u88ab\u64cd\u4f5c\u5143\u7684 __getitem__() \u65b9\u6cd5\u4ece\u5176\u88ab\u64cd\u4f5c\u5143\u83b7\u53d6 \u9879 \u3002\u901a\u8fc7\u8be5\u51fd\u6570\u4f5c\u7528\u5230\u5bf9\u8c61\u4e0a\u624d\u80fd\u83b7\u53d6\u503c\u3002\u5982\u679c\u6307\u5b9a\u4e86\u591a\u4e2a\u9879\uff0c\u5219\u8fd4\u56de\u67e5\u627e\u503c\u7684\u4e00\u7ec4\u3002\u4f8b\u5982: \u5728f = itemgetter(2)\u4e4b\u540e\uff0c\u8c03\u7528f(r)\u8fd4\u56der[2]\u3002 \u5728g = itemgetter(2,5,3)\u4e4b\u540e\uff0c\u8c03\u7528g(r)\u8fd4\u56de(r[2]\uff0c r[5]\uff0c r[3])\u3002 \u7b49\u4ef7\u4e8e: def itemgetter(*items): if len(items) == 1: item = items[0] def g(obj): return obj[item] else: def g(obj): return tuple(obj[item] for item in items) return g \u9879\u53ef\u4ee5\u662f\u88ab\u64cd\u4f5c\u5143\u7684 __getitem__() \u65b9\u6cd5\u6240\u63a5\u53d7\u7684\u4efb\u4f55\u7c7b\u578b\u3002\u5b57\u5178\u63a5\u53d7\u5404\u79cd\u54c8\u5e0c\u503c\uff0c\u5217\u8868\u3001\u5143\u7ec4\u548c\u5b57\u7b26\u4e32\u63a5\u53d7\u7d22\u5f15\u6216\u7247: >>> itemgetter(1)('ABCDEFG') 'B' >>> itemgetter(1,3,5)('ABCDEFG') ('B', 'D', 'F') >>> itemgetter(slice(2,None))('ABCDEFG') 'CDEFG' \u5728\u7248\u672c2.5\u4e2d\u66f4\u6539:\u6dfb\u52a0\u4e86\u5bf9\u591a\u4e2a\u9879\u76ee\u63d0\u53d6\u7684\u652f\u6301\u3002 \u4f7f\u7528itemgetter()\u4ece\u5143\u7ec4\u8bb0\u5f55\u4e2d\u68c0\u7d22\u7279\u5b9a\u5b57\u6bb5\u7684\u793a\u4f8b: >>> inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)] >>> getcount = itemgetter(1) >>> map(getcount, inventory) [3, 2, 5, 1] >>> sorted(inventory, key=getcount) [('orange', 1), ('banana', 2), ('apple', 3), ('pear', 5)]","title":"8. operator.itemgetter()"},{"location":"daily_problem/#9-sorted","text":"sort \u4e0e sorted \u533a\u522b\uff1a sort \u662f\u5e94\u7528\u5728 list \u4e0a\u7684\u65b9\u6cd5\uff0csorted \u53ef\u4ee5\u5bf9\u6240\u6709\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\u64cd\u4f5c\u3002 list \u7684 sort \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u5bf9\u5df2\u7ecf\u5b58\u5728\u7684\u5217\u8868\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u5185\u5efa\u51fd\u6570 sorted \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u65b0\u7684 list\uff0c\u800c\u4e0d\u662f\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\u64cd\u4f5c\u3002 sorted \u8bed\u6cd5\uff1a sorted(iterable[, cmp[, key[, reverse]]]) \u53c2\u6570\u8bf4\u660e\uff1a iterable \u2013 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 cmp \u2013 \u6bd4\u8f83\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u5177\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u7684\u503c\u90fd\u662f\u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u53d6\u51fa\uff0c\u6b64\u51fd\u6570\u5fc5\u987b\u9075\u5b88\u7684\u89c4\u5219\u4e3a\uff0c\u5927\u4e8e\u5219\u8fd4\u56de1\uff0c\u5c0f\u4e8e\u5219\u8fd4\u56de-1\uff0c\u7b49\u4e8e\u5219\u8fd4\u56de0\u3002 key \u2013 \u4e3b\u8981\u662f\u7528\u6765\u8fdb\u884c\u6bd4\u8f83\u7684\u5143\u7d20\uff0c\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u5177\u4f53\u7684\u51fd\u6570\u7684\u53c2\u6570\u5c31\u662f\u53d6\u81ea\u4e8e\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\uff0c\u6307\u5b9a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u6765\u8fdb\u884c\u6392\u5e8f\u3002 reverse \u2013 \u6392\u5e8f\u89c4\u5219\uff0creverse = True \u964d\u5e8f \uff0c reverse = False \u5347\u5e8f\uff08\u9ed8\u8ba4\uff09\u3002 \u4f8b\u5b50\uff1a >>>a = [5,7,6,3,4,1,2] >>> b = sorted(a) # \u4fdd\u7559\u539f\u5217\u8868 >>> a [5, 7, 6, 3, 4, 1, 2] >>> b [1, 2, 3, 4, 5, 6, 7] >>> L=[('b',2),('a',1),('c',3),('d',4)] >>> sorted(L, cmp=lambda x,y:cmp(x[1],y[1])) # \u5229\u7528cmp\u51fd\u6570 [('a', 1), ('b', 2), ('c', 3), ('d', 4)] >>> sorted(L, key=lambda x:x[1]) # \u5229\u7528key [('a', 1), ('b', 2), ('c', 3), ('d', 4)] >>> students = [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)] >>> sorted(students, key=lambda s: s[2]) # \u6309\u5e74\u9f84\u6392\u5e8f [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)] >>> sorted(students, key=lambda s: s[2], reverse=True) # \u6309\u964d\u5e8f [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)] \u6ce8\u610f \uff1a\u5efa\u8bae\u4f7f\u7528key\uff0c\u800c\u4e0d\u662fcmp\uff0c\u56e0\u4e3akey\u66f4\u8282\u7701\u5185\u5b58\u7a7a\u95f4","title":"9. sorted()\u5185\u5efa\u51fd\u6570"},{"location":"daily_problem/#10-python27-unicodedecodeerror-ascii-codec-cant-decode-byte-0xe5-in-position-108-ordinal-not-in-range128","text":"\u51fa\u73b0\u9519\u8bef\u539f\u56e0 \uff1a python\u7684str\u9ed8\u8ba4\u662fascii\u7f16\u7801\uff0c\u548cunicode\u7f16\u7801\u51b2\u7a81 \u89e3\u51b3\u65b9\u6848 \uff1a import sys reload(sys) sys.setdefaultencoding(\u2018utf8\u2019)","title":"10. python2.7 \u89e3\u51b3UnicodeDecodeError: \u2018ascii\u2019 codec can\u2019t decode byte 0xe5 in position 108: ordinal not in range(128\u3002\u3002\u3002\u3002"},{"location":"daily_problem/#11-python","text":"product \u7b1b\u5361\u5c14\u79ef permutations \u6392\u5217 combinations \u7ec4\u5408,\u6ca1\u6709\u91cd\u590d combinations_with_replacement \u7ec4\u5408,\u6709\u91cd\u590d >>> import itertools >>> for i in itertools.product('ABCD', r=2): ... print i, ... ('A', 'A') ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'A') ('B', 'B') ('B', 'C') ('B', 'D') ('C', 'A') ('C', 'B') ('C', 'C') ('C', 'D') ('D', 'A') ('D', 'B') ('D', 'C') ('D', 'D') >>> for i in itertools.permutations('ABCD', 2): ... print i, ... ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'A') ('B', 'C') ('B', 'D') ('C', 'A') ('C', 'B') ('C', 'D') ('D', 'A') ('D', 'B') ('D', 'C') >>> for i in itertools.combinations('ABCD', 2): ... print i, ... ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'C') ('B', 'D') ('C', 'D') >>> for i in itertools.combinations_with_replacement('ABCD', 2): ... print i, ... ('A', 'A') ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'B') ('B', 'C') ('B', 'D') ('C', 'C') ('C', 'D') ('D', 'D')","title":"11. \u51e0\u4e2a\u6709\u7528\u7684python\u51fd\u6570 (\u7b1b\u5361\u5c14\u79ef, \u6392\u5217, \u7ec4\u5408)"},{"location":"daily_problem/#12-python","text":"\u7ed9\u5b9a\u4e24\u4e2a\u975e\u7a7a\u94fe\u8868\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u4f4d\u6570\u6309\u7167\u9006\u5e8f\u65b9\u5f0f\u5b58\u50a8\uff0c\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u4e24\u6570\u76f8\u52a0\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a(2 -> 4 -> 3) + (5 -> 6 -> 4) \u8f93\u51fa\uff1a7 -> 0 -> 8 \u539f\u56e0\uff1a342 + 465 = 807 \u4ee3\u7801\u5b9e\u73b0\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None def addTwoNumbers(self, l1, l2): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" val_sum = l1.val + l2.val list_node = ListNode(val_sum % 10) a = val_sum // 10 node = list_node while True: try: l1 = l1.next except: pass try: l2 = l2.next except: pass if not l1 and not l2: break elif not l1: l1_val = 0 l2_val = l2.val elif not l2: l2_val = 0 l1_val = l1.val else: l1_val = l1.val l2_val = l2.val val_sum = l1_val + l2_val + a temp_node = ListNode(val_sum % 10) node.next = temp_node node = temp_node a = val_sum // 10 if a != 0: node.next = ListNode(a) return list_node","title":"12. python\u6c42\u4e24\u4e2a\u94fe\u8868\u7ec4\u6210\u7684\u6570\u5b57\u7684\u548c"},{"location":"daily_problem/#13-pythondivmoda-b","text":"v2.7 \u5b9e\u9645\u4e0a\u662f\u7b97a\u9664\u4ee5b\u7684\u5546\u548c\u4f59\u6570\uff0c\u8fd4\u56de(\u5546\uff0c\u4f59\u6570) divmod(1,2) (0, 1) divmod(5, 1) (5, 0)","title":"13. python\u5185\u7f6e\u51fd\u6570\u2014\u2014divmod(a, b)"},{"location":"daily_problem/#14-pythonenumeratesequence-start0","text":">>> seasons = ['Spring', 'Summer', 'Fall', 'Winter'] >>> list(enumerate(seasons)) [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')] >>> list(enumerate(seasons, start=1)) [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]","title":"14. python\u5185\u7f6e\u51fd\u6570\u2014\u2014enumerate(sequence, start=0)"},{"location":"daily_problem/#15-pythonfilterfunction-iterable","text":"v2.7 \u5982\u679cfunction\u662fNone\uff0c\u5c31\u7b49\u4ef7\u4e8e\uff1a [item for item in iterable if item] \u5982\u679cfunction\u4e0d\u662fNone\uff0c\u5c31\u7b49\u4ef7\u4e8e\uff1a [item for item in iterable if function(item)]","title":"15. python\u5185\u7f6e\u51fd\u6570\u2014\u2014filter(function, iterable)"},{"location":"daily_problem/#16-datetime","text":"datetime\u6a21\u5757\u7528\u4e8e\u662fdate\u548ctime\u6a21\u5757\u7684\u5408\u96c6\uff0cdatetime\u6709\u4e24\u4e2a\u5e38\u91cf\uff0cMAXYEAR\u548cMINYEAR\uff0c\u5206\u522b\u662f9999\u548c1. datetime\u6a21\u5757\u5b9a\u4e49\u4e865\u4e2a\u7c7b\uff0c\u5206\u522b\u662f 1. datetime.date\uff1a\u8868\u793a\u65e5\u671f\u7684\u7c7b 2. datetime.datetime\uff1a\u8868\u793a\u65e5\u671f\u65f6\u95f4\u7684\u7c7b 3. datetime.time\uff1a\u8868\u793a\u65f6\u95f4\u7684\u7c7b 4. datetime.timedelta\uff1a\u8868\u793a\u65f6\u95f4\u95f4\u9694\uff0c\u5373\u4e24\u4e2a\u65f6\u95f4\u70b9\u7684\u95f4\u9694 5. datetime.tzinfo\uff1a\u65f6\u533a\u7684\u76f8\u5173\u4fe1\u606f datetime.date\u7c7b date\u7c7b\u6709\u4e09\u4e2a\u53c2\u6570,datetime.date(year,month,day)\uff0c\u8fd4\u56de datetime.date(2018, 7, 30) datetime.date.ctime() ,\u8fd4\u56de\u683c\u5f0f\u5982 Sun Apr 16 00:00:00 2017 >>>datetime.date.ctime(datetime.date(2018, 7, 30)) 'Mon Jul 30 00:00:00 2018' datetime.date.fromtimestamp(timestamp) ,\u6839\u636e\u7ed9\u5b9a\u7684\u65f6\u95f4\u622e\uff0c\u8fd4\u56de\u4e00\u4e2adate\u5bf9\u8c61\uff1b datetime.date.today() \u4f5c\u7528\u76f8\u540c >>>datetime.date.today() datetime.date(2018, 7, 30) datetime.date.isocalendar() :\u8fd4\u56de\u683c\u5f0f\u5982(year\uff0cmonth\uff0cday)\u7684\u5143\u7ec4 >>>datetime.date.isocalendar(datetime.date(2018, 7, 30)) (2018, 31, 1) datetime.date.isoformat() \uff1a\u8fd4\u56de\u683c\u5f0f\u5982YYYY-MM-DD >>>datetime.date.isoformat(datetime.date(2018, 7, 30)) '2018-07-30' datetime.date.isoweekday() \uff1a\u8fd4\u56de\u7ed9\u5b9a\u65e5\u671f\u7684\u661f\u671f\uff080-6\uff09\uff0c\u661f\u671f\u4e00=0\uff0c\u661f\u671f\u65e5=6 >>>datetime.date.isoweekday(datetime.date.today()) 1 datetime.date.replace(year,month,day) \uff1a\u66ff\u6362\u7ed9\u5b9a\u65e5\u671f\uff0c\u4f46\u4e0d\u6539\u53d8\u539f\u65e5\u671f >>>a = datetime.date.today() >>>a.replace(day=26) datetime.date(2018, 7, 26) datetime.date.strftime(format) :\u628a\u65e5\u671f\u65f6\u95f4\u6309\u7167\u7ed9\u5b9a\u7684format\u8fdb\u884c\u683c\u5f0f\u5316\u3002 >>>datetime.date.strftime(datetime.date.today(), '%Y-%m-%d') '2018-07-30' ``` >>>a = datetime.date.today() >>>a datetime.date(2018, 7, 30) >>>a.strftime('%Y-%m-%d') '2018-07-30' ``` datetime.date.timetuple() \uff1a\u8fd4\u56de\u65e5\u671f\u5bf9\u5e94\u7684time.struct_time\u5bf9\u8c61 >>>a = datetime.date.today() >>>datetime.date.timetuple(a) time.struct_time(tm_year=2018, tm_mon=7, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=211, tm_isdst=-1) datetime.date.weekday() \uff1a\u8fd4\u56de\u65e5\u671f\u7684\u661f\u671f >>>a = datetime.date.today() >>>datetime.date.weekday(a) 0 >>>a.weekday() 0 datetime.time\u7c7b time\u7c7b\u67095\u4e2a\u53c2\u6570\uff0cdatetime.time(hour,minute,second,microsecond,tzoninfo),\u8fd4\u56de08:29:30 datetime.time.replace() >>>datetime.time.replace(datetime.time(), hour=1) datetime.time(1, 0) datetime.time.strftime(format) :\u6309\u7167format\u683c\u5f0f\u8fd4\u56de\u65f6\u95f4 >>>datetime.time.strftime(datetime.time(2,3), \"%H:%M\") '02:03' datetime.time.tzname() \uff1a\u8fd4\u56de\u65f6\u533a\u540d\u5b57 datetime.time.utcoffset() \uff1a\u8fd4\u56de\u65f6\u533a\u7684\u65f6\u95f4\u504f\u79fb\u91cf datetime.datetime\u7c7b datetime\u7c7b\u6709\u5f88\u591a\u53c2\u6570\uff0cdatetime(year, month, day[, hour[, minute[, second[,microsecond[,tzinfo]]]]])\uff0c\u8fd4\u56de\u5e74\u6708\u65e5\uff0c\u65f6\u5206\u79d2 datetime.datetime.ctime() datetime.datetime.now().date() \uff1a\u8fd4\u56de\u5f53\u524d\u65e5\u671f\u65f6\u95f4\u7684\u65e5\u671f\u90e8\u5206 datetime.datetime.now().time() \uff1a\u8fd4\u56de\u5f53\u524d\u65e5\u671f\u65f6\u95f4\u7684\u65f6\u95f4\u90e8\u5206 datetime.datetime.fromtimestamp() datetime.datetime.now() \uff1a\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4 datetime.datetime.replace() datetime.datetime.strftime() \uff1a\u7531\u65e5\u671f\u683c\u5f0f\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u683c\u5f0f >>>datetime.datetime.now().strftime('%b-%d-%Y %H:%M:%S') 'Apr-16-2017 21:01:35' datetime.datetime.strptime() :\u7531\u5b57\u7b26\u4e32\u683c\u5f0f\u8f6c\u5316\u4e3a\u65e5\u671f\u683c\u5f0f >>>datetime.datetime.strptime('Apr-16-2017 21:01:35', '%b-%d-%Y %H:%M:%S') 2017-04-16 21:01:35 datetime.timedelta\u7c7b datetime.datetime.timedelta\u7528\u4e8e\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u4f8b\u5982\uff1a >>> a=datetime.datetime.now() >>> b=datetime.datetime.now() >>> a datetime.datetime(2017, 4, 16, 21, 21, 20, 871000) >>> b datetime.datetime(2017, 4, 16, 21, 21, 29, 603000) >>> b-a datetime.timedelta(0, 8, 732000) >>> (b-a).seconds 8 \u6216\u8005 time1 = datetime.datetime(2016, 10, 20) time2 = datetime.datetime(2015, 11, 2) \"\"\"\u8ba1\u7b97\u5929\u6570\u5dee\u503c\"\"\" print(time1-time2).days \"\"\"\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u76f8\u9694\u7684\u79d2\u6570\"\"\" print (time1-time2).total_seconds()","title":"16. datetime"},{"location":"daily_problem/#17-could-not-install-packages-due-to-an-environmenterror-errno-13-permission-denied-librarypython27site-packagesvine","text":"pip install --user flask \u5728install\u540e\u52a0 \u2013user","title":"17. \u9488\u5bf9\u201ccould not install packages due to an EnvironmentError: [Errno 13] Permission denied: '/Library/Python/2.7/site-packages/vine'\u201d\u7684\u89e3\u51b3\u65b9\u5f0f"},{"location":"daily_problem/#18-xml","text":"v2.7 dicttoxml\u4f1a\u81ea\u52a8\u5728\u5934\u90e8\u6dfb\u52a0 <?xml version=\"1.0\" encoding=\"UTF-8\" ?> \u5e76\u901a\u8fc7\u53c2\u6570\u8bbe\u7f6exml\u7684\u5c5e\u6027 import dicttoxml dicttoxml.dicttoxml(self.post_data_dict, root=True, custom_root=\"request\", attr_type=False)","title":"18. \u5b57\u5178\u8f6cxml"},{"location":"daily_problem/#19-orand","text":"\u5982\u679c\u7528or\uff0c\u5e94\u8be5\u628a\u4e3atrue\u7684\u5199\u5728or\u524d\uff0c\u51cf\u5c0f\u8fd0\u7b97\u65f6\u95f4\uff1b \u5982\u679c\u7528and\uff0c\u5e94\u8be5\u628afalse\u7684\u5199\u5728and\u524d","title":"19. or\u548cand"},{"location":"daily_problem/#20-xmltodict","text":"\u5982\u679cxml\u4e2d\u5728\u540c\u4e00\u7ea7\u6709\u76f8\u540c\u5143\u7d20\uff0c\u5c31\u4f1a\u628a\u76f8\u540c\u5143\u7d20\u53d8\u6210\u5217\u8868\uff1b\u5982\u679c\u6ca1\u6709\u76f8\u540c\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u628a\u8be5\u5143\u7d20\u53d8\u4e3a\u5b57\u5178 \u5bf9\u4e8exml\u4e2d\u4e3a\u7a7a\u7684\u60c5\u51b5\uff0cxmltodict\u4f1a\u81ea\u52a8\u5c06\u503c\u53d8\u4e3a None","title":"20. xmltodict\u7684\u5751"},{"location":"daily_problem/#21-if-else","text":"\u53ea\u6709if [a for a in a_list if a==1] if-else [a if a==1 else a-1 for a in a_list]","title":"21. \u5217\u8868\u751f\u6210\u5f0f\u4e2d\u7684if-else"},{"location":"daily_problem/#22-mysql-said-authentication-plugin-caching_sha2_password-cannot-be-loaded-dlopenusrlocal","text":"\u5728\u4f7f\u7528MySQL Workbench\u8fde\u63a5\u672c\u5730\u6570\u636e\u5e93\u7684\u65f6\u5019\uff0c\u51fa\u73b0\u4e86 MySQL said: Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen(/usr/local/lib/plugin/caching_sha2_password.so, 2): image not found \u8fd9\u662f\u56e0\u4e3a\u5728\u94fe\u63a5\u6570\u636e\u5e93\u65f6\u4e0d\u80fd\u52a0\u8f7d\u2018caching_sha2_password\u2019\u8fd9\u4e2a\u63d2\u4ef6\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u5bf9\u8eab\u4efd\u9a8c\u8bc1\u3002 \u89e3\u51b3\u65b9\u6848\u662f\uff1a 1. \u6253\u5f00\u7cfb\u7edf\u504f\u597d\u8bbe\u7f6e\uff0c\u627e\u5230mysql\uff0c\u70b9\u51fbInitialize Database\u3002 2. \u8f93\u5165\u4f60\u7684\u65b0\u5bc6\u7801\uff0c\u8bb0\u4f4f\u8fd9\u4e2a\u5bc6\u7801\uff0c\u7528\u4e8e\u540e\u671f\u94fe\u63a5\u6570\u636e\u5e93\u7684\u767b\u9646\u4f7f\u7528\u3002 3. \u9009\u62e9\u2018Use legacy password\u2018\u3002 4. \u91cd\u542fmysql\u670d\u52a1\u3002 \u8fd9\u6837\u5728\u8fde\u63a5\u5c31\u6ca1\u6709\u95ee\u9898\u4e86","title":"22. \u9488\u5bf9MySQL said: Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen(/usr/local/...\u7684\u95ee\u9898"},{"location":"daily_problem/#23-django-model","text":"comment_list = Comment.objects.all()[:5].only('post', 'text') # \u53ea\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5","title":"23. django model\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5"},{"location":"daily_problem/#24-connection-reset-by-peer","text":"Connection reset by peer: socket write error\u9519\u8bef\u5206\u6790\uff1a \u5e38\u51fa\u73b0\u7684Connection reset by peer: \u539f\u56e0\u53ef\u80fd\u662f\u591a\u65b9\u9762\u7684\uff0c\u4e0d\u8fc7\u66f4\u5e38\u89c1\u7684\u539f\u56e0\u662f\uff1a \u2460\uff1a\u670d\u52a1\u5668\u7684\u5e76\u53d1\u8fde\u63a5\u6570\u8d85\u8fc7\u4e86\u5176\u627f\u8f7d\u91cf\uff0c\u670d\u52a1\u5668\u4f1a\u5c06\u5176\u4e2d\u4e00\u4e9b\u8fde\u63a5Down\u6389\uff1b \u2461\uff1a\u5ba2\u6237\u5173\u6389\u4e86\u6d4f\u89c8\u5668\uff0c\u800c\u670d\u52a1\u5668\u8fd8\u5728\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e\uff1b \u2462\uff1a\u6d4f\u89c8\u5668\u7aef\u6309\u4e86Stop \u901a\u5e38\u539f\u56e0\u4e3a\uff1a\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u5bf9\u7b49\u65b9\u5e94\u7528\u7a0b\u5e8f\u7a81\u7136\u505c\u6b62\u8fd0\u884c\uff0c\u6216\u8fdc\u7a0b\u4e3b\u673a\u91cd\u65b0\u542f\u52a8\uff0c\u6216\u8fdc\u7a0b\u4e3b\u673a\u5728\u8fdc\u7a0b\u65b9\u5957\u63a5\u5b57\u4e0a\u4f7f\u7528\u4e86\u201c\u5f3a\u5236\u201d\u5173\u95ed \uff08\u53c2\u89c1setsockopt(SO_LINGER)\uff09\u3002\u53e6\u5916\uff0c\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u6b63\u5728\u8fdb\u884c\u65f6\uff0c\u5982\u679c\u8fde\u63a5\u56e0\u201ckeep-alive\u201d\u6d3b\u52a8\u68c0\u6d4b\u5230\u4e00\u4e2a\u5931\u8d25\u800c\u4e2d \u65ad\uff0c\u4e5f\u53ef\u80fd\u5bfc\u81f4\u6b64\u9519\u8bef\u3002\u6b64\u65f6\uff0c\u6b63\u5728\u8fdb\u884c\u7684\u64cd\u4f5c\u4ee5\u9519\u8bef\u7801WSAENETRESET\u5931\u8d25\u8fd4\u56de\uff0c\u540e\u7eed\u64cd\u4f5c\u5c06\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u7801WSAECONNRESET\u3002 \u4f46\u662f\u5982\u679c\u9891\u7e41\u51fa\u73b0\uff0c\u5c31\u8868\u793a\u5f88 \u591a\u5ba2\u6237\u7aef\u8fde\u63a5\u5230Apache\u670d\u52a1\u5668\u7684\u54cd\u5e94\u65f6\u95f4\u592a\u957f\u4e86\uff0c\u53ef\u80fd\u662f\u7f51\u7edc\u7684\u95ee\u9898\u6216\u8005\u670d\u52a1\u5668\u6027\u80fd\u95ee\u9898\u3002","title":"24. Connection reset by peer\u7684\u5e38\u89c1\u539f\u56e0"},{"location":"daily_problem/#25-djangourlspathdjangourlsre_path","text":"\u5728django2.0\u4ee5\u540e django.urls.path \u4e0d\u7528\u4e8e\u6b63\u5219\u5339\u914d\uff0c\u5982\u679c\u60f3\u7528\u6b63\u5219\uff0c\u53ef\u4ee5\u7528 django.urls.re_path from django.urls import re_path re_path(r'^(?P<album_id>[0-9])/$', views.detail, name='detail'), \u5982\u679c\u7528url()\uff0c\u4e5f\u4f1a\u94fe\u63a5\u5230re_path()\u7684","title":"25. \u5173\u4e8edjango.urls.path\u548cdjango.urls.re_path"},{"location":"django/","text":"p\u4e2a\u5927s\uff1a \u8fd9\u91cc\u7528\u7684\u662fpython3.7\u548cDjango2.0.\u5047\u8bbe\u5168\u90fd\u5b89\u88c5\u6210\u529f= = \u7136\u540e\u8fd9\u4e2a\u662f\u6211\u505a\u4e2a\u4eba\u7f51\u7ad9\u7684\u4e00\u4e2a\u8fc7\u7a0b=\u3002= \u7136\u540e\u8fd9\u4e2a\u4e5f\u4e0d\u80fd\u7b97\u662f\u4e2a\u6559\u7a0b\u5427=\u3002= \u7136\u540e\u8fd9\u53ea\u662f\u7c97\u7cd9\u7684\u8bb0\u5f55=\u3002= \u6700\u540e\uff0c\u9632\u8131\u53d1\u7528\u9738\u738b=3= \u751f\u6210\u4e00\u4e2a\u5b8c\u6574\u7684django\u9879\u76ee \u521b\u5efaDjango\u9879\u76ee django-admin.py startproject MySite \u6b64\u65f6\uff0c\u4f60\u4f1a\u770b\u5230\u8fd9\u6837\u7684\u6587\u4ef6\u5939\uff1a \u8fd0\u884c\u4e00\u4e0b\u4f60\u7684\u9879\u76ee\uff0c\u770b\u770b\u6709\u6ca1\u6709\u6210\u529f \uff1a ./manage.py runserver \u7ec8\u7aef\u4f1a\u663e\u793a\u8fd9\u4e9b\uff1a \u6709\u7ea2\u5b57\u4e5f\u4e0d\u8981\u62c5\u5fc3\uff0c\u56e0\u4e3a\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u5462\uff01 \u63a5\u4e0b\u6765\u53bb http://127.0.0.1:8000/ \u770b\u4e00\u770b\uff1a \u6210\u529f\u4e86\uff01 ps\uff1a \u5982\u679c\u60f3\u8981\u5916\u90e8\u673a\u5668\uff08\u540c\u4e00\u7f51\u7edc\uff09\u8bbf\u95ee\u672c\u673a\u7684Django\u670d\u52a1\u7684\u8bdd\uff0c\u8981\u5199\u6210 ./manage.py runserver 0.0.0.0:9999 ,\u5e76\u5c06 setting.py \u4e2d\u7684 ALLOWED_HOSTS \u6539\u4e3a ALLOWED_HOSTS = ['*', ] \uff0c\u4e00\u5b9a\u8981\u52a0 \u9017\u53f7 \uff01 - \u6539\u4e00\u4e9b\u914d\u7f6e ps \uff1a\u8fd9\u91cc\u7684\u987a\u5e8f\u53ef\u80fd\u4e0d\u5bf9\u3002= = 1. \u66f4\u6539 /MySite/MySite/settings.py \u4e2d\u7684\u5185\u5bb9 Django\u9ed8\u8ba4\u7684 DATABASES \u662f sqlite \uff0c\u662f\u8fd9\u6837\u7684\uff1a \u8fd9\u91cc\u6211\u662f\u7528\u7684\u662f MySQL \u6570\u636e\u5e93\uff0c\u56e0\u6b64\uff0c\u6211\u8981\u6539\u6210\u8fd9\u6837\uff1a ```python DATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', 'NAME': 'MySite', 'USER': 'xxx', 'PASSWORD': 'xxxxx', 'HOST': '127.0.0.1', 'PORT': '3306' } } ``` \u8fd9\u91cc\u4e00\u5b9a\u8981\u786e\u4fdd\u6570\u636e\u5e93\u5df2\u7ecf\u5b58\u5728\u4e86\u3002 \u5728\u8fd9\u4e4b\u524d\uff0c\u9700\u8981\u521b\u5efa\u6570\u636e\u5e93\uff0c\u50cf\u8fd9\u6837\u6ef4\uff1a create database MySite CHARACTER SET utf8 COLLATE utf8_general_ci; \u8fd8\u8981\u66f4\u6539 \u65f6\u533a \u548c \u8bed\u8a00 \u5411 /MySite/MySite/__init__.py \u4e2d\u6dfb\u52a0\u5185\u5bb9 python import pymysql pymysql.install_as_MySQLdb() \u6570\u636e\u5e93\u8fc1\u79fb \u9996\u5148\uff0c\u6267\u884c ./manage.py makemigrations \u7136\u540e\uff0c\u6267\u884c ./manage.py migrate \u8fd9\u6837\u5c31\u6210\u529f\u5566\uff5e \u521b\u5efa\u8d85\u7ea7\u7528\u6237 \u521b\u5efa\u8d85\u7ea7\u7528\u6237\u662f\u7528\u6765\u767b\u9646\u5230admin\u540e\u53f0\u7ba1\u7406\u4e2d\u7684 \u6267\u884c ./manage.py createsuperuser \u7136\u540e\u6309\u7167\u63d0\u793a\u586b\u5199\u5c31\u597d\u5566\uff5e ps\uff1a \u4e00\u5b9a\u8981\u5148\u8fdb\u884c\u6570\u636e\u5e93\u8fc1\u79fb\uff0c\u518d\u521b\u5efa\u7528\u6237\u3002\u5426\u5219\uff0c\u4f1a\u51fa\u73b0 \u8fdb\u5165admin\u770b\u770b \u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 http://127.0.0.1:8000/admin \uff0c\u4f1a\u51fa\u73b0\u767b\u5f55\u9875\u9762\uff0c\u6b64\u65f6\u4f1a\u53d1\u73b0\u5168\u90fd\u53d8\u6210\u4e2d\u6587\u4e86\uff0c\u8bf4\u660e\u4e4b\u524d\u7684\u8bbe\u7f6e\u751f\u6548\u4e86\u3002 \u63a5\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u7528\u521a\u521a\u521b\u5efa\u7684\u7528\u6237\u767b\u9646\u4e86\uff0c\u67e5\u770b\u540e\u53f0\u6570\u636e\u4e86\uff01 \u9879\u76ee\u6b63\u5f0f\u5f00\u59cb \u521b\u5efaapp \u6267\u884c ./manage.py startapp Post ,\u67e5\u770b\u9879\u76ee\u7ed3\u6784\uff0c\u5982\u4e0b\uff1a \u5b8c\u6210\u4e0a\u6b65\u64cd\u4f5c\u540e\uff0c\u9700\u8981\u5728 /MySite/MySite/settings.py \u4e2d\u5c06app\u6dfb\u52a0\u8fdb\u53bb\uff1a \u63a5\u4e0b\u6765\uff0c\u9700\u8981\u5728app\u6587\u4ef6\u5939\u4e0b\u6dfb\u52a0 urls.py \uff0c\u7528\u4e8e\u8def\u7531\u6620\u5c04\uff1a \u5728 urls.py \u4e2d\u8fd9\u6837\u5199\uff1a app_name = 'Post' # \u8fd9\u91cc\u662f\u4e3a\u4e86url\u53cd\u5411\u89e3\u6790\u7528 urlpatterns = [ # \u8fd9\u91cc\u653e\u6620\u5c04\u7684view ] \u540c\u65f6\uff0c\u5728 /MySite/MySite/urls.py \u4e2d\u9700\u8981\u6dfb\u52a0\u5bf9 Post.urls \u7684\u6620\u5c04\uff1a from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path(r'', include('Post.urls')), ] \u521b\u5efa\u6a21\u578b \u5728app\u4e0b\u7684 models.py \u521b\u5efa\u81ea\u5df1\u7684\u6a21\u578b\u5c31\u53ef\u4ee5\u5566~ from django.db import models class Category(models.Model): \"\"\"\u5206\u7c7b\"\"\" name = models.CharField(max_length=100) class Tag(models.Model): \"\"\"\u6807\u7b7e\"\"\" name = models.CharField(max_length=100) class Post(models.Model): \"\"\"\u6587\u7ae0\"\"\" title = models.CharField(max_length=100) body = models.TextField() created_time = models.DateTimeField() modified_time = models.DateTimeField() excerpt = models.CharField(max_length=200, blank=True) # \u6587\u7ae0\u6458\u8981\uff0c\u53ef\u4e3a\u7a7a category = models.ForeignKey(Category, on_delete=True) # ForeignKey\u8868\u793a1\u5bf9\u591a\uff08\u591a\u4e2apost\u5bf9\u5e941\u4e2acategory\uff09 tags = models.ManyToManyField(Tag, blank=True) views = models.PositiveIntegerField(default=0) # \u9605\u8bfb\u91cf \u7136\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u518d\u8fdb\u884c \u6570\u636e\u5e93\u8fc1\u79fb \u554a\uff01\uff01 \u524d\u7aef\u6a21\u7248 \u8fd9\u91cc\u7684\u524d\u7aef\u6a21\u677f\u4f7f\u7528\u7684\u662f\u6a21\u677f\u4e4b\u5bb6\u7684 \u94fe\u63a5\ud83d\udd17\uff1ahttp://www.cssmoban.com/tags.asp?n=html5 \u9996\u5148\u521b\u5efatemplates\u76ee\u5f55\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a \u6b64\u65f6\uff0c\u9700\u8981\u5728 setting.py \u4e2d\u6dfb\u52a0\u5173\u4e8e\u6a21\u677f\u7684\u914d\u7f6e\uff1a \u63a5\u4e0b\u6765\u662fstatic\u76ee\u5f55\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a \u663e\u800c\u6613\u89c1\uff0c\u8fd9\u91cc\u653e\u7684\u662f\u4e00\u4e9bcss\u3001js\u6587\u4ef6\u7b49 index\u89c6\u56fe \u9996\u5148\uff0c\u5728 Post/views.py \u4e2d\u5b9e\u73b0 index \u65b9\u6cd5\uff1a def index(request): \"\"\" \u4e3b\u9875 :param request: :return: \"\"\" return render(request=request, template_name='Post/index.html') request \u4e3a\u8bf7\u6c42\u5bf9\u8c61; template_name \u4e3a\u6e32\u67d3\u7684\u524d\u7aef\u9875\u9762\u7684\u8def\u5f84\u5b57\u7b26\u4e32\uff08\u76f8\u5bf9templates\u76ee\u5f55\uff09 \u7136\u540e\uff0c\u5728 Post/urls.py \u4e2d\u8fdb\u884c\u8def\u7531\u6620\u5c04\uff1a urlpatterns = [ url(r'^$', views.index, name=\"index\"), ] \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u4e3b\u9875\u7684url\u662f\u7a7a\uff0c\u6b63\u5219\u5fc5\u987b\u5199\u6210 ^$ \u6700\u540e\uff0c\u4e00\u5b9a\u8981\u8981\u4fee\u6539\u9759\u6001\u9875\u9762\u4e2d\u5f15\u7528\u7684\u8def\u5f84\u3002 \u5bf9\u4e8eDjango\u6765\u8bf4\uff0c\u53ef\u4ee5\u4f7f\u7528 static \u6807\u7b7e\u3002 \u5728\u9875\u9762\u5f00\u5934\u5f15\u5165 {% load static %} \uff0c\u8fd9\u4e2a\u5bf9\u5e94\u7684\u914d\u7f6e\u4fe1\u606f\u662f \u5e76\u5c06\u9875\u9762\u4e2d\u7684\u8def\u5f84\u6539\u4e3a ps\uff1a \u5bf9\u4e8ecss\u6216\u8005js\u4e2d\u7684\u5f15\u7528\u4e5f\u4e0d\u8981\u5fd8\u4e86\u6539\uff01 \u8fd0\u884c\u4e00\u4e0b\u3002 \u641e\u5b9a\uff01 \u5411\u524d\u7aef\u6e32\u67d3\u53ca\u5206\u9875 \u9996\u5148\uff0c\u66f4\u6539 index() from django.shortcuts import render from django.core.paginator import Paginator from .models import Post def index(request): \"\"\" \u4e3b\u9875 :param request: :return: \"\"\" post = Post.objects.all() limit = 3 paginator = Paginator(post, limit) page = request.GET.get('page', 1) result = paginator.page(page) context = { \"post_list\": result, \"page\": page } return render(request=request, template_name='Post/index.html', context=context) \u7136\u540e\u4fee\u6539 index.html \u8fd0\u884c\u770b\u4e00\u4e0b \u641e\u5b9a\uff01 \u66f4\u6539index.html\u4e2d\u7684\u6240\u6709\u8df3\u8f6c\u94fe\u63a5 \u5728\u8fd9\u91cc\uff0c\u6211\u7528\u7684\u662furl\u7684\u53cd\u5411\u89e3\u6790\u3002\u8fd9\u6837\u53ef\u4ee5\u51cf\u8f7b\u540e\u671f\u7ef4\u62a4\u6210\u672c\u3002\u56e0\u6b64\uff0c\u5c31\u9700\u8981\u5728urls.py\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4fe1\u606f\uff1a \u5728html\u4e2d\u4fee\u6539\u6210\u5982\u4e0b\uff1a \u535a\u5ba2\u6587\u7ae0\u9875\u9762 \u522b\u5fd8\u4e86\u6539\u8df3\u8f6c\u94fe\u63a5\uff01\uff01\uff01\uff01 \u6587\u7ae0\u8be6\u60c5\u9875\u548c\u4e3b\u9875\u5927\u4f53\u7ed3\u6784\u662f\u76f8\u4f3c\u7684\uff0c\u56e0\u6b64\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u6a21\u7248\u7ee7\u627f\u3002 \u5728\u57fa\u7c7b\u6a21\u7248\u91cc\uff0c\u4f7f\u7528\u8fd9\u4e2a\uff0c\u5c06\u5b50\u7c7b\u6a21\u7248\u9700\u8981\u586b\u5145\u7684\u4f4d\u7f6e\u5360\u4f4d \u7136\u540e\u5728\u5b50\u7c7b\u6a21\u677f\u4e2d\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u6807\u7b7e\u5c06\u586b\u5145\u7684\u5185\u5bb9\u8fdb\u884c\u5305\u88f9 \u6700\u540e\uff0c\u4e0d\u8981\u5fd8\u4e86\u5728\u5b50\u7c7b\u6a21\u677f\u4e2d\u518d\u5199\u4e0a {% extends 'Post/base.html' %} \u548c {% load static %} \u5728 Post/urls.py \u4e2d\u6dfb\u52a0\u8be6\u60c5\u9875\u7684url\uff1a url(r'^detail/post-(?P<pk>\\d+)$', views.detail, name=\"detail\"), \u5e76\u6dfb\u52a0detail\u89c6\u56fe def detail(request, pk): \"\"\" :param request: :param pk: \u63a5\u6536\u5230\u7684\u6587\u7ae0\u7684\u4e3b\u952eid :return: \"\"\" return render(request, template_name='Post/blog.html', ) \u8fd0\u884c\u770b\u4e00\u4e0b\u5427\uff01 \u641e\u5b9a\uff01 \u7ee7\u7eed\u5728\u89c6\u56fe\u4e2d\u6dfb\u52a0\u5185\u5bb9\uff0c\u5c06\u5047\u6570\u636e\u6539\u4e3a\u771f\u5b9e\u7684\u6587\u7ae0\u6570\u636e \u5bf9\u4e8e\u591a\u5bf9\u591a\u7684\u5173\u7cfb\u6765\u8bf4\uff0c\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\uff1a \u770b\u4e00\u770b\u6548\u679c\u5427\uff01 \u63a5\u4e0b\u6765\u5c31\u662f\u8ba9\u6211\u53ef\u4ee5\u4e0a\u4f20markdown\u683c\u5f0f\u7684\u6587\u672c\u4e86\uff01 \u8fd9\u4e2a\u6682\u65f6\u5148\u4e0d\u89e3\u51b3\u4e86= =\uff0c\u5c0f\u672c\u672c\u8bb0\u4e0b\u6765 \u6dfb\u52a0\u5206\u7c7b\u680f \u8fd9\u91cc\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u7248\u6807\u7b7e\uff01 \u9996\u5148\uff0c\u5728app\u6587\u4ef6\u5939\u4e0b\uff0c\u521b\u5efa templatetags \u6587\u4ef6\u5939\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2apy\u6587\u4ef6\uff0c\u91cc\u9762\u5b9a\u4e49\u6a21\u7248\u6807\u7b7e\uff0c\u76ee\u5f55\u662f\u8fd9\u6837\u6ef4\uff1a \u7136\u540e\u5b9a\u4e49\u4e00\u4e2a\u5206\u7c7b\u76ee\u5f55\u7684\u6807\u7b7e\uff1a from django import template from ..models import Category register = template.Library() @register.simple_tag def get_categories(): \"\"\" \u5206\u7c7b\u76ee\u5f55\u6807\u7b7e :return: \"\"\" return Category.objects.all() \u5728\u524d\u7aef\u5f15\u7528\u81ea\u5b9a\u4e49\u6807\u7b7e\u65f6\uff0c\u4e00\u5b9a\u8981\u5f00\u5934\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u6a21\u7248\u6807\u7b7e\u6240\u5728\u7684py\u6587\u4ef6\uff0c {% load simple_tags %} ,\u7136\u540e\u518d\u4f7f\u7528\uff1a {% get_categories as category_list %} {% for category in category_list %} <li><a href=\"#\">{{ category.name }}</a></li> {% endfor %} \u770b\u4e00\u4e0b\u6548\u679c\u5427\uff01 \u641e\u5b9a\uff01 \u8bc4\u8bba\u529f\u80fd \u8bc4\u8bba\u529f\u80fd\u65b0\u5efa\u4e00\u4e2aapp ./manage.py startapp comment \u4e0d\u8981\u5fd8\u4e86\u628a\u5b83\u6ce8\u518c\u5230django\u4e2d \u521b\u5efa\u6a21\u578b\uff1a from django.db import models class Comment(models.Model): name = models.CharField(max_length=20) email = models.EmailField(max_length=50) website = models.URLField(blank=True) text = models.TextField() created_time = models.DateTimeField(auto_now_add=True) post = models.ForeignKey('Post.Post', on_delete=True) # \u4e00\u7bc7\u6587\u7ae0\u6709\u591a\u4e2a\u8bc4\u8bba \u4e0d\u8981\u5fd8\u4e86\u6ce8\u518c\u5230admin\u4e2d\u554a\uff01 admin.site.register(Comment) \u6700\u91cd\u8981\u7684\u4e00\u6b65\u3002\u6570\u636e\u5e93\u8fc1\u79fb\u554a\uff01\uff01\uff01 \u8fd9\u91cc\u8981\u5b9e\u73b0\u7684\u662f\u70b9\u51fbsubmit\u6309\u94ae\uff0c\u4f1a\u63d0\u4ea4\u8bc4\u8bba \u5728 comment/views.py \u4e2d\u6dfb\u52a0\u89c6\u56fe\uff1a from django.shortcuts import render, redirect from .models import Comment from Post.models import Post from django.urls import reverse def submit_comment(request, pk): \"\"\" \u5904\u7406\u63d0\u4ea4\u7684\u8bc4\u8bba :param request: :return: \"\"\" post = request.POST comment = Comment() comment.name = post.get(\"name\") comment.email = post.get('email') comment.website = post.get('website') comment.text = post.get('message') comment.post = Post.objects.get(id=pk) comment.save() return redirect(reverse('Post:detail', kwargs={\"pk\": pk})) \u66f4\u6539\u524d\u7aef\u9875\u9762\u4e2d\u7684\u8bc4\u8bba\u90e8\u5206\uff1a \u5728 comment/urls.py \u4e2d\u6dfb\u52a0\u6620\u5c04\uff1a \u8bd5\u4e00\u4e0b\u5427\uff01 \u641e\u5b9a\uff01 \u540e\u9762\u518d\u5b8c\u5584\u4e00\u4e0b\u3002\u641e\u6210\u53ef\u4ee5\u56de\u590d\u7684\u5575\uff01\u5c0f\u672c\u672c\u8bb0\u4e0b\u6765\uff5e \u6700\u65b0\u8bc4\u8bba \u8fd9\u4e2a\u4e5f\u5199\u6210\u81ea\u5b9a\u4e49\u6807\u7b7e\u5575\u3002 @register.simple_tag def get_latest_comment(): \"\"\" \u83b7\u53d6\u6700\u65b0\u8bc4\u8bba :return: \"\"\" comment_list = Comment.objects.all()[:5].only('post', 'text') # \u53ea\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5 return comment_list truncatechars \u53ef\u4ee5\u622a\u53d6\u5b57\u7b26\u4e32\uff0c\u7528\u6cd5\uff1a {{ comment.text | truncatechars:10 }} \u770b\u4e00\u4e0b\u6548\u679c \u641e\u5b9a\uff01 \u9605\u8bfb\u91cf \u5728 Post/models.py \u4e2d\u6dfb\u52a0\uff1a \u5728 Post/views.py \u4e2d\u6dfb\u52a0\uff1a \u5728\u524d\u7aef\u9875\u9762\u6dfb\u52a0\uff1a \u641e\u5b9a\uff01 \u597d\u5566\uff5e\u5230\u8fd9\u91cc\u535a\u5ba2\u57fa\u672c\u6210\u578b\u4e86\u3002\u5c31\u662f\u4e0d\u597d\u770b= =\u3002\u7136\u540e\u540e\u9762\u7ee7\u7eed\u5b8c\u5584\u3002\u5c0f\u672c\u672c\u8bb0\u4e0b\u6765\u3002","title":"django\u5f00\u53d1\u5b9e\u6218"},{"location":"django/#ps","text":"\u8fd9\u91cc\u7528\u7684\u662fpython3.7\u548cDjango2.0.\u5047\u8bbe\u5168\u90fd\u5b89\u88c5\u6210\u529f= = \u7136\u540e\u8fd9\u4e2a\u662f\u6211\u505a\u4e2a\u4eba\u7f51\u7ad9\u7684\u4e00\u4e2a\u8fc7\u7a0b=\u3002= \u7136\u540e\u8fd9\u4e2a\u4e5f\u4e0d\u80fd\u7b97\u662f\u4e2a\u6559\u7a0b\u5427=\u3002= \u7136\u540e\u8fd9\u53ea\u662f\u7c97\u7cd9\u7684\u8bb0\u5f55=\u3002= \u6700\u540e\uff0c\u9632\u8131\u53d1\u7528\u9738\u738b=3=","title":"p\u4e2a\u5927s\uff1a"},{"location":"django/#django","text":"\u521b\u5efaDjango\u9879\u76ee django-admin.py startproject MySite \u6b64\u65f6\uff0c\u4f60\u4f1a\u770b\u5230\u8fd9\u6837\u7684\u6587\u4ef6\u5939\uff1a \u8fd0\u884c\u4e00\u4e0b\u4f60\u7684\u9879\u76ee\uff0c\u770b\u770b\u6709\u6ca1\u6709\u6210\u529f \uff1a ./manage.py runserver \u7ec8\u7aef\u4f1a\u663e\u793a\u8fd9\u4e9b\uff1a \u6709\u7ea2\u5b57\u4e5f\u4e0d\u8981\u62c5\u5fc3\uff0c\u56e0\u4e3a\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u5462\uff01 \u63a5\u4e0b\u6765\u53bb http://127.0.0.1:8000/ \u770b\u4e00\u770b\uff1a \u6210\u529f\u4e86\uff01 ps\uff1a \u5982\u679c\u60f3\u8981\u5916\u90e8\u673a\u5668\uff08\u540c\u4e00\u7f51\u7edc\uff09\u8bbf\u95ee\u672c\u673a\u7684Django\u670d\u52a1\u7684\u8bdd\uff0c\u8981\u5199\u6210 ./manage.py runserver 0.0.0.0:9999 ,\u5e76\u5c06 setting.py \u4e2d\u7684 ALLOWED_HOSTS \u6539\u4e3a ALLOWED_HOSTS = ['*', ] \uff0c\u4e00\u5b9a\u8981\u52a0 \u9017\u53f7 \uff01 - \u6539\u4e00\u4e9b\u914d\u7f6e ps \uff1a\u8fd9\u91cc\u7684\u987a\u5e8f\u53ef\u80fd\u4e0d\u5bf9\u3002= = 1. \u66f4\u6539 /MySite/MySite/settings.py \u4e2d\u7684\u5185\u5bb9 Django\u9ed8\u8ba4\u7684 DATABASES \u662f sqlite \uff0c\u662f\u8fd9\u6837\u7684\uff1a \u8fd9\u91cc\u6211\u662f\u7528\u7684\u662f MySQL \u6570\u636e\u5e93\uff0c\u56e0\u6b64\uff0c\u6211\u8981\u6539\u6210\u8fd9\u6837\uff1a ```python DATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', 'NAME': 'MySite', 'USER': 'xxx', 'PASSWORD': 'xxxxx', 'HOST': '127.0.0.1', 'PORT': '3306' } } ``` \u8fd9\u91cc\u4e00\u5b9a\u8981\u786e\u4fdd\u6570\u636e\u5e93\u5df2\u7ecf\u5b58\u5728\u4e86\u3002 \u5728\u8fd9\u4e4b\u524d\uff0c\u9700\u8981\u521b\u5efa\u6570\u636e\u5e93\uff0c\u50cf\u8fd9\u6837\u6ef4\uff1a create database MySite CHARACTER SET utf8 COLLATE utf8_general_ci; \u8fd8\u8981\u66f4\u6539 \u65f6\u533a \u548c \u8bed\u8a00 \u5411 /MySite/MySite/__init__.py \u4e2d\u6dfb\u52a0\u5185\u5bb9 python import pymysql pymysql.install_as_MySQLdb() \u6570\u636e\u5e93\u8fc1\u79fb \u9996\u5148\uff0c\u6267\u884c ./manage.py makemigrations \u7136\u540e\uff0c\u6267\u884c ./manage.py migrate \u8fd9\u6837\u5c31\u6210\u529f\u5566\uff5e \u521b\u5efa\u8d85\u7ea7\u7528\u6237 \u521b\u5efa\u8d85\u7ea7\u7528\u6237\u662f\u7528\u6765\u767b\u9646\u5230admin\u540e\u53f0\u7ba1\u7406\u4e2d\u7684 \u6267\u884c ./manage.py createsuperuser \u7136\u540e\u6309\u7167\u63d0\u793a\u586b\u5199\u5c31\u597d\u5566\uff5e ps\uff1a \u4e00\u5b9a\u8981\u5148\u8fdb\u884c\u6570\u636e\u5e93\u8fc1\u79fb\uff0c\u518d\u521b\u5efa\u7528\u6237\u3002\u5426\u5219\uff0c\u4f1a\u51fa\u73b0 \u8fdb\u5165admin\u770b\u770b \u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 http://127.0.0.1:8000/admin \uff0c\u4f1a\u51fa\u73b0\u767b\u5f55\u9875\u9762\uff0c\u6b64\u65f6\u4f1a\u53d1\u73b0\u5168\u90fd\u53d8\u6210\u4e2d\u6587\u4e86\uff0c\u8bf4\u660e\u4e4b\u524d\u7684\u8bbe\u7f6e\u751f\u6548\u4e86\u3002 \u63a5\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u7528\u521a\u521a\u521b\u5efa\u7684\u7528\u6237\u767b\u9646\u4e86\uff0c\u67e5\u770b\u540e\u53f0\u6570\u636e\u4e86\uff01","title":"\u751f\u6210\u4e00\u4e2a\u5b8c\u6574\u7684django\u9879\u76ee"},{"location":"django/#_1","text":"\u521b\u5efaapp \u6267\u884c ./manage.py startapp Post ,\u67e5\u770b\u9879\u76ee\u7ed3\u6784\uff0c\u5982\u4e0b\uff1a \u5b8c\u6210\u4e0a\u6b65\u64cd\u4f5c\u540e\uff0c\u9700\u8981\u5728 /MySite/MySite/settings.py \u4e2d\u5c06app\u6dfb\u52a0\u8fdb\u53bb\uff1a \u63a5\u4e0b\u6765\uff0c\u9700\u8981\u5728app\u6587\u4ef6\u5939\u4e0b\u6dfb\u52a0 urls.py \uff0c\u7528\u4e8e\u8def\u7531\u6620\u5c04\uff1a \u5728 urls.py \u4e2d\u8fd9\u6837\u5199\uff1a app_name = 'Post' # \u8fd9\u91cc\u662f\u4e3a\u4e86url\u53cd\u5411\u89e3\u6790\u7528 urlpatterns = [ # \u8fd9\u91cc\u653e\u6620\u5c04\u7684view ] \u540c\u65f6\uff0c\u5728 /MySite/MySite/urls.py \u4e2d\u9700\u8981\u6dfb\u52a0\u5bf9 Post.urls \u7684\u6620\u5c04\uff1a from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path(r'', include('Post.urls')), ] \u521b\u5efa\u6a21\u578b \u5728app\u4e0b\u7684 models.py \u521b\u5efa\u81ea\u5df1\u7684\u6a21\u578b\u5c31\u53ef\u4ee5\u5566~ from django.db import models class Category(models.Model): \"\"\"\u5206\u7c7b\"\"\" name = models.CharField(max_length=100) class Tag(models.Model): \"\"\"\u6807\u7b7e\"\"\" name = models.CharField(max_length=100) class Post(models.Model): \"\"\"\u6587\u7ae0\"\"\" title = models.CharField(max_length=100) body = models.TextField() created_time = models.DateTimeField() modified_time = models.DateTimeField() excerpt = models.CharField(max_length=200, blank=True) # \u6587\u7ae0\u6458\u8981\uff0c\u53ef\u4e3a\u7a7a category = models.ForeignKey(Category, on_delete=True) # ForeignKey\u8868\u793a1\u5bf9\u591a\uff08\u591a\u4e2apost\u5bf9\u5e941\u4e2acategory\uff09 tags = models.ManyToManyField(Tag, blank=True) views = models.PositiveIntegerField(default=0) # \u9605\u8bfb\u91cf \u7136\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u518d\u8fdb\u884c \u6570\u636e\u5e93\u8fc1\u79fb \u554a\uff01\uff01 \u524d\u7aef\u6a21\u7248 \u8fd9\u91cc\u7684\u524d\u7aef\u6a21\u677f\u4f7f\u7528\u7684\u662f\u6a21\u677f\u4e4b\u5bb6\u7684 \u94fe\u63a5\ud83d\udd17\uff1ahttp://www.cssmoban.com/tags.asp?n=html5 \u9996\u5148\u521b\u5efatemplates\u76ee\u5f55\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a \u6b64\u65f6\uff0c\u9700\u8981\u5728 setting.py \u4e2d\u6dfb\u52a0\u5173\u4e8e\u6a21\u677f\u7684\u914d\u7f6e\uff1a \u63a5\u4e0b\u6765\u662fstatic\u76ee\u5f55\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a \u663e\u800c\u6613\u89c1\uff0c\u8fd9\u91cc\u653e\u7684\u662f\u4e00\u4e9bcss\u3001js\u6587\u4ef6\u7b49 index\u89c6\u56fe \u9996\u5148\uff0c\u5728 Post/views.py \u4e2d\u5b9e\u73b0 index \u65b9\u6cd5\uff1a def index(request): \"\"\" \u4e3b\u9875 :param request: :return: \"\"\" return render(request=request, template_name='Post/index.html') request \u4e3a\u8bf7\u6c42\u5bf9\u8c61; template_name \u4e3a\u6e32\u67d3\u7684\u524d\u7aef\u9875\u9762\u7684\u8def\u5f84\u5b57\u7b26\u4e32\uff08\u76f8\u5bf9templates\u76ee\u5f55\uff09 \u7136\u540e\uff0c\u5728 Post/urls.py \u4e2d\u8fdb\u884c\u8def\u7531\u6620\u5c04\uff1a urlpatterns = [ url(r'^$', views.index, name=\"index\"), ] \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u4e3b\u9875\u7684url\u662f\u7a7a\uff0c\u6b63\u5219\u5fc5\u987b\u5199\u6210 ^$ \u6700\u540e\uff0c\u4e00\u5b9a\u8981\u8981\u4fee\u6539\u9759\u6001\u9875\u9762\u4e2d\u5f15\u7528\u7684\u8def\u5f84\u3002 \u5bf9\u4e8eDjango\u6765\u8bf4\uff0c\u53ef\u4ee5\u4f7f\u7528 static \u6807\u7b7e\u3002 \u5728\u9875\u9762\u5f00\u5934\u5f15\u5165 {% load static %} \uff0c\u8fd9\u4e2a\u5bf9\u5e94\u7684\u914d\u7f6e\u4fe1\u606f\u662f \u5e76\u5c06\u9875\u9762\u4e2d\u7684\u8def\u5f84\u6539\u4e3a ps\uff1a \u5bf9\u4e8ecss\u6216\u8005js\u4e2d\u7684\u5f15\u7528\u4e5f\u4e0d\u8981\u5fd8\u4e86\u6539\uff01 \u8fd0\u884c\u4e00\u4e0b\u3002 \u641e\u5b9a\uff01 \u5411\u524d\u7aef\u6e32\u67d3\u53ca\u5206\u9875 \u9996\u5148\uff0c\u66f4\u6539 index() from django.shortcuts import render from django.core.paginator import Paginator from .models import Post def index(request): \"\"\" \u4e3b\u9875 :param request: :return: \"\"\" post = Post.objects.all() limit = 3 paginator = Paginator(post, limit) page = request.GET.get('page', 1) result = paginator.page(page) context = { \"post_list\": result, \"page\": page } return render(request=request, template_name='Post/index.html', context=context) \u7136\u540e\u4fee\u6539 index.html \u8fd0\u884c\u770b\u4e00\u4e0b \u641e\u5b9a\uff01 \u66f4\u6539index.html\u4e2d\u7684\u6240\u6709\u8df3\u8f6c\u94fe\u63a5 \u5728\u8fd9\u91cc\uff0c\u6211\u7528\u7684\u662furl\u7684\u53cd\u5411\u89e3\u6790\u3002\u8fd9\u6837\u53ef\u4ee5\u51cf\u8f7b\u540e\u671f\u7ef4\u62a4\u6210\u672c\u3002\u56e0\u6b64\uff0c\u5c31\u9700\u8981\u5728urls.py\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4fe1\u606f\uff1a \u5728html\u4e2d\u4fee\u6539\u6210\u5982\u4e0b\uff1a \u535a\u5ba2\u6587\u7ae0\u9875\u9762 \u522b\u5fd8\u4e86\u6539\u8df3\u8f6c\u94fe\u63a5\uff01\uff01\uff01\uff01 \u6587\u7ae0\u8be6\u60c5\u9875\u548c\u4e3b\u9875\u5927\u4f53\u7ed3\u6784\u662f\u76f8\u4f3c\u7684\uff0c\u56e0\u6b64\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u6a21\u7248\u7ee7\u627f\u3002 \u5728\u57fa\u7c7b\u6a21\u7248\u91cc\uff0c\u4f7f\u7528\u8fd9\u4e2a\uff0c\u5c06\u5b50\u7c7b\u6a21\u7248\u9700\u8981\u586b\u5145\u7684\u4f4d\u7f6e\u5360\u4f4d \u7136\u540e\u5728\u5b50\u7c7b\u6a21\u677f\u4e2d\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u6807\u7b7e\u5c06\u586b\u5145\u7684\u5185\u5bb9\u8fdb\u884c\u5305\u88f9 \u6700\u540e\uff0c\u4e0d\u8981\u5fd8\u4e86\u5728\u5b50\u7c7b\u6a21\u677f\u4e2d\u518d\u5199\u4e0a {% extends 'Post/base.html' %} \u548c {% load static %} \u5728 Post/urls.py \u4e2d\u6dfb\u52a0\u8be6\u60c5\u9875\u7684url\uff1a url(r'^detail/post-(?P<pk>\\d+)$', views.detail, name=\"detail\"), \u5e76\u6dfb\u52a0detail\u89c6\u56fe def detail(request, pk): \"\"\" :param request: :param pk: \u63a5\u6536\u5230\u7684\u6587\u7ae0\u7684\u4e3b\u952eid :return: \"\"\" return render(request, template_name='Post/blog.html', ) \u8fd0\u884c\u770b\u4e00\u4e0b\u5427\uff01 \u641e\u5b9a\uff01 \u7ee7\u7eed\u5728\u89c6\u56fe\u4e2d\u6dfb\u52a0\u5185\u5bb9\uff0c\u5c06\u5047\u6570\u636e\u6539\u4e3a\u771f\u5b9e\u7684\u6587\u7ae0\u6570\u636e \u5bf9\u4e8e\u591a\u5bf9\u591a\u7684\u5173\u7cfb\u6765\u8bf4\uff0c\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\uff1a \u770b\u4e00\u770b\u6548\u679c\u5427\uff01 \u63a5\u4e0b\u6765\u5c31\u662f\u8ba9\u6211\u53ef\u4ee5\u4e0a\u4f20markdown\u683c\u5f0f\u7684\u6587\u672c\u4e86\uff01 \u8fd9\u4e2a\u6682\u65f6\u5148\u4e0d\u89e3\u51b3\u4e86= =\uff0c\u5c0f\u672c\u672c\u8bb0\u4e0b\u6765 \u6dfb\u52a0\u5206\u7c7b\u680f \u8fd9\u91cc\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u7248\u6807\u7b7e\uff01 \u9996\u5148\uff0c\u5728app\u6587\u4ef6\u5939\u4e0b\uff0c\u521b\u5efa templatetags \u6587\u4ef6\u5939\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2apy\u6587\u4ef6\uff0c\u91cc\u9762\u5b9a\u4e49\u6a21\u7248\u6807\u7b7e\uff0c\u76ee\u5f55\u662f\u8fd9\u6837\u6ef4\uff1a \u7136\u540e\u5b9a\u4e49\u4e00\u4e2a\u5206\u7c7b\u76ee\u5f55\u7684\u6807\u7b7e\uff1a from django import template from ..models import Category register = template.Library() @register.simple_tag def get_categories(): \"\"\" \u5206\u7c7b\u76ee\u5f55\u6807\u7b7e :return: \"\"\" return Category.objects.all() \u5728\u524d\u7aef\u5f15\u7528\u81ea\u5b9a\u4e49\u6807\u7b7e\u65f6\uff0c\u4e00\u5b9a\u8981\u5f00\u5934\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u6a21\u7248\u6807\u7b7e\u6240\u5728\u7684py\u6587\u4ef6\uff0c {% load simple_tags %} ,\u7136\u540e\u518d\u4f7f\u7528\uff1a {% get_categories as category_list %} {% for category in category_list %} <li><a href=\"#\">{{ category.name }}</a></li> {% endfor %} \u770b\u4e00\u4e0b\u6548\u679c\u5427\uff01 \u641e\u5b9a\uff01 \u8bc4\u8bba\u529f\u80fd \u8bc4\u8bba\u529f\u80fd\u65b0\u5efa\u4e00\u4e2aapp ./manage.py startapp comment \u4e0d\u8981\u5fd8\u4e86\u628a\u5b83\u6ce8\u518c\u5230django\u4e2d \u521b\u5efa\u6a21\u578b\uff1a from django.db import models class Comment(models.Model): name = models.CharField(max_length=20) email = models.EmailField(max_length=50) website = models.URLField(blank=True) text = models.TextField() created_time = models.DateTimeField(auto_now_add=True) post = models.ForeignKey('Post.Post', on_delete=True) # \u4e00\u7bc7\u6587\u7ae0\u6709\u591a\u4e2a\u8bc4\u8bba \u4e0d\u8981\u5fd8\u4e86\u6ce8\u518c\u5230admin\u4e2d\u554a\uff01 admin.site.register(Comment) \u6700\u91cd\u8981\u7684\u4e00\u6b65\u3002\u6570\u636e\u5e93\u8fc1\u79fb\u554a\uff01\uff01\uff01 \u8fd9\u91cc\u8981\u5b9e\u73b0\u7684\u662f\u70b9\u51fbsubmit\u6309\u94ae\uff0c\u4f1a\u63d0\u4ea4\u8bc4\u8bba \u5728 comment/views.py \u4e2d\u6dfb\u52a0\u89c6\u56fe\uff1a from django.shortcuts import render, redirect from .models import Comment from Post.models import Post from django.urls import reverse def submit_comment(request, pk): \"\"\" \u5904\u7406\u63d0\u4ea4\u7684\u8bc4\u8bba :param request: :return: \"\"\" post = request.POST comment = Comment() comment.name = post.get(\"name\") comment.email = post.get('email') comment.website = post.get('website') comment.text = post.get('message') comment.post = Post.objects.get(id=pk) comment.save() return redirect(reverse('Post:detail', kwargs={\"pk\": pk})) \u66f4\u6539\u524d\u7aef\u9875\u9762\u4e2d\u7684\u8bc4\u8bba\u90e8\u5206\uff1a \u5728 comment/urls.py \u4e2d\u6dfb\u52a0\u6620\u5c04\uff1a \u8bd5\u4e00\u4e0b\u5427\uff01 \u641e\u5b9a\uff01 \u540e\u9762\u518d\u5b8c\u5584\u4e00\u4e0b\u3002\u641e\u6210\u53ef\u4ee5\u56de\u590d\u7684\u5575\uff01\u5c0f\u672c\u672c\u8bb0\u4e0b\u6765\uff5e \u6700\u65b0\u8bc4\u8bba \u8fd9\u4e2a\u4e5f\u5199\u6210\u81ea\u5b9a\u4e49\u6807\u7b7e\u5575\u3002 @register.simple_tag def get_latest_comment(): \"\"\" \u83b7\u53d6\u6700\u65b0\u8bc4\u8bba :return: \"\"\" comment_list = Comment.objects.all()[:5].only('post', 'text') # \u53ea\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5 return comment_list truncatechars \u53ef\u4ee5\u622a\u53d6\u5b57\u7b26\u4e32\uff0c\u7528\u6cd5\uff1a {{ comment.text | truncatechars:10 }} \u770b\u4e00\u4e0b\u6548\u679c \u641e\u5b9a\uff01 \u9605\u8bfb\u91cf \u5728 Post/models.py \u4e2d\u6dfb\u52a0\uff1a \u5728 Post/views.py \u4e2d\u6dfb\u52a0\uff1a \u5728\u524d\u7aef\u9875\u9762\u6dfb\u52a0\uff1a \u641e\u5b9a\uff01 \u597d\u5566\uff5e\u5230\u8fd9\u91cc\u535a\u5ba2\u57fa\u672c\u6210\u578b\u4e86\u3002\u5c31\u662f\u4e0d\u597d\u770b= =\u3002\u7136\u540e\u540e\u9762\u7ee7\u7eed\u5b8c\u5584\u3002\u5c0f\u672c\u672c\u8bb0\u4e0b\u6765\u3002","title":"\u9879\u76ee\u6b63\u5f0f\u5f00\u59cb"},{"location":"django_rest_framework/djang_rest_framework/","text":"\u6ce8\u610f\uff1a \u8be5\u7b14\u8bb0\u4e3b\u8981\u7ffb\u8bd1\u81ea \u5b98\u65b9\u6587\u6863 \u5165\u95e8 \u9996\u5148\uff0c\u521b\u5efa\u65b0\u9879\u76ee django-admin.py startproject tutorial cd tutorial \u5b8c\u6210\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6211\u4eec\u5c06\u7528\u4e8e\u521b\u5efa\u7b80\u5355Web API\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 ./manage.py startapp snippets \u6211\u4eec\u9700\u8981\u6dfb\u52a0\u6211\u4eec\u7684\u65b0 snippets \u5e94\u7528\u548c rest_framework \u5e94\u7528 INSTALLED_APPS \u3002\u8ba9\u6211\u4eec\u7f16\u8f91 tutorial/settings.py \u6587\u4ef6 INSTALLED_APPS = ( ... 'rest_framework', 'snippets.apps.SnippetsConfig', ) \u597d\u7684\uff0c\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u3002 \u521b\u5efa\u4e00\u4e2a\u6a21\u578b \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a Snippet \u7528\u4e8e\u5b58\u50a8\u4ee3\u7801\u7247\u6bb5\u7684\u7b80\u5355model\u3002\u7ee7\u7eed\u7f16\u8f91 snippets/models.py \u6587\u4ef6 from django.db import models from pygments.lexers import get_all_lexers from pygments.styles import get_all_styles LEXERS = [item for item in get_all_lexers() if item[1]] LANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS]) STYLE_CHOICES = sorted((item, item) for item in get_all_styles()) class Snippet(models.Model): created = models.DateTimeField(auto_now_add=True) title = models.CharField(max_length=100, blank=True, default='') code = models.TextField() linenos = models.BooleanField(default=False) language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100) style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100) class Meta: ordering = ('created',) \u6211\u4eec\u8fd8\u9700\u8981\u4e3a\u6211\u4eec\u7684\u4ee3\u7801\u6bb5\u6a21\u578b\u521b\u5efa\u521d\u59cb\u8fc1\u79fb\uff0c\u5e76\u9996\u6b21\u540c\u6b65\u6570\u636e\u5e93\u3002(\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u9ed8\u8ba4\u7684sqlite) ./manage.py makemigrations snippets ./manage.py migrate \u521b\u5efa\u4e00\u4e2aSerializer\u7c7b \u6211\u4eec\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u63d0\u4f9b\u4e00\u4e2a\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316 snippet \u5b9e\u4f8b\u7684\u65b9\u6cd5\uff0c\u5e76\u628a\u5b83\u653e\u5230\u4f8b\u5982 json \u4e2d\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u4e0eDjango\u8868\u5355\u975e\u5e38\u76f8\u4f3c\u7684\u5e8f\u5217\u5316\u5668\u6765\u5b8c\u6210\u6b64\u64cd\u4f5c\u3002\u5728 snippets \u540d\u4e3a\u7684\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6 serializers.py \u5e76\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002 from rest_framework import serializers from snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES class SnippetSerializer(serializers.Serializer): id = serializers.IntegerField(read_only=True) title = serializers.CharField(required=False, allow_blank=True, max_length=100) code = serializers.CharField(style={'base_template': 'textarea.html'}) linenos = serializers.BooleanField(required=False) language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python') style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly') def create(self, validated_data): \"\"\" Create and return a new `Snippet` instance, given the validated data. \"\"\" return Snippet.objects.create(**validated_data) def update(self, instance, validated_data): \"\"\" Update and return an existing `Snippet` instance, given the validated data. \"\"\" instance.title = validated_data.get('title', instance.title) instance.code = validated_data.get('code', instance.code) instance.linenos = validated_data.get('linenos', instance.linenos) instance.language = validated_data.get('language', instance.language) instance.style = validated_data.get('style', instance.style) instance.save() return instance serializer\u7c7b\u5b9a\u4e49\u4e86\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u3002 create() \u548c update() \u65b9\u6cd5\u5b9a\u4e49\u4e86\u5728\u8c03\u7528 serializer.save() \u65f6\u5b9e\u4f8b\u5982\u4f55\u88ab\u521b\u5efa\u6216\u4fee\u6539 serializer\u7c7b\u548cdjango Form \u7c7b\u5f88\u76f8\u4f3c\uff0c\u5e76\u4e14\u5728\u5404\u4e2a\u5b57\u6bb5\u4e0a\u5305\u542b\u7c7b\u4f3c\u7684\u9a8c\u8bc1\u6807\u5fd7\uff0c\u4f8b\u5982 required , max_length \u548c default \u3002 \u5b57\u6bb5\u6807\u5fd7\u8fd8\u53ef\u4ee5\u63a7\u5236\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5e94\u8be5\u5982\u4f55\u663e\u793a\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u4f8b\u5982\u5728\u6e32\u67d3HTML\u65f6\u3002 {'base_template': 'textarea.html'} \u76f8\u5f53\u4e8e\u5728django Form \u7c7b\u4e2d\u4f7f\u7528 widget=widgets.Textarea \u3002\u8fd9\u5bf9\u4e8e\u63a7\u5236\u53ef\u6d4f\u89c8API\u7684\u663e\u793a\u65b9\u5f0f\u7279\u522b\u6709\u7528\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u540e\u9762\u770b\u5230\u3002 \u6211\u4eec\u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ModelSerializer \u7c7b\u6765\u8282\u7701\u4e00\u4e9b\u65f6\u95f4\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230\uff0c\u4f46\u662f\u73b0\u5728\u6211\u4eec\u5148\u4fdd\u6301\u6211\u4eec\u5b9a\u4e49\u7684serializer \u4f7f\u7528Serializers \u5728\u8fdb\u4e00\u6b65\u6df1\u5165\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u719f\u6089\u5982\u4f55\u4f7f\u7528\u65b0\u7684Serializer\u7c7b\u3002\u8ba9\u6211\u4eec\u8fdb\u5165Django shell\u3002 python manage.py shell \u597d\u7684\uff0c\u4e00\u65e6\u6211\u4eec\u5b8c\u6210\u4e86\u4e00\u4e9b\u5bfc\u5165\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u51e0\u4e2a\u4ee3\u7801\u7247\u6bb5\u6765\u5904\u7406\u3002 from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser snippet = Snippet(code='foo = \"bar\"\\n') snippet.save() snippet = Snippet(code='print \"hello, world\"\\n') snippet.save() \u6211\u4eec\u73b0\u5728\u6709\u51e0\u4e2asnippet\u5b9e\u4f8b\u53ef\u4f9b\u4f7f\u7528\u3002\u6211\u4eec\u6765\u770b\u770b\u5e8f\u5217\u5316\u5176\u4e2d\u4e00\u4e2a\u5b9e\u4f8b\u3002 serializer = SnippetSerializer(snippet) serializer.data # {'id': 2, 'title': u'', 'code': u'print \"hello, world\"\\n', 'linenos': False, 'language': u'python', 'style': u'friendly'} \u6b64\u65f6\u6211\u4eec\u5df2\u5c06model\u5b9e\u4f8b\u8f6c\u6362\u4e3aPython\u81ea\u7136\u6570\u636e\u7c7b\u578b\u3002\u4e3a\u4e86\u5b8c\u6210\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u6570\u636e\u6e32\u67d3\u5230 json \u3002 content = JSONRenderer().render(serializer.data) content # '{\"id\": 2, \"title\": \"\", \"code\": \"print \\\\\"hello, world\\\\\"\\\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\"}' \u53cd\u5e8f\u5217\u5316\u662f\u7c7b\u4f3c\u7684\u3002\u9996\u5148\uff0c\u6211\u4eec\u5c06\u6d41\u89e3\u6790\u4e3aPython\u6570\u636e\u7c7b\u578b\u2026 from django.utils.six import BytesIO stream = BytesIO(content) data = JSONParser().parse(stream) \u2026\u7136\u540e\u6211\u4eec\u5c06\u89e3\u6790\u540e\u7684\u6570\u636e\u7c7b\u578b\u8fd8\u539f\u4e3a\u5b8c\u5168\u586b\u5145\u7684\u5bf9\u8c61\u5b9e\u4f8b\u3002 serializer = SnippetSerializer(data=data) serializer.is_valid() # True serializer.validated_data # OrderedDict([('title', ''), ('code', 'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]) serializer.save() # <Snippet: Snippet object> \u8bf7\u6ce8\u610fAPI\u4e0e\u8868\u5355\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002\u5f53\u6211\u4eec\u5f00\u59cb\u7f16\u5199\u4f7f\u7528\u5e8f\u5217\u5316\u5668\u7684\u89c6\u56fe\u65f6\uff0c\u76f8\u4f3c\u6027\u5e94\u8be5\u53d8\u5f97\u66f4\u52a0\u660e\u663e\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u5e8f\u5217\u5316querysets\u800c\u4e0d\u662fmodel\u5b9e\u4f8b\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u5728\u5e8f\u5217\u5316\u7c7b\u4e2d\u6dfb\u52a0\u53c2\u6570 many=True serializer = SnippetSerializer(Snippet.objects.all(), many=True) serializer.data # [OrderedDict([('id', 1), ('title', u''), ('code', u'foo = \"bar\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', u''), ('code', u'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', u''), ('code', u'print \"hello, world\"'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])] \u4f7f\u7528ModelSerializers SnippetSerializer \u7c7b\u590d\u5236\u4e86\u5f88\u591a\u4fe1\u606f\uff0c\u8fd9\u4e9b\u90fd\u5305\u542b\u5728 Snippet \u6a21\u578b\u4e2d\u3002\u5982\u679c\u6211\u4eec\u80fd\u591f\u4f7f\u4ee3\u7801\u66f4\u7b80\u6d01\uff0c\u90a3\u5c06\u662f\u5f88\u597d\u7684\u3002 \u4e0eDjango\u63d0\u4f9b Form \u7c7b\u548c ModelForm \u7c7b\u7684\u65b9\u5f0f\u76f8\u540c\uff0cREST\u6846\u67b6\u5305\u62ec Serializer \u7c7b\u548c ModelSerializer \u7c7b\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u4f7f\u7528 ModelSerializer \u7c7b\u91cd\u6784\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u3002\u518d\u6b21\u6253\u5f00 snippets/serializers.py \u6587\u4ef6\uff0c\u5e76\u4f7f\u7528\u4ee5\u4e0b\u5185\u5bb9\u66ff\u6362 SnippetSerializer \u7c7b\u3002 class SnippetSerializer(serializers.ModelSerializer): class Meta: model = Snippet fields = ('id', 'title', 'code', 'linenos', 'language', 'style') \u5e8f\u5217\u5316\u7a0b\u5e8f\u5177\u6709\u7684\u4e00\u4e2a\u4e0d\u9519\u7684\u5c5e\u6027\u662f\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6253\u5370\u5176\u5bf9\u8c61\u6765\u68c0\u67e5\u5e8f\u5217\u5316\u7a0b\u5e8f\u5b9e\u4f8b\u4e2d\u7684\u6240\u6709\u5b57\u6bb5\u3002\u6253\u5f00Django shell python manage.py shell \uff0c\u7136\u540e\u5c1d\u8bd5\u4ee5\u4e0b\u64cd\u4f5c\uff1a from snippets.serializers import SnippetSerializer serializer = SnippetSerializer() print(repr(serializer)) # SnippetSerializer(): # id = IntegerField(label='ID', read_only=True) # title = CharField(allow_blank=True, max_length=100, required=False) # code = CharField(style={'base_template': 'textarea.html'}) # linenos = BooleanField(required=False) # language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')... # style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')... \u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f ModelSerializer \u7c7b\u6ca1\u6709\u505a\u4efb\u4f55\u7279\u522b\u795e\u5947\u7684\u4e8b\u60c5\uff0c\u5b83\u4eec\u53ea\u662f\u521b\u5efa\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\u7684\u5feb\u6377\u65b9\u5f0f\uff1a \u81ea\u52a8\u786e\u5b9a\u5b57\u6bb5\u96c6\u3002 create() \u548c update() \u65b9\u6cd5\u7684\u7b80\u5355\u9ed8\u8ba4\u5b9e\u73b0\u3002 \u4f7f\u7528\u6211\u4eec\u7684Serializer\u7f16\u5199\u5e38\u89c4Django\u89c6\u56fe \u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u6211\u4eec\u7684\u65b0Serializer\u7c7b\u7f16\u5199\u4e00\u4e9bAPI\u89c6\u56fe\u3002\u76ee\u524d\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u4efb\u4f55REST\u6846\u67b6\u7684\u5176\u4ed6\u529f\u80fd\uff0c\u6211\u4eec\u53ea\u4f1a\u5c06\u89c6\u56fe\u5199\u4e3a\u5e38\u89c4Django\u89c6\u56fe\u3002 \u7f16\u8f91 snippets/views.py \u6587\u4ef6\uff0c\u7136\u540e\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002 from django.http import HttpResponse, JsonResponse from django.views.decorators.csrf import csrf_exempt from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser from snippets.models import Snippet from snippets.serializers import SnippetSerializer \u6211\u4eecAPI\u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u652f\u6301\u5217\u51fa\u6240\u6709\u5b58\u5728\u7684snippets\uff0c\u6216\u521b\u5efa\u4e00\u4e2a\u65b0snippets\u7684\u89c6\u56fe @csrf_exempt def snippet_list(request): \"\"\" List all code snippets, or create a new snippet. \"\"\" if request.method == 'GET': snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return JsonResponse(serializer.data, safe=False) elif request.method == 'POST': data = JSONParser().parse(request) serializer = SnippetSerializer(data=data) if serializer.is_valid(): serializer.save() return JsonResponse(serializer.data, status=201) return JsonResponse(serializer.errors, status=400) \u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4ece\u6ca1\u6709CSRF\u4ee4\u724c\u7684\u5ba2\u6237\u7aefPOST\u5230\u6b64\u89c6\u56fe\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06\u89c6\u56fe\u6807\u8bb0\u4e3a csrf_exempt \u3002\u8fd9\u4e0d\u662f\u60a8\u901a\u5e38\u60f3\u8981\u505a\u7684\u4e8b\u60c5\uff0cREST\u6846\u67b6\u89c6\u56fe\u5b9e\u9645\u4e0a\u4f7f\u7528\u7684\u884c\u4e3a\u6bd4\u8fd9\u66f4\u660e\u667a\uff0c\u4f46\u5b83\u73b0\u5728\u53ef\u4ee5\u7528\u4e8e\u6211\u4eec\u7684\u76ee\u7684 \u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u4e0e\u5355\u4e2asnippet\u76f8\u5bf9\u5e94\u7684\u89c6\u56fe\uff0c\u5e76\u53ef\u7528\u4e8e\u68c0\u7d22\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4ee3\u7801\u6bb5\u3002 @csrf_exempt def snippet_detail(request, pk): \"\"\" Retrieve, update or delete a code snippet. \"\"\" try: snippet = Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: return HttpResponse(status=404) if request.method == 'GET': serializer = SnippetSerializer(snippet) return JsonResponse(serializer.data) elif request.method == 'PUT': data = JSONParser().parse(request) serializer = SnippetSerializer(snippet, data=data) if serializer.is_valid(): serializer.save() return JsonResponse(serializer.data) return JsonResponse(serializer.errors, status=400) elif request.method == 'DELETE': snippet.delete() return HttpResponse(status=204) \u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u94fe\u63a5\u8fd9\u4e9b\u89c6\u56fe\u3002\u521b\u5efa snippets/urls.py \u6587\u4ef6\uff1a from django.conf.urls import url from snippets import views urlpatterns = [ url(r'^snippets/$', views.snippet_list), url(r'^snippets/(?P<pk>[0-9]+)/$', views.snippet_detail), ] \u6211\u4eec\u8fd8\u9700\u8981\u94fe\u63a5tutorial/urls.py\u6587\u4ef6\u4e2d\u7684\u6839urlconf \uff0c\u4ee5\u5305\u542b\u6211\u4eec\u7684snippet\u5e94\u7528\u7684URL\u3002 from django.conf.urls import url, include urlpatterns = [ url(r'^', include('snippets.urls')), ] \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u76ee\u524d\u8fd8\u6709\u4e00\u4e9b\u6211\u4eec\u6ca1\u6709\u6b63\u786e\u5904\u7406\u7684\u8fb9\u7f18\u60c5\u51b5\u3002\u5982\u679c\u6211\u4eec\u53d1\u9001\u9519\u8bef\u7684json\uff0c\u6216\u8005\u5982\u679c\u4f7f\u7528\u89c6\u56fe\u65e0\u6cd5\u5904\u7406\u7684\u65b9\u6cd5\u53d1\u51fa\u8bf7\u6c42\uff0c\u90a3\u4e48\u6211\u4eec\u6700\u7ec8\u5c06\u5f97\u5230500\u201c\u670d\u52a1\u5668\u9519\u8bef\u201d\u54cd\u5e94\u3002\u4e0d\u8fc7\uff0c\u73b0\u5728\u8fd9\u6837\u505a\u3002 \u6d4b\u8bd5\u6211\u4eec\u5bf9Web API\u7684\u7b2c\u4e00\u6b21\u5c1d\u8bd5 \u73b0\u5728\u6211\u4eec\u542f\u52a8\u670d\u52a1\u5668 \u9000\u51fashell\u3002\u3002\u3002 quit() \u5e76\u542f\u52a8django\u670d\u52a1\u5668 ./manage.py runserver Validating models... 0 errors found Django version 1.11, using settings 'tutorial.settings' Development server is running at http://127.0.0.1:8000/ Quit the server with CONTROL-C. \u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u670d\u52a1\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 curl \u6216 httpie \u6d4b\u8bd5\u6211\u4eec\u7684API \u3002Httpie\u662f\u4e00\u4e2a\u7528Python\u7f16\u5199\u7684\u7528\u6237\u53cb\u597d\u7684http\u5ba2\u6237\u7aef\u3002\u6211\u4eec\u5b89\u88c5\u4e00\u4e0b\u5427\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528pip\u5b89\u88c5httpie\uff1a pip install httpie \u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u6240\u6709snippets\u7684\u5217\u8868\u4fe1\u606f http http://127.0.0.1:8000/snippets/ HTTP/1.1 200 OK ... [ { \"id\": 1, \"title\": \"\", \"code\": \"foo = \\\"bar\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" }, { \"id\": 2, \"title\": \"\", \"code\": \"print \\\"hello, world\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } ] \u6216\u8005\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u5176id\u6765\u83b7\u53d6\u7279\u5b9asnippet\uff1a http http://127.0.0.1:8000/snippets/2/ HTTP/1.1 200 OK ... { \"id\": 2, \"title\": \"\", \"code\": \"print \\\"hello, world\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } \u540c\u6837\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728Web\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\u8fd9\u4e9bURL\u6765\u663e\u793a\u76f8\u540c\u200b\u200b\u7684json\u3002 \u6211\u4eec\u73b0\u5728\u5728\u54ea \u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u505a\u5f97\u8fd8\u4e0d\u9519\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5e8f\u5217\u5316API\uff0c\u611f\u89c9\u975e\u5e38\u7c7b\u4f3c\u4e8eDjango\u7684Forms API\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5e38\u89c4\u7684Django\u89c6\u56fe\u3002 \u6211\u4eec\u7684API\u89c6\u56fe\u76ee\u524d\u6ca1\u6709\u505a\u4efb\u4f55\u7279\u522b\u7279\u522b\u7684\u4e8b\u60c5\uff0c\u9664\u4e86\u63d0\u4f9bjson\u54cd\u5e94\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u6211\u4eec\u4ecd\u60f3\u6e05\u7406\u7684\u9519\u8bef\u5904\u7406\u8fb9\u7f18\u60c5\u51b5\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u6b63\u5e38\u8fd0\u884c\u7684Web API\u3002 \u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u7684\u7b2c2\u90e8\u5206\u4e2d\u770b\u5230\u5982\u4f55\u5f00\u59cb\u6539\u8fdb\u3002","title":"Serialization"},{"location":"django_rest_framework/djang_rest_framework/#_1","text":"\u9996\u5148\uff0c\u521b\u5efa\u65b0\u9879\u76ee django-admin.py startproject tutorial cd tutorial \u5b8c\u6210\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6211\u4eec\u5c06\u7528\u4e8e\u521b\u5efa\u7b80\u5355Web API\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 ./manage.py startapp snippets \u6211\u4eec\u9700\u8981\u6dfb\u52a0\u6211\u4eec\u7684\u65b0 snippets \u5e94\u7528\u548c rest_framework \u5e94\u7528 INSTALLED_APPS \u3002\u8ba9\u6211\u4eec\u7f16\u8f91 tutorial/settings.py \u6587\u4ef6 INSTALLED_APPS = ( ... 'rest_framework', 'snippets.apps.SnippetsConfig', ) \u597d\u7684\uff0c\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u3002","title":"\u5165\u95e8"},{"location":"django_rest_framework/djang_rest_framework/#_2","text":"\u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a Snippet \u7528\u4e8e\u5b58\u50a8\u4ee3\u7801\u7247\u6bb5\u7684\u7b80\u5355model\u3002\u7ee7\u7eed\u7f16\u8f91 snippets/models.py \u6587\u4ef6 from django.db import models from pygments.lexers import get_all_lexers from pygments.styles import get_all_styles LEXERS = [item for item in get_all_lexers() if item[1]] LANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS]) STYLE_CHOICES = sorted((item, item) for item in get_all_styles()) class Snippet(models.Model): created = models.DateTimeField(auto_now_add=True) title = models.CharField(max_length=100, blank=True, default='') code = models.TextField() linenos = models.BooleanField(default=False) language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100) style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100) class Meta: ordering = ('created',) \u6211\u4eec\u8fd8\u9700\u8981\u4e3a\u6211\u4eec\u7684\u4ee3\u7801\u6bb5\u6a21\u578b\u521b\u5efa\u521d\u59cb\u8fc1\u79fb\uff0c\u5e76\u9996\u6b21\u540c\u6b65\u6570\u636e\u5e93\u3002(\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u9ed8\u8ba4\u7684sqlite) ./manage.py makemigrations snippets ./manage.py migrate","title":"\u521b\u5efa\u4e00\u4e2a\u6a21\u578b"},{"location":"django_rest_framework/djang_rest_framework/#serializer","text":"\u6211\u4eec\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u63d0\u4f9b\u4e00\u4e2a\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316 snippet \u5b9e\u4f8b\u7684\u65b9\u6cd5\uff0c\u5e76\u628a\u5b83\u653e\u5230\u4f8b\u5982 json \u4e2d\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u4e0eDjango\u8868\u5355\u975e\u5e38\u76f8\u4f3c\u7684\u5e8f\u5217\u5316\u5668\u6765\u5b8c\u6210\u6b64\u64cd\u4f5c\u3002\u5728 snippets \u540d\u4e3a\u7684\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6 serializers.py \u5e76\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002 from rest_framework import serializers from snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES class SnippetSerializer(serializers.Serializer): id = serializers.IntegerField(read_only=True) title = serializers.CharField(required=False, allow_blank=True, max_length=100) code = serializers.CharField(style={'base_template': 'textarea.html'}) linenos = serializers.BooleanField(required=False) language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python') style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly') def create(self, validated_data): \"\"\" Create and return a new `Snippet` instance, given the validated data. \"\"\" return Snippet.objects.create(**validated_data) def update(self, instance, validated_data): \"\"\" Update and return an existing `Snippet` instance, given the validated data. \"\"\" instance.title = validated_data.get('title', instance.title) instance.code = validated_data.get('code', instance.code) instance.linenos = validated_data.get('linenos', instance.linenos) instance.language = validated_data.get('language', instance.language) instance.style = validated_data.get('style', instance.style) instance.save() return instance serializer\u7c7b\u5b9a\u4e49\u4e86\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u3002 create() \u548c update() \u65b9\u6cd5\u5b9a\u4e49\u4e86\u5728\u8c03\u7528 serializer.save() \u65f6\u5b9e\u4f8b\u5982\u4f55\u88ab\u521b\u5efa\u6216\u4fee\u6539 serializer\u7c7b\u548cdjango Form \u7c7b\u5f88\u76f8\u4f3c\uff0c\u5e76\u4e14\u5728\u5404\u4e2a\u5b57\u6bb5\u4e0a\u5305\u542b\u7c7b\u4f3c\u7684\u9a8c\u8bc1\u6807\u5fd7\uff0c\u4f8b\u5982 required , max_length \u548c default \u3002 \u5b57\u6bb5\u6807\u5fd7\u8fd8\u53ef\u4ee5\u63a7\u5236\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5e94\u8be5\u5982\u4f55\u663e\u793a\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u4f8b\u5982\u5728\u6e32\u67d3HTML\u65f6\u3002 {'base_template': 'textarea.html'} \u76f8\u5f53\u4e8e\u5728django Form \u7c7b\u4e2d\u4f7f\u7528 widget=widgets.Textarea \u3002\u8fd9\u5bf9\u4e8e\u63a7\u5236\u53ef\u6d4f\u89c8API\u7684\u663e\u793a\u65b9\u5f0f\u7279\u522b\u6709\u7528\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u540e\u9762\u770b\u5230\u3002 \u6211\u4eec\u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ModelSerializer \u7c7b\u6765\u8282\u7701\u4e00\u4e9b\u65f6\u95f4\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230\uff0c\u4f46\u662f\u73b0\u5728\u6211\u4eec\u5148\u4fdd\u6301\u6211\u4eec\u5b9a\u4e49\u7684serializer","title":"\u521b\u5efa\u4e00\u4e2aSerializer\u7c7b"},{"location":"django_rest_framework/djang_rest_framework/#serializers","text":"\u5728\u8fdb\u4e00\u6b65\u6df1\u5165\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u719f\u6089\u5982\u4f55\u4f7f\u7528\u65b0\u7684Serializer\u7c7b\u3002\u8ba9\u6211\u4eec\u8fdb\u5165Django shell\u3002 python manage.py shell \u597d\u7684\uff0c\u4e00\u65e6\u6211\u4eec\u5b8c\u6210\u4e86\u4e00\u4e9b\u5bfc\u5165\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u51e0\u4e2a\u4ee3\u7801\u7247\u6bb5\u6765\u5904\u7406\u3002 from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser snippet = Snippet(code='foo = \"bar\"\\n') snippet.save() snippet = Snippet(code='print \"hello, world\"\\n') snippet.save() \u6211\u4eec\u73b0\u5728\u6709\u51e0\u4e2asnippet\u5b9e\u4f8b\u53ef\u4f9b\u4f7f\u7528\u3002\u6211\u4eec\u6765\u770b\u770b\u5e8f\u5217\u5316\u5176\u4e2d\u4e00\u4e2a\u5b9e\u4f8b\u3002 serializer = SnippetSerializer(snippet) serializer.data # {'id': 2, 'title': u'', 'code': u'print \"hello, world\"\\n', 'linenos': False, 'language': u'python', 'style': u'friendly'} \u6b64\u65f6\u6211\u4eec\u5df2\u5c06model\u5b9e\u4f8b\u8f6c\u6362\u4e3aPython\u81ea\u7136\u6570\u636e\u7c7b\u578b\u3002\u4e3a\u4e86\u5b8c\u6210\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u6570\u636e\u6e32\u67d3\u5230 json \u3002 content = JSONRenderer().render(serializer.data) content # '{\"id\": 2, \"title\": \"\", \"code\": \"print \\\\\"hello, world\\\\\"\\\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\"}' \u53cd\u5e8f\u5217\u5316\u662f\u7c7b\u4f3c\u7684\u3002\u9996\u5148\uff0c\u6211\u4eec\u5c06\u6d41\u89e3\u6790\u4e3aPython\u6570\u636e\u7c7b\u578b\u2026 from django.utils.six import BytesIO stream = BytesIO(content) data = JSONParser().parse(stream) \u2026\u7136\u540e\u6211\u4eec\u5c06\u89e3\u6790\u540e\u7684\u6570\u636e\u7c7b\u578b\u8fd8\u539f\u4e3a\u5b8c\u5168\u586b\u5145\u7684\u5bf9\u8c61\u5b9e\u4f8b\u3002 serializer = SnippetSerializer(data=data) serializer.is_valid() # True serializer.validated_data # OrderedDict([('title', ''), ('code', 'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]) serializer.save() # <Snippet: Snippet object> \u8bf7\u6ce8\u610fAPI\u4e0e\u8868\u5355\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002\u5f53\u6211\u4eec\u5f00\u59cb\u7f16\u5199\u4f7f\u7528\u5e8f\u5217\u5316\u5668\u7684\u89c6\u56fe\u65f6\uff0c\u76f8\u4f3c\u6027\u5e94\u8be5\u53d8\u5f97\u66f4\u52a0\u660e\u663e\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u5e8f\u5217\u5316querysets\u800c\u4e0d\u662fmodel\u5b9e\u4f8b\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u5728\u5e8f\u5217\u5316\u7c7b\u4e2d\u6dfb\u52a0\u53c2\u6570 many=True serializer = SnippetSerializer(Snippet.objects.all(), many=True) serializer.data # [OrderedDict([('id', 1), ('title', u''), ('code', u'foo = \"bar\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', u''), ('code', u'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', u''), ('code', u'print \"hello, world\"'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])]","title":"\u4f7f\u7528Serializers"},{"location":"django_rest_framework/djang_rest_framework/#modelserializers","text":"SnippetSerializer \u7c7b\u590d\u5236\u4e86\u5f88\u591a\u4fe1\u606f\uff0c\u8fd9\u4e9b\u90fd\u5305\u542b\u5728 Snippet \u6a21\u578b\u4e2d\u3002\u5982\u679c\u6211\u4eec\u80fd\u591f\u4f7f\u4ee3\u7801\u66f4\u7b80\u6d01\uff0c\u90a3\u5c06\u662f\u5f88\u597d\u7684\u3002 \u4e0eDjango\u63d0\u4f9b Form \u7c7b\u548c ModelForm \u7c7b\u7684\u65b9\u5f0f\u76f8\u540c\uff0cREST\u6846\u67b6\u5305\u62ec Serializer \u7c7b\u548c ModelSerializer \u7c7b\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u4f7f\u7528 ModelSerializer \u7c7b\u91cd\u6784\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u3002\u518d\u6b21\u6253\u5f00 snippets/serializers.py \u6587\u4ef6\uff0c\u5e76\u4f7f\u7528\u4ee5\u4e0b\u5185\u5bb9\u66ff\u6362 SnippetSerializer \u7c7b\u3002 class SnippetSerializer(serializers.ModelSerializer): class Meta: model = Snippet fields = ('id', 'title', 'code', 'linenos', 'language', 'style') \u5e8f\u5217\u5316\u7a0b\u5e8f\u5177\u6709\u7684\u4e00\u4e2a\u4e0d\u9519\u7684\u5c5e\u6027\u662f\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6253\u5370\u5176\u5bf9\u8c61\u6765\u68c0\u67e5\u5e8f\u5217\u5316\u7a0b\u5e8f\u5b9e\u4f8b\u4e2d\u7684\u6240\u6709\u5b57\u6bb5\u3002\u6253\u5f00Django shell python manage.py shell \uff0c\u7136\u540e\u5c1d\u8bd5\u4ee5\u4e0b\u64cd\u4f5c\uff1a from snippets.serializers import SnippetSerializer serializer = SnippetSerializer() print(repr(serializer)) # SnippetSerializer(): # id = IntegerField(label='ID', read_only=True) # title = CharField(allow_blank=True, max_length=100, required=False) # code = CharField(style={'base_template': 'textarea.html'}) # linenos = BooleanField(required=False) # language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')... # style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')... \u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f ModelSerializer \u7c7b\u6ca1\u6709\u505a\u4efb\u4f55\u7279\u522b\u795e\u5947\u7684\u4e8b\u60c5\uff0c\u5b83\u4eec\u53ea\u662f\u521b\u5efa\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\u7684\u5feb\u6377\u65b9\u5f0f\uff1a \u81ea\u52a8\u786e\u5b9a\u5b57\u6bb5\u96c6\u3002 create() \u548c update() \u65b9\u6cd5\u7684\u7b80\u5355\u9ed8\u8ba4\u5b9e\u73b0\u3002","title":"\u4f7f\u7528ModelSerializers"},{"location":"django_rest_framework/djang_rest_framework/#serializerdjango","text":"\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u6211\u4eec\u7684\u65b0Serializer\u7c7b\u7f16\u5199\u4e00\u4e9bAPI\u89c6\u56fe\u3002\u76ee\u524d\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u4efb\u4f55REST\u6846\u67b6\u7684\u5176\u4ed6\u529f\u80fd\uff0c\u6211\u4eec\u53ea\u4f1a\u5c06\u89c6\u56fe\u5199\u4e3a\u5e38\u89c4Django\u89c6\u56fe\u3002 \u7f16\u8f91 snippets/views.py \u6587\u4ef6\uff0c\u7136\u540e\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002 from django.http import HttpResponse, JsonResponse from django.views.decorators.csrf import csrf_exempt from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser from snippets.models import Snippet from snippets.serializers import SnippetSerializer \u6211\u4eecAPI\u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u652f\u6301\u5217\u51fa\u6240\u6709\u5b58\u5728\u7684snippets\uff0c\u6216\u521b\u5efa\u4e00\u4e2a\u65b0snippets\u7684\u89c6\u56fe @csrf_exempt def snippet_list(request): \"\"\" List all code snippets, or create a new snippet. \"\"\" if request.method == 'GET': snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return JsonResponse(serializer.data, safe=False) elif request.method == 'POST': data = JSONParser().parse(request) serializer = SnippetSerializer(data=data) if serializer.is_valid(): serializer.save() return JsonResponse(serializer.data, status=201) return JsonResponse(serializer.errors, status=400) \u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4ece\u6ca1\u6709CSRF\u4ee4\u724c\u7684\u5ba2\u6237\u7aefPOST\u5230\u6b64\u89c6\u56fe\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06\u89c6\u56fe\u6807\u8bb0\u4e3a csrf_exempt \u3002\u8fd9\u4e0d\u662f\u60a8\u901a\u5e38\u60f3\u8981\u505a\u7684\u4e8b\u60c5\uff0cREST\u6846\u67b6\u89c6\u56fe\u5b9e\u9645\u4e0a\u4f7f\u7528\u7684\u884c\u4e3a\u6bd4\u8fd9\u66f4\u660e\u667a\uff0c\u4f46\u5b83\u73b0\u5728\u53ef\u4ee5\u7528\u4e8e\u6211\u4eec\u7684\u76ee\u7684 \u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u4e0e\u5355\u4e2asnippet\u76f8\u5bf9\u5e94\u7684\u89c6\u56fe\uff0c\u5e76\u53ef\u7528\u4e8e\u68c0\u7d22\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4ee3\u7801\u6bb5\u3002 @csrf_exempt def snippet_detail(request, pk): \"\"\" Retrieve, update or delete a code snippet. \"\"\" try: snippet = Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: return HttpResponse(status=404) if request.method == 'GET': serializer = SnippetSerializer(snippet) return JsonResponse(serializer.data) elif request.method == 'PUT': data = JSONParser().parse(request) serializer = SnippetSerializer(snippet, data=data) if serializer.is_valid(): serializer.save() return JsonResponse(serializer.data) return JsonResponse(serializer.errors, status=400) elif request.method == 'DELETE': snippet.delete() return HttpResponse(status=204) \u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u94fe\u63a5\u8fd9\u4e9b\u89c6\u56fe\u3002\u521b\u5efa snippets/urls.py \u6587\u4ef6\uff1a from django.conf.urls import url from snippets import views urlpatterns = [ url(r'^snippets/$', views.snippet_list), url(r'^snippets/(?P<pk>[0-9]+)/$', views.snippet_detail), ] \u6211\u4eec\u8fd8\u9700\u8981\u94fe\u63a5tutorial/urls.py\u6587\u4ef6\u4e2d\u7684\u6839urlconf \uff0c\u4ee5\u5305\u542b\u6211\u4eec\u7684snippet\u5e94\u7528\u7684URL\u3002 from django.conf.urls import url, include urlpatterns = [ url(r'^', include('snippets.urls')), ] \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u76ee\u524d\u8fd8\u6709\u4e00\u4e9b\u6211\u4eec\u6ca1\u6709\u6b63\u786e\u5904\u7406\u7684\u8fb9\u7f18\u60c5\u51b5\u3002\u5982\u679c\u6211\u4eec\u53d1\u9001\u9519\u8bef\u7684json\uff0c\u6216\u8005\u5982\u679c\u4f7f\u7528\u89c6\u56fe\u65e0\u6cd5\u5904\u7406\u7684\u65b9\u6cd5\u53d1\u51fa\u8bf7\u6c42\uff0c\u90a3\u4e48\u6211\u4eec\u6700\u7ec8\u5c06\u5f97\u5230500\u201c\u670d\u52a1\u5668\u9519\u8bef\u201d\u54cd\u5e94\u3002\u4e0d\u8fc7\uff0c\u73b0\u5728\u8fd9\u6837\u505a\u3002","title":"\u4f7f\u7528\u6211\u4eec\u7684Serializer\u7f16\u5199\u5e38\u89c4Django\u89c6\u56fe"},{"location":"django_rest_framework/djang_rest_framework/#web-api","text":"\u73b0\u5728\u6211\u4eec\u542f\u52a8\u670d\u52a1\u5668 \u9000\u51fashell\u3002\u3002\u3002 quit() \u5e76\u542f\u52a8django\u670d\u52a1\u5668 ./manage.py runserver Validating models... 0 errors found Django version 1.11, using settings 'tutorial.settings' Development server is running at http://127.0.0.1:8000/ Quit the server with CONTROL-C. \u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u670d\u52a1\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 curl \u6216 httpie \u6d4b\u8bd5\u6211\u4eec\u7684API \u3002Httpie\u662f\u4e00\u4e2a\u7528Python\u7f16\u5199\u7684\u7528\u6237\u53cb\u597d\u7684http\u5ba2\u6237\u7aef\u3002\u6211\u4eec\u5b89\u88c5\u4e00\u4e0b\u5427\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528pip\u5b89\u88c5httpie\uff1a pip install httpie \u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u6240\u6709snippets\u7684\u5217\u8868\u4fe1\u606f http http://127.0.0.1:8000/snippets/ HTTP/1.1 200 OK ... [ { \"id\": 1, \"title\": \"\", \"code\": \"foo = \\\"bar\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" }, { \"id\": 2, \"title\": \"\", \"code\": \"print \\\"hello, world\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } ] \u6216\u8005\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u5176id\u6765\u83b7\u53d6\u7279\u5b9asnippet\uff1a http http://127.0.0.1:8000/snippets/2/ HTTP/1.1 200 OK ... { \"id\": 2, \"title\": \"\", \"code\": \"print \\\"hello, world\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } \u540c\u6837\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728Web\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\u8fd9\u4e9bURL\u6765\u663e\u793a\u76f8\u540c\u200b\u200b\u7684json\u3002","title":"\u6d4b\u8bd5\u6211\u4eec\u5bf9Web API\u7684\u7b2c\u4e00\u6b21\u5c1d\u8bd5"},{"location":"django_rest_framework/djang_rest_framework/#_3","text":"\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u505a\u5f97\u8fd8\u4e0d\u9519\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5e8f\u5217\u5316API\uff0c\u611f\u89c9\u975e\u5e38\u7c7b\u4f3c\u4e8eDjango\u7684Forms API\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5e38\u89c4\u7684Django\u89c6\u56fe\u3002 \u6211\u4eec\u7684API\u89c6\u56fe\u76ee\u524d\u6ca1\u6709\u505a\u4efb\u4f55\u7279\u522b\u7279\u522b\u7684\u4e8b\u60c5\uff0c\u9664\u4e86\u63d0\u4f9bjson\u54cd\u5e94\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u6211\u4eec\u4ecd\u60f3\u6e05\u7406\u7684\u9519\u8bef\u5904\u7406\u8fb9\u7f18\u60c5\u51b5\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u6b63\u5e38\u8fd0\u884c\u7684Web API\u3002 \u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u7684\u7b2c2\u90e8\u5206\u4e2d\u770b\u5230\u5982\u4f55\u5f00\u59cb\u6539\u8fdb\u3002","title":"\u6211\u4eec\u73b0\u5728\u5728\u54ea"},{"location":"django_rest_framework/django_rest_framework_responseAndRequest/","text":"\u4ece\u8fd9\u91cc\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u771f\u6b63\u5f00\u59cb\u6db5\u76d6REST\u6846\u67b6\u7684\u6838\u5fc3\u3002\u8ba9\u6211\u4eec\u4ecb\u7ecd\u51e0\u4e2a\u57fa\u672c\u6784\u5efa\u5757\u3002 Request\u5bf9\u8c61 REST\u6846\u67b6\u5f15\u5165\u4e86\u4e00\u4e2a Request \u5bf9\u8c61 \u7528\u6765\u6269\u5c55\u5e38\u89c4 HttpRequest \u5bf9\u8c61\uff0c\u5e76\u63d0\u4f9b\u66f4\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\u3002 Request \u5bf9\u8c61\u7684\u6838\u5fc3\u529f\u80fd\u662f request.data \u5c5e\u6027\uff0c\u5b83\u7c7b\u4f3c\u4e8e request.POST \uff0c\u4f46\u5bf9\u4e8e\u4f7f\u7528Web API\u66f4\u6709\u7528\u3002 request.POST # Only handles form data. Only works for 'POST' method. request.data # Handles arbitrary data. Works for 'POST', 'PUT' and 'PATCH' methods. Response\u5bf9\u8c61 REST\u6846\u67b6\u8fd8\u5f15\u5165\u4e86\u4e00\u4e2a Response \u5bf9\u8c61\uff0c\u8fd9\u662fTemplateResponse\u7684\u4e00\u79cd\u7c7b\u578b\uff0c\u5b83\u63a5\u53d7\u672a\u6e32\u67d3\u7684\u5185\u5bb9\u5e76\u6839\u636e\u5185\u5bb9\u6765\u786e\u5b9a\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u6b63\u786e\u5185\u5bb9\u7c7b\u578b\u3002 return Response(data) # Renders to content type as requested by the client. Status codes \u5728\u89c6\u56fe\u4e2d\u4f7f\u7528\u6570\u5b57HTTP\u72b6\u6001\u4ee3\u7801\u5e76\u4e0d\u603b\u80fd\u660e\u663e\u5730\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u5ffd\u7565\u9519\u8bef\u4ee3\u7801\u3002REST\u6846\u67b6\u4e3a\u6bcf\u4e2a\u72b6\u6001\u4ee3\u7801\u63d0\u4f9b\u4e86\u66f4\u663e\u5f0f\u7684\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982\u72b6\u6001\u6a21\u5757\u4e2d\u7684 HTTP_400_BAD_REQUEST \u3002\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u6807\u8bc6\u7b26\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u6570\u5b57\u6807\u8bc6\u7b26\u3002 \u5305\u88c5API\u89c6\u56fe REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53ef\u7528\u4e8e\u7f16\u5199API\u89c6\u56fe\u7684\u88c5\u9970\u5668\u3002 @api_view \u7528\u4e8e\u5904\u7406\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u7684\u88c5\u9970\u5668\u3002 APIView \u7c7b\u7528\u4e8e\u5904\u7406\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002 \u8fd9\u4e9b\u5305\u88c5\u5668\u63d0\u4f9b\u4e86\u4e00\u4e9b\u529f\u80fd\uff0c\u4f8b\u5982\u786e\u4fdd\u5728\u89c6\u56fe\u4e2d\u63a5\u6536 Request \u5b9e\u4f8b\uff0c\u5e76\u5411 Response \u5bf9\u8c61\u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u4ee5\u4fbf\u6267\u884c\u5185\u5bb9\u534f\u8bae\u3002 \u5305\u88c5\u5668\u8fd8\u63d0\u4f9b\u4e00\u4e9b\u884c\u4e3a\uff0c\u4f8b\u5982\u5728\u9002\u5f53\u7684\u65f6\u5019\u8fd4\u56de 405 Method Not Allowed \u7684\u54cd\u5e94\uff0c\u5e76\u4e14\u5904\u7406\u5f53\u9519\u8bef\u7684\u8f93\u5165\u8fdb\u5165 request.data \u65f6\u9020\u6210\u7684 ParseError \u5f02\u5e38 \u7ec4\u5408\u8d77\u6765 \u597d\u7684\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u5e76\u5f00\u59cb\u4f7f\u7528\u8fd9\u4e9b\u65b0\u7ec4\u4ef6\u6765\u7f16\u5199\u4e00\u4e9b\u89c6\u56fe\u3002 \u6211\u4eec\u4e0d\u518d\u9700\u8981 views.py \u4e2d\u7684 JSONResponse \u7c7b\u4e86\uff0c\u6240\u4ee5\u5220\u9664\u5b83\u3002\u5f00\u59cb\u91cd\u6784\u89c6\u56fe\u3002 from rest_framework import status from rest_framework.decorators import api_view from rest_framework.response import Response from snippets.models import Snippet from snippets.serializers import SnippetSerializer @api_view(['GET', 'POST']) def snippet_list(request): \"\"\" List all code snippets, or create a new snippet. \"\"\" if request.method == 'GET': snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return Response(serializer.data) elif request.method == 'POST': serializer = SnippetSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) \u6211\u4eec\u7684\u5b9e\u4f8b\u89c6\u56fe\u662f\u5bf9\u524d\u4e00\u4e2a\u793a\u4f8b\u7684\u6539\u8fdb\u3002\u5b83\u66f4\u7b80\u6d01\u4e00\u4e9b\uff0c\u73b0\u5728\u4ee3\u7801\u4e0e\u6211\u4eec\u4f7f\u7528Forms API\u975e\u5e38\u76f8\u4f3c\u3002\u6211\u4eec\u8fd8\u4f7f\u7528\u547d\u540d\u7684\u72b6\u6001\u4ee3\u7801status code \uff0c\u8fd9\u4f7f\u5f97\u54cd\u5e94\u66f4\u660e\u786e\u3002 \u4ee5\u4e0b\u662f views.py \u6a21\u5757\u4e2d\u5355\u4e2asnippet\u7684\u89c6\u56fe\u3002 @api_view(['GET', 'PUT', 'DELETE']) def snippet_detail(request, pk): \"\"\" Retrieve, update or delete a code snippet. \"\"\" try: snippet = Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: return Response(status=status.HTTP_404_NOT_FOUND) if request.method == 'GET': serializer = SnippetSerializer(snippet) return Response(serializer.data) elif request.method == 'PUT': serializer = SnippetSerializer(snippet, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) elif request.method == 'DELETE': snippet.delete() return Response(status=status.HTTP_204_NO_CONTENT) \u8fd9\u5e94\u8be5\u90fd\u975e\u5e38\u719f\u6089 - \u4e0e\u4f7f\u7528\u5e38\u89c4Django\u89c6\u56fe\u6ca1\u6709\u592a\u5927\u533a\u522b\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u518d\u663e\u5f0f\u5730\u5c06\u8bf7\u6c42\u6216\u54cd\u5e94\u7ed1\u5b9a\u5230\u7ed9\u5b9a\u7684content type\u3002 request.data \u53ef\u4ee5\u5904\u7406\u4f20\u5165\u7684json\u8bf7\u6c42\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5904\u7406\u5176\u4ed6\u683c\u5f0f\u3002\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u5c06\u6570\u636e\u8fd4\u56de\u54cd\u5e94\u5bf9\u8c61\uff0c\u4f46\u5141\u8bb8REST\u6846\u67b6\u5c06\u54cd\u5e94\u6e32\u67d3\u4e3a\u6b63\u786e\u7684content type\u3002 \u5411url\u6dfb\u52a0\u53ef\u9009\u683c\u5f0f\u540e\u7f00 \u4e3a\u4e86\u5229\u7528\u6211\u4eec\u7684\u54cd\u5e94\u4e0d\u518d\u786c\u8fde\u63a5\u5230\u5355\u4e00\u5185\u5bb9\u7c7b\u578b\u7684\u4e8b\u5b9e\uff0c\u8ba9\u6211\u4eec\u5728API\u7aef\u70b9\u4e2d\u6dfb\u52a0\u5bf9\u683c\u5f0f\u540e\u7f00\u7684\u652f\u6301\u3002\u4f7f\u7528\u683c\u5f0f\u540e\u7f00\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u660e\u786e\u5f15\u7528\u7ed9\u5b9a\u683c\u5f0f\u7684url\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684API\u80fd\u591f\u5904\u7406\u8bf8\u5982 http://example.com/api/items/4.json \u4e4b\u7c7b\u7684url\u3002 \u9996\u5148\u5411\u4e24\u4e2a\u89c6\u56fe\u90fd\u6dfb\u52a0format\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a\u3002 def snippet_list(request, format=None): def snippet_detail(request, pk, format=None):","title":"Requests and responses"},{"location":"django_rest_framework/django_rest_framework_responseAndRequest/#request","text":"REST\u6846\u67b6\u5f15\u5165\u4e86\u4e00\u4e2a Request \u5bf9\u8c61 \u7528\u6765\u6269\u5c55\u5e38\u89c4 HttpRequest \u5bf9\u8c61\uff0c\u5e76\u63d0\u4f9b\u66f4\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\u3002 Request \u5bf9\u8c61\u7684\u6838\u5fc3\u529f\u80fd\u662f request.data \u5c5e\u6027\uff0c\u5b83\u7c7b\u4f3c\u4e8e request.POST \uff0c\u4f46\u5bf9\u4e8e\u4f7f\u7528Web API\u66f4\u6709\u7528\u3002 request.POST # Only handles form data. Only works for 'POST' method. request.data # Handles arbitrary data. Works for 'POST', 'PUT' and 'PATCH' methods.","title":"Request\u5bf9\u8c61"},{"location":"django_rest_framework/django_rest_framework_responseAndRequest/#response","text":"REST\u6846\u67b6\u8fd8\u5f15\u5165\u4e86\u4e00\u4e2a Response \u5bf9\u8c61\uff0c\u8fd9\u662fTemplateResponse\u7684\u4e00\u79cd\u7c7b\u578b\uff0c\u5b83\u63a5\u53d7\u672a\u6e32\u67d3\u7684\u5185\u5bb9\u5e76\u6839\u636e\u5185\u5bb9\u6765\u786e\u5b9a\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u6b63\u786e\u5185\u5bb9\u7c7b\u578b\u3002 return Response(data) # Renders to content type as requested by the client.","title":"Response\u5bf9\u8c61"},{"location":"django_rest_framework/django_rest_framework_responseAndRequest/#status-codes","text":"\u5728\u89c6\u56fe\u4e2d\u4f7f\u7528\u6570\u5b57HTTP\u72b6\u6001\u4ee3\u7801\u5e76\u4e0d\u603b\u80fd\u660e\u663e\u5730\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u5ffd\u7565\u9519\u8bef\u4ee3\u7801\u3002REST\u6846\u67b6\u4e3a\u6bcf\u4e2a\u72b6\u6001\u4ee3\u7801\u63d0\u4f9b\u4e86\u66f4\u663e\u5f0f\u7684\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982\u72b6\u6001\u6a21\u5757\u4e2d\u7684 HTTP_400_BAD_REQUEST \u3002\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u6807\u8bc6\u7b26\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u6570\u5b57\u6807\u8bc6\u7b26\u3002","title":"Status codes"},{"location":"django_rest_framework/django_rest_framework_responseAndRequest/#api","text":"REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53ef\u7528\u4e8e\u7f16\u5199API\u89c6\u56fe\u7684\u88c5\u9970\u5668\u3002 @api_view \u7528\u4e8e\u5904\u7406\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u7684\u88c5\u9970\u5668\u3002 APIView \u7c7b\u7528\u4e8e\u5904\u7406\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002 \u8fd9\u4e9b\u5305\u88c5\u5668\u63d0\u4f9b\u4e86\u4e00\u4e9b\u529f\u80fd\uff0c\u4f8b\u5982\u786e\u4fdd\u5728\u89c6\u56fe\u4e2d\u63a5\u6536 Request \u5b9e\u4f8b\uff0c\u5e76\u5411 Response \u5bf9\u8c61\u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u4ee5\u4fbf\u6267\u884c\u5185\u5bb9\u534f\u8bae\u3002 \u5305\u88c5\u5668\u8fd8\u63d0\u4f9b\u4e00\u4e9b\u884c\u4e3a\uff0c\u4f8b\u5982\u5728\u9002\u5f53\u7684\u65f6\u5019\u8fd4\u56de 405 Method Not Allowed \u7684\u54cd\u5e94\uff0c\u5e76\u4e14\u5904\u7406\u5f53\u9519\u8bef\u7684\u8f93\u5165\u8fdb\u5165 request.data \u65f6\u9020\u6210\u7684 ParseError \u5f02\u5e38","title":"\u5305\u88c5API\u89c6\u56fe"},{"location":"django_rest_framework/django_rest_framework_responseAndRequest/#_1","text":"\u597d\u7684\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u5e76\u5f00\u59cb\u4f7f\u7528\u8fd9\u4e9b\u65b0\u7ec4\u4ef6\u6765\u7f16\u5199\u4e00\u4e9b\u89c6\u56fe\u3002 \u6211\u4eec\u4e0d\u518d\u9700\u8981 views.py \u4e2d\u7684 JSONResponse \u7c7b\u4e86\uff0c\u6240\u4ee5\u5220\u9664\u5b83\u3002\u5f00\u59cb\u91cd\u6784\u89c6\u56fe\u3002 from rest_framework import status from rest_framework.decorators import api_view from rest_framework.response import Response from snippets.models import Snippet from snippets.serializers import SnippetSerializer @api_view(['GET', 'POST']) def snippet_list(request): \"\"\" List all code snippets, or create a new snippet. \"\"\" if request.method == 'GET': snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return Response(serializer.data) elif request.method == 'POST': serializer = SnippetSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) \u6211\u4eec\u7684\u5b9e\u4f8b\u89c6\u56fe\u662f\u5bf9\u524d\u4e00\u4e2a\u793a\u4f8b\u7684\u6539\u8fdb\u3002\u5b83\u66f4\u7b80\u6d01\u4e00\u4e9b\uff0c\u73b0\u5728\u4ee3\u7801\u4e0e\u6211\u4eec\u4f7f\u7528Forms API\u975e\u5e38\u76f8\u4f3c\u3002\u6211\u4eec\u8fd8\u4f7f\u7528\u547d\u540d\u7684\u72b6\u6001\u4ee3\u7801status code \uff0c\u8fd9\u4f7f\u5f97\u54cd\u5e94\u66f4\u660e\u786e\u3002 \u4ee5\u4e0b\u662f views.py \u6a21\u5757\u4e2d\u5355\u4e2asnippet\u7684\u89c6\u56fe\u3002 @api_view(['GET', 'PUT', 'DELETE']) def snippet_detail(request, pk): \"\"\" Retrieve, update or delete a code snippet. \"\"\" try: snippet = Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: return Response(status=status.HTTP_404_NOT_FOUND) if request.method == 'GET': serializer = SnippetSerializer(snippet) return Response(serializer.data) elif request.method == 'PUT': serializer = SnippetSerializer(snippet, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) elif request.method == 'DELETE': snippet.delete() return Response(status=status.HTTP_204_NO_CONTENT) \u8fd9\u5e94\u8be5\u90fd\u975e\u5e38\u719f\u6089 - \u4e0e\u4f7f\u7528\u5e38\u89c4Django\u89c6\u56fe\u6ca1\u6709\u592a\u5927\u533a\u522b\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u518d\u663e\u5f0f\u5730\u5c06\u8bf7\u6c42\u6216\u54cd\u5e94\u7ed1\u5b9a\u5230\u7ed9\u5b9a\u7684content type\u3002 request.data \u53ef\u4ee5\u5904\u7406\u4f20\u5165\u7684json\u8bf7\u6c42\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5904\u7406\u5176\u4ed6\u683c\u5f0f\u3002\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u5c06\u6570\u636e\u8fd4\u56de\u54cd\u5e94\u5bf9\u8c61\uff0c\u4f46\u5141\u8bb8REST\u6846\u67b6\u5c06\u54cd\u5e94\u6e32\u67d3\u4e3a\u6b63\u786e\u7684content type\u3002","title":"\u7ec4\u5408\u8d77\u6765"},{"location":"django_rest_framework/django_rest_framework_responseAndRequest/#url","text":"\u4e3a\u4e86\u5229\u7528\u6211\u4eec\u7684\u54cd\u5e94\u4e0d\u518d\u786c\u8fde\u63a5\u5230\u5355\u4e00\u5185\u5bb9\u7c7b\u578b\u7684\u4e8b\u5b9e\uff0c\u8ba9\u6211\u4eec\u5728API\u7aef\u70b9\u4e2d\u6dfb\u52a0\u5bf9\u683c\u5f0f\u540e\u7f00\u7684\u652f\u6301\u3002\u4f7f\u7528\u683c\u5f0f\u540e\u7f00\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u660e\u786e\u5f15\u7528\u7ed9\u5b9a\u683c\u5f0f\u7684url\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684API\u80fd\u591f\u5904\u7406\u8bf8\u5982 http://example.com/api/items/4.json \u4e4b\u7c7b\u7684url\u3002 \u9996\u5148\u5411\u4e24\u4e2a\u89c6\u56fe\u90fd\u6dfb\u52a0format\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a\u3002 def snippet_list(request, format=None): def snippet_detail(request, pk, format=None):","title":"\u5411url\u6dfb\u52a0\u53ef\u9009\u683c\u5f0f\u540e\u7f00"}]}