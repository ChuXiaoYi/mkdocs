{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"1. \u5c0f\u6570\u8f6c\u6362\u4e3a\u767e\u5206\u6570 def change_percent(num): return \"%.2f%%\" % (num * 100) 2. \u6587\u4ef6\u64cd\u4f5c \u67e5\u770b\u5f53\u524d\u76ee\u5f55 os.getcwd() \u6216 from os import path d = path.dirname(__file__) # __file__ \u4e3a\u5f53\u524d\u6587\u4ef6, \u82e5\u679c\u5728ide\u4e2d\u8fd0\u884c\u6b64\u884c\u4f1a\u62a5\u9519,\u53ef\u6539\u4e3a #d = path.dirname('.') \u83b7\u5f97\u5355\u4e2a\u76ee\u5f55\u8282\u70b9\u7684\u5b50\u8282\u70b9 os.listdir(rootdir) \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u4fe1\u606f for parent,dirnames,filenames in os.walk(rootdir): #\u4e09\u4e2a\u53c2\u6570\uff1a\u5206\u522b\u8fd4\u56de1.\u7236\u76ee\u5f55 2.\u6240\u6709\u6587\u4ef6\u5939\u540d\u5b57\uff08\u4e0d\u542b\u8def\u5f84\uff093.\u6240\u6709\u6587\u4ef6\u540d\u5b57 for dirname in dirnames: #\u8f93\u51fa\u6587\u4ef6\u5939\u4fe1\u606f print \"parent is:\" + parent print \"dirname is\" + dirname for filename in filenames: #\u8f93\u51fa\u6587\u4ef6\u4fe1\u606f print \"parent is:\" + parent print \"filename is:\" + filename print \"the full name of the file is:\" + os.path.join(parent,filename) #\u8f93\u51fa\u6587\u4ef6\u8def\u5f84\u4fe1\u606f 3. \u8bfb\u5199csv\u6587\u4ef6 \u5199\u5165 import csv def writer_to_csv(info): result_csv = open('result.csv', 'a', encoding='utf8') writer = csv.writer(result_csv) writer.writerow(info) result_csv.close() \u8bfb\u51fa import csv def read_csv(file): csv_file = open(file, 'r') reader = csv.reader(csv_file) for item in reader: yield item[0] 4. python3.6\u8bfbini\u914d\u7f6e\u6587\u4ef6 \u8bf4\u660e \uff1apython2.7-3.5\u4f7f\u7528\u7684\u662f ConfigParser \u6a21\u5757 import configparser 5. django\u4e4b\u5141\u8bb8\u5916\u90e8\u673a\u5668\u8bbf\u95ee\u672c\u673a\u670d\u52a1 \u5f00\u542fdjango\u670d\u52a1\u65f6\uff0c\u4f7f\u75280.0.0.0:\u7aef\u53e3\u542f\u52a8\uff0c\u4f8b\uff1a ./manage.py runserver 0.0.0.0:9999 \u4fee\u6539setting\u6587\u4ef6\u4e2d\u7684ALLOWED_HOSTS ALLOWED_HOSTS = ['*', ] \u6ce8\u610f\uff1a ['*', ] \u4e00\u5b9a\u8981\u52a0 , 6. Python\u591a\u8fdb\u7a0b\u5e76\u53d1\u64cd\u4f5c\u4e2d\u8fdb\u7a0b\u6c60Pool\u7684\u5e94\u7528 \u8bf4\u660e\uff1a \u4f7f\u7528 Pool \u7c7b\uff0c\u9700\u8981\u901a\u8fc7 from multiprocessing import Pool \u5bfc\u5165\u6c60 join\u65b9\u6cd5\u5fc5\u987b\u5728close\u6216terminate\u4e4b\u540e\u4f7f\u7528\u3002 apply_async() \u51fd\u6570\u539f\u578b\uff1a apply_async(func[, args=()[, kwds={}[,callback=None]]]) \uff0c\u8be5\u65b9\u6cd5\u975e\u963b\u585e\u4e14\u652f\u6301\u7ed3\u679c\u8fd4\u56de\u8fdb\u884c\u56de\u8c03\u3002 \u793a\u4f8b\uff1a import time from multiprocessing import Pool def run(fn): # fn: \u51fd\u6570\u53c2\u6570\u662f\u6570\u636e\u5217\u8868\u7684\u4e00\u4e2a\u5143\u7d20 time.sleep(1) return fn * fn if __name__ == \"__main__\": testFL = [1, 2, 3, 4, 5, 6] print('\u987a\u5e8f\u6267\u884c:') # \u987a\u5e8f\u6267\u884c(\u4e5f\u5c31\u662f\u4e32\u884c\u6267\u884c\uff0c\u5355\u8fdb\u7a0b) s = time.time() for fn in testFL: print(run(fn)) e1 = time.time() print(\"\u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a\", int(e1 - s)) print('\u591a\u8fdb\u7a0b\u6267\u884c:') # \u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u884c\u6267\u884c pool = Pool(5) # \u521b\u5efa\u62e5\u67095\u4e2a\u8fdb\u7a0b\u6570\u91cf\u7684\u8fdb\u7a0b\u6c60 # testFL:\u8981\u5904\u7406\u7684\u6570\u636e\u5217\u8868\uff0crun\uff1a\u5904\u7406testFL\u5217\u8868\u4e2d\u6570\u636e\u7684\u51fd\u6570 # rl = pool.map(run, testFL) for fn in testFL: pool.apply_async(run, args=(fn, )) pool.close() # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u4e0d\u518d\u63a5\u53d7\u65b0\u7684\u8fdb\u7a0b pool.join() # \u4e3b\u8fdb\u7a0b\u963b\u585e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa e2 = time.time() print(\"\u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a\", int(e2 - e1)) # print(rl) \u54cd\u5e94\uff1a \u987a\u5e8f\u6267\u884c: 1 4 9 16 25 36 \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a 6 \u591a\u8fdb\u7a0b\u6267\u884c: \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a 2 map() \u51fd\u6570\u539f\u578b\uff1a map(func, iterable[, chunksize=None]) \uff0cPool\u7c7b\u4e2d\u7684map\u65b9\u6cd5\uff0c\u4e0e\u5185\u7f6e\u7684map\u51fd\u6570\u7528\u6cd5\u884c\u4e3a\u57fa\u672c\u4e00\u81f4\uff0c\u5b83\u4f1a\u4f7f\u8fdb\u7a0b\u963b\u585e\u76f4\u5230\u8fd4\u56de\u7ed3\u679c\u3002 \u6ce8\u610f\uff1a \u867d\u7136\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f46\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c\u5fc5\u987b\u5728\u6574\u4e2a\u961f\u5217\u90fd\u5c31\u7eea\u540e\uff0c\u7a0b\u5e8f\u624d\u4f1a\u8fd0\u884c\u5b50\u8fdb\u7a0b\u3002 \u793a\u4f8b\uff1a ```python import time from multiprocessing import Pool def run(fn): # fn: \u51fd\u6570\u53c2\u6570\u662f\u6570\u636e\u5217\u8868\u7684\u4e00\u4e2a\u5143\u7d20 time.sleep(1) return fn * fn if name == \" main \": testFL = [1, 2, 3, 4, 5, 6] print('\u987a\u5e8f\u6267\u884c:') # \u987a\u5e8f\u6267\u884c(\u4e5f\u5c31\u662f\u4e32\u884c\u6267\u884c\uff0c\u5355\u8fdb\u7a0b) s = time.time() for fn in testFL: print(run(fn)) e1 = time.time() print(\"\u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a\", int(e1 - s)) print('\u591a\u8fdb\u7a0b\u6267\u884c:') # \u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u884c\u6267\u884c pool = Pool(5) # \u521b\u5efa\u62e5\u67095\u4e2a\u8fdb\u7a0b\u6570\u91cf\u7684\u8fdb\u7a0b\u6c60 # testFL:\u8981\u5904\u7406\u7684\u6570\u636e\u5217\u8868\uff0crun\uff1a\u5904\u7406testFL\u5217\u8868\u4e2d\u6570\u636e\u7684\u51fd\u6570 rl = pool.map(run, testFL) # for fn in testFL: # pool.apply_async(run, args=(fn, )) pool.close() # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u4e0d\u518d\u63a5\u53d7\u65b0\u7684\u8fdb\u7a0b pool.join() # \u4e3b\u8fdb\u7a0b\u963b\u585e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa e2 = time.time() print(rl) print(\"\u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a\", int(e2 - e1)) ``` - \u54cd\u5e94\uff1a \u987a\u5e8f\u6267\u884c: 1 4 9 16 25 36 \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a 6 \u591a\u8fdb\u7a0b\u6267\u884c: [1, 4, 9, 16, 25, 36] \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a 2 7. \u8fdb\u7a0b\u6c60\u4f7f\u7528queue\u961f\u5217 \u6ce8\u610f\uff1a \u8fdb\u7a0b\u6c60\u4f7f\u7528\u961f\u5217\uff0c\u5e94\u4f7f\u7528 Manager \u5bf9\u8c61\u7684Queue from multiprocessing import Manager qid_queue = Manager().Queue() 8. operator.itemgetter() \u8fd4\u56de\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4f7f\u7528\u88ab\u64cd\u4f5c\u5143\u7684 __getitem__() \u65b9\u6cd5\u4ece\u5176\u88ab\u64cd\u4f5c\u5143\u83b7\u53d6 \u9879 \u3002\u901a\u8fc7\u8be5\u51fd\u6570\u4f5c\u7528\u5230\u5bf9\u8c61\u4e0a\u624d\u80fd\u83b7\u53d6\u503c\u3002\u5982\u679c\u6307\u5b9a\u4e86\u591a\u4e2a\u9879\uff0c\u5219\u8fd4\u56de\u67e5\u627e\u503c\u7684\u4e00\u7ec4\u3002\u4f8b\u5982: \u5728f = itemgetter(2)\u4e4b\u540e\uff0c\u8c03\u7528f(r)\u8fd4\u56der[2]\u3002 \u5728g = itemgetter(2,5,3)\u4e4b\u540e\uff0c\u8c03\u7528g(r)\u8fd4\u56de(r[2]\uff0c r[5]\uff0c r[3])\u3002 \u7b49\u4ef7\u4e8e: def itemgetter(*items): if len(items) == 1: item = items[0] def g(obj): return obj[item] else: def g(obj): return tuple(obj[item] for item in items) return g \u9879\u53ef\u4ee5\u662f\u88ab\u64cd\u4f5c\u5143\u7684 __getitem__() \u65b9\u6cd5\u6240\u63a5\u53d7\u7684\u4efb\u4f55\u7c7b\u578b\u3002\u5b57\u5178\u63a5\u53d7\u5404\u79cd\u54c8\u5e0c\u503c\uff0c\u5217\u8868\u3001\u5143\u7ec4\u548c\u5b57\u7b26\u4e32\u63a5\u53d7\u7d22\u5f15\u6216\u7247: >>> itemgetter(1)('ABCDEFG') 'B' >>> itemgetter(1,3,5)('ABCDEFG') ('B', 'D', 'F') >>> itemgetter(slice(2,None))('ABCDEFG') 'CDEFG' \u5728\u7248\u672c2.5\u4e2d\u66f4\u6539:\u6dfb\u52a0\u4e86\u5bf9\u591a\u4e2a\u9879\u76ee\u63d0\u53d6\u7684\u652f\u6301\u3002 \u4f7f\u7528itemgetter()\u4ece\u5143\u7ec4\u8bb0\u5f55\u4e2d\u68c0\u7d22\u7279\u5b9a\u5b57\u6bb5\u7684\u793a\u4f8b: >>> inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)] >>> getcount = itemgetter(1) >>> map(getcount, inventory) [3, 2, 5, 1] >>> sorted(inventory, key=getcount) [('orange', 1), ('banana', 2), ('apple', 3), ('pear', 5)] 9. sorted()\u5185\u5efa\u51fd\u6570 sort \u4e0e sorted \u533a\u522b\uff1a sort \u662f\u5e94\u7528\u5728 list \u4e0a\u7684\u65b9\u6cd5\uff0csorted \u53ef\u4ee5\u5bf9\u6240\u6709\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\u64cd\u4f5c\u3002 list \u7684 sort \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u5bf9\u5df2\u7ecf\u5b58\u5728\u7684\u5217\u8868\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u5185\u5efa\u51fd\u6570 sorted \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u65b0\u7684 list\uff0c\u800c\u4e0d\u662f\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\u64cd\u4f5c\u3002 sorted \u8bed\u6cd5\uff1a sorted(iterable[, cmp[, key[, reverse]]]) \u53c2\u6570\u8bf4\u660e\uff1a iterable -- \u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 cmp -- \u6bd4\u8f83\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u5177\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u7684\u503c\u90fd\u662f\u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u53d6\u51fa\uff0c\u6b64\u51fd\u6570\u5fc5\u987b\u9075\u5b88\u7684\u89c4\u5219\u4e3a\uff0c\u5927\u4e8e\u5219\u8fd4\u56de1\uff0c\u5c0f\u4e8e\u5219\u8fd4\u56de-1\uff0c\u7b49\u4e8e\u5219\u8fd4\u56de0\u3002 key -- \u4e3b\u8981\u662f\u7528\u6765\u8fdb\u884c\u6bd4\u8f83\u7684\u5143\u7d20\uff0c\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u5177\u4f53\u7684\u51fd\u6570\u7684\u53c2\u6570\u5c31\u662f\u53d6\u81ea\u4e8e\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\uff0c\u6307\u5b9a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u6765\u8fdb\u884c\u6392\u5e8f\u3002 reverse -- \u6392\u5e8f\u89c4\u5219\uff0creverse = True \u964d\u5e8f \uff0c reverse = False \u5347\u5e8f\uff08\u9ed8\u8ba4\uff09\u3002 \u4f8b\u5b50\uff1a >>>a = [5,7,6,3,4,1,2] >>> b = sorted(a) # \u4fdd\u7559\u539f\u5217\u8868 >>> a [5, 7, 6, 3, 4, 1, 2] >>> b [1, 2, 3, 4, 5, 6, 7] >>> L=[('b',2),('a',1),('c',3),('d',4)] >>> sorted(L, cmp=lambda x,y:cmp(x[1],y[1])) # \u5229\u7528cmp\u51fd\u6570 [('a', 1), ('b', 2), ('c', 3), ('d', 4)] >>> sorted(L, key=lambda x:x[1]) # \u5229\u7528key [('a', 1), ('b', 2), ('c', 3), ('d', 4)] >>> students = [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)] >>> sorted(students, key=lambda s: s[2]) # \u6309\u5e74\u9f84\u6392\u5e8f [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)] >>> sorted(students, key=lambda s: s[2], reverse=True) # \u6309\u964d\u5e8f [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)] \u6ce8\u610f \uff1a\u5efa\u8bae\u4f7f\u7528key\uff0c\u800c\u4e0d\u662fcmp\uff0c\u56e0\u4e3akey\u66f4\u8282\u7701\u5185\u5b58\u7a7a\u95f4 10. python2.7 \u89e3\u51b3UnicodeDecodeError: \u2018ascii\u2019 codec can\u2019t decode byte 0xe5 in position 108: ordinal not in range(128\u3002\u3002\u3002\u3002 \u51fa\u73b0\u9519\u8bef\u539f\u56e0 \uff1a python\u7684str\u9ed8\u8ba4\u662fascii\u7f16\u7801\uff0c\u548cunicode\u7f16\u7801\u51b2\u7a81 \u89e3\u51b3\u65b9\u6848 \uff1a import sys reload(sys) sys.setdefaultencoding('utf8') 11. \u51e0\u4e2a\u6709\u7528\u7684python\u51fd\u6570 (\u7b1b\u5361\u5c14\u79ef, \u6392\u5217, \u7ec4\u5408) product \u7b1b\u5361\u5c14\u79ef permutations \u6392\u5217 combinations \u7ec4\u5408,\u6ca1\u6709\u91cd\u590d combinations_with_replacement \u7ec4\u5408,\u6709\u91cd\u590d >>> import itertools >>> for i in itertools.product('ABCD', r=2): ... print i, ... ('A', 'A') ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'A') ('B', 'B') ('B', 'C') ('B', 'D') ('C', 'A') ('C', 'B') ('C', 'C') ('C', 'D') ('D', 'A') ('D', 'B') ('D', 'C') ('D', 'D') >>> for i in itertools.permutations('ABCD', 2): ... print i, ... ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'A') ('B', 'C') ('B', 'D') ('C', 'A') ('C', 'B') ('C', 'D') ('D', 'A') ('D', 'B') ('D', 'C') >>> for i in itertools.combinations('ABCD', 2): ... print i, ... ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'C') ('B', 'D') ('C', 'D') >>> for i in itertools.combinations_with_replacement('ABCD', 2): ... print i, ... ('A', 'A') ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'B') ('B', 'C') ('B', 'D') ('C', 'C') ('C', 'D') ('D', 'D') 12. python\u6c42\u4e24\u4e2a\u94fe\u8868\u7ec4\u6210\u7684\u6570\u5b57\u7684\u548c \u7ed9\u5b9a\u4e24\u4e2a\u975e\u7a7a\u94fe\u8868\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u4f4d\u6570\u6309\u7167\u9006\u5e8f\u65b9\u5f0f\u5b58\u50a8\uff0c\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u4e24\u6570\u76f8\u52a0\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a(2 -> 4 -> 3) + (5 -> 6 -> 4) \u8f93\u51fa\uff1a7 -> 0 -> 8 \u539f\u56e0\uff1a342 + 465 = 807 \u4ee3\u7801\u5b9e\u73b0\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None def addTwoNumbers(self, l1, l2): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" val_sum = l1.val + l2.val list_node = ListNode(val_sum % 10) a = val_sum // 10 node = list_node while True: try: l1 = l1.next except: pass try: l2 = l2.next except: pass if not l1 and not l2: break elif not l1: l1_val = 0 l2_val = l2.val elif not l2: l2_val = 0 l1_val = l1.val else: l1_val = l1.val l2_val = l2.val val_sum = l1_val + l2_val + a temp_node = ListNode(val_sum % 10) node.next = temp_node node = temp_node a = val_sum // 10 if a != 0: node.next = ListNode(a) return list_node 13. python\u5185\u7f6e\u51fd\u6570\u2014\u2014divmod(a, b) v2.7 \u5b9e\u9645\u4e0a\u662f\u7b97a\u9664\u4ee5b\u7684\u5546\u548c\u4f59\u6570\uff0c\u8fd4\u56de(\u5546\uff0c\u4f59\u6570) divmod(1,2) (0, 1) divmod(5, 1) (5, 0) 14. python\u5185\u7f6e\u51fd\u6570\u2014\u2014enumerate(sequence, start=0) >>> seasons = ['Spring', 'Summer', 'Fall', 'Winter'] >>> list(enumerate(seasons)) [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')] >>> list(enumerate(seasons, start=1)) [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')] 15. python\u5185\u7f6e\u51fd\u6570\u2014\u2014filter(function, iterable) v2.7 \u5982\u679cfunction\u662fNone\uff0c\u5c31\u7b49\u4ef7\u4e8e\uff1a [item for item in iterable if item] \u5982\u679cfunction\u4e0d\u662fNone\uff0c\u5c31\u7b49\u4ef7\u4e8e\uff1a [item for item in iterable if function(item)] 16. datetime datetime\u6a21\u5757\u7528\u4e8e\u662fdate\u548ctime\u6a21\u5757\u7684\u5408\u96c6\uff0cdatetime\u6709\u4e24\u4e2a\u5e38\u91cf\uff0cMAXYEAR\u548cMINYEAR\uff0c\u5206\u522b\u662f9999\u548c1. datetime\u6a21\u5757\u5b9a\u4e49\u4e865\u4e2a\u7c7b\uff0c\u5206\u522b\u662f 1. datetime.date\uff1a\u8868\u793a\u65e5\u671f\u7684\u7c7b 2. datetime.datetime\uff1a\u8868\u793a\u65e5\u671f\u65f6\u95f4\u7684\u7c7b 3. datetime.time\uff1a\u8868\u793a\u65f6\u95f4\u7684\u7c7b 4. datetime.timedelta\uff1a\u8868\u793a\u65f6\u95f4\u95f4\u9694\uff0c\u5373\u4e24\u4e2a\u65f6\u95f4\u70b9\u7684\u95f4\u9694 5. datetime.tzinfo\uff1a\u65f6\u533a\u7684\u76f8\u5173\u4fe1\u606f datetime.date\u7c7b date\u7c7b\u6709\u4e09\u4e2a\u53c2\u6570,datetime.date(year,month,day)\uff0c\u8fd4\u56de datetime.date(2018, 7, 30) datetime.date.ctime() ,\u8fd4\u56de\u683c\u5f0f\u5982 Sun Apr 16 00:00:00 2017 >>>datetime.date.ctime(datetime.date(2018, 7, 30)) 'Mon Jul 30 00:00:00 2018' datetime.date.fromtimestamp(timestamp) ,\u6839\u636e\u7ed9\u5b9a\u7684\u65f6\u95f4\u622e\uff0c\u8fd4\u56de\u4e00\u4e2adate\u5bf9\u8c61\uff1b datetime.date.today() \u4f5c\u7528\u76f8\u540c >>>datetime.date.today() datetime.date(2018, 7, 30) datetime.date.isocalendar() :\u8fd4\u56de\u683c\u5f0f\u5982(year\uff0cmonth\uff0cday)\u7684\u5143\u7ec4 >>>datetime.date.isocalendar(datetime.date(2018, 7, 30)) (2018, 31, 1) datetime.date.isoformat() \uff1a\u8fd4\u56de\u683c\u5f0f\u5982YYYY-MM-DD >>>datetime.date.isoformat(datetime.date(2018, 7, 30)) '2018-07-30' datetime.date.isoweekday() \uff1a\u8fd4\u56de\u7ed9\u5b9a\u65e5\u671f\u7684\u661f\u671f\uff080-6\uff09\uff0c\u661f\u671f\u4e00=0\uff0c\u661f\u671f\u65e5=6 >>>datetime.date.isoweekday(datetime.date.today()) 1 datetime.date.replace(year,month,day) \uff1a\u66ff\u6362\u7ed9\u5b9a\u65e5\u671f\uff0c\u4f46\u4e0d\u6539\u53d8\u539f\u65e5\u671f >>>a = datetime.date.today() >>>a.replace(day=26) datetime.date(2018, 7, 26) datetime.date.strftime(format) :\u628a\u65e5\u671f\u65f6\u95f4\u6309\u7167\u7ed9\u5b9a\u7684format\u8fdb\u884c\u683c\u5f0f\u5316\u3002 >>>datetime.date.strftime(datetime.date.today(), '%Y-%m-%d') '2018-07-30' ``` >>>a = datetime.date.today() >>>a datetime.date(2018, 7, 30) >>>a.strftime('%Y-%m-%d') '2018-07-30' ``` datetime.date.timetuple() \uff1a\u8fd4\u56de\u65e5\u671f\u5bf9\u5e94\u7684time.struct_time\u5bf9\u8c61 >>>a = datetime.date.today() >>>datetime.date.timetuple(a) time.struct_time(tm_year=2018, tm_mon=7, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=211, tm_isdst=-1) datetime.date.weekday() \uff1a\u8fd4\u56de\u65e5\u671f\u7684\u661f\u671f >>>a = datetime.date.today() >>>datetime.date.weekday(a) 0 >>>a.weekday() 0 datetime.time\u7c7b time\u7c7b\u67095\u4e2a\u53c2\u6570\uff0cdatetime.time(hour,minute,second,microsecond,tzoninfo),\u8fd4\u56de08:29:30 datetime.time.replace() >>>datetime.time.replace(datetime.time(), hour=1) datetime.time(1, 0) datetime.time.strftime(format) :\u6309\u7167format\u683c\u5f0f\u8fd4\u56de\u65f6\u95f4 >>>datetime.time.strftime(datetime.time(2,3), \"%H:%M\") '02:03' datetime.time.tzname() \uff1a\u8fd4\u56de\u65f6\u533a\u540d\u5b57 datetime.time.utcoffset() \uff1a\u8fd4\u56de\u65f6\u533a\u7684\u65f6\u95f4\u504f\u79fb\u91cf datetime.datetime\u7c7b datetime\u7c7b\u6709\u5f88\u591a\u53c2\u6570\uff0cdatetime(year, month, day[, hour[, minute[, second[,microsecond[,tzinfo]]]]])\uff0c\u8fd4\u56de\u5e74\u6708\u65e5\uff0c\u65f6\u5206\u79d2 datetime.datetime.ctime() datetime.datetime.now().date() \uff1a\u8fd4\u56de\u5f53\u524d\u65e5\u671f\u65f6\u95f4\u7684\u65e5\u671f\u90e8\u5206 datetime.datetime.now().time() \uff1a\u8fd4\u56de\u5f53\u524d\u65e5\u671f\u65f6\u95f4\u7684\u65f6\u95f4\u90e8\u5206 datetime.datetime.fromtimestamp() datetime.datetime.now() \uff1a\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4 datetime.datetime.replace() datetime.datetime.strftime() \uff1a\u7531\u65e5\u671f\u683c\u5f0f\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u683c\u5f0f >>>datetime.datetime.now().strftime('%b-%d-%Y %H:%M:%S') 'Apr-16-2017 21:01:35' datetime.datetime.strptime() :\u7531\u5b57\u7b26\u4e32\u683c\u5f0f\u8f6c\u5316\u4e3a\u65e5\u671f\u683c\u5f0f >>>datetime.datetime.strptime('Apr-16-2017 21:01:35', '%b-%d-%Y %H:%M:%S') 2017-04-16 21:01:35 datetime.timedelta\u7c7b datetime.datetime.timedelta\u7528\u4e8e\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u4f8b\u5982\uff1a >>> a=datetime.datetime.now() >>> b=datetime.datetime.now() >>> a datetime.datetime(2017, 4, 16, 21, 21, 20, 871000) >>> b datetime.datetime(2017, 4, 16, 21, 21, 29, 603000) >>> b-a datetime.timedelta(0, 8, 732000) >>> (b-a).seconds 8 \u6216\u8005 time1 = datetime.datetime(2016, 10, 20) time2 = datetime.datetime(2015, 11, 2) \"\"\"\u8ba1\u7b97\u5929\u6570\u5dee\u503c\"\"\" print(time1-time2).days \"\"\"\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u76f8\u9694\u7684\u79d2\u6570\"\"\" print (time1-time2).total_seconds() 17. \u9488\u5bf9\u201ccould not install packages due to an EnvironmentError: [Errno 13] Permission denied: '/Library/Python/2.7/site-packages/vine'\u201d\u7684\u89e3\u51b3\u65b9\u5f0f pip install --user flask \u5728install\u540e\u52a0 --user 18. \u5b57\u5178\u8f6cxml v2.7 dicttoxml\u4f1a\u81ea\u52a8\u5728\u5934\u90e8\u6dfb\u52a0 <?xml version=\"1.0\" encoding=\"UTF-8\" ?> \u5e76\u901a\u8fc7\u53c2\u6570\u8bbe\u7f6exml\u7684\u5c5e\u6027 import dicttoxml dicttoxml.dicttoxml(self.post_data_dict, root=True, custom_root=\"request\", attr_type=False) 19. or\u548cand \u5982\u679c\u7528or\uff0c\u5e94\u8be5\u628a\u4e3atrue\u7684\u5199\u5728or\u524d\uff0c\u51cf\u5c0f\u8fd0\u7b97\u65f6\u95f4\uff1b \u5982\u679c\u7528and\uff0c\u5e94\u8be5\u628afalse\u7684\u5199\u5728and\u524d 20. xmltodict\u7684\u5751 \u5982\u679cxml\u4e2d\u5728\u540c\u4e00\u7ea7\u6709\u76f8\u540c\u5143\u7d20\uff0c\u5c31\u4f1a\u628a\u76f8\u540c\u5143\u7d20\u53d8\u6210\u5217\u8868\uff1b\u5982\u679c\u6ca1\u6709\u76f8\u540c\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u628a\u8be5\u5143\u7d20\u53d8\u4e3a\u5b57\u5178 \u5bf9\u4e8exml\u4e2d\u4e3a\u7a7a\u7684\u60c5\u51b5\uff0cxmltodict\u4f1a\u81ea\u52a8\u5c06\u503c\u53d8\u4e3a None 21. \u5217\u8868\u751f\u6210\u5f0f\u4e2d\u7684if-else \u53ea\u6709if [a for a in a_list if a==1] if-else [a if a==1 else a-1 for a in a_list] 22. \u9488\u5bf9MySQL said: Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen(/usr/local/...\u7684\u95ee\u9898 \u5728\u4f7f\u7528MySQL Workbench\u8fde\u63a5\u672c\u5730\u6570\u636e\u5e93\u7684\u65f6\u5019\uff0c\u51fa\u73b0\u4e86 MySQL said: Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen(/usr/local/lib/plugin/caching_sha2_password.so, 2): image not found \u8fd9\u662f\u56e0\u4e3a\u5728\u94fe\u63a5\u6570\u636e\u5e93\u65f6\u4e0d\u80fd\u52a0\u8f7d\u2018caching_sha2_password'\u8fd9\u4e2a\u63d2\u4ef6\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u5bf9\u8eab\u4efd\u9a8c\u8bc1\u3002 \u89e3\u51b3\u65b9\u6848\u662f\uff1a 1. \u6253\u5f00\u7cfb\u7edf\u504f\u597d\u8bbe\u7f6e\uff0c\u627e\u5230mysql\uff0c\u70b9\u51fbInitialize Database\u3002 2. \u8f93\u5165\u4f60\u7684\u65b0\u5bc6\u7801\uff0c\u8bb0\u4f4f\u8fd9\u4e2a\u5bc6\u7801\uff0c\u7528\u4e8e\u540e\u671f\u94fe\u63a5\u6570\u636e\u5e93\u7684\u767b\u9646\u4f7f\u7528\u3002 3. \u9009\u62e9\u2018Use legacy password\u2018\u3002 4. \u91cd\u542fmysql\u670d\u52a1\u3002 \u8fd9\u6837\u5728\u8fde\u63a5\u5c31\u6ca1\u6709\u95ee\u9898\u4e86 23. django model\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5 comment_list = Comment.objects.all()[:5].only('post', 'text') # \u53ea\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5 24. Connection reset by peer\u7684\u5e38\u89c1\u539f\u56e0 Connection reset by peer: socket write error\u9519\u8bef\u5206\u6790\uff1a \u5e38\u51fa\u73b0\u7684Connection reset by peer: \u539f\u56e0\u53ef\u80fd\u662f\u591a\u65b9\u9762\u7684\uff0c\u4e0d\u8fc7\u66f4\u5e38\u89c1\u7684\u539f\u56e0\u662f\uff1a \u2460\uff1a\u670d\u52a1\u5668\u7684\u5e76\u53d1\u8fde\u63a5\u6570\u8d85\u8fc7\u4e86\u5176\u627f\u8f7d\u91cf\uff0c\u670d\u52a1\u5668\u4f1a\u5c06\u5176\u4e2d\u4e00\u4e9b\u8fde\u63a5Down\u6389\uff1b \u2461\uff1a\u5ba2\u6237\u5173\u6389\u4e86\u6d4f\u89c8\u5668\uff0c\u800c\u670d\u52a1\u5668\u8fd8\u5728\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e\uff1b \u2462\uff1a\u6d4f\u89c8\u5668\u7aef\u6309\u4e86Stop \u901a\u5e38\u539f\u56e0\u4e3a\uff1a\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u5bf9\u7b49\u65b9\u5e94\u7528\u7a0b\u5e8f\u7a81\u7136\u505c\u6b62\u8fd0\u884c\uff0c\u6216\u8fdc\u7a0b\u4e3b\u673a\u91cd\u65b0\u542f\u52a8\uff0c\u6216\u8fdc\u7a0b\u4e3b\u673a\u5728\u8fdc\u7a0b\u65b9\u5957\u63a5\u5b57\u4e0a\u4f7f\u7528\u4e86\u201c\u5f3a\u5236\u201d\u5173\u95ed \uff08\u53c2\u89c1setsockopt(SO_LINGER)\uff09\u3002\u53e6\u5916\uff0c\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u6b63\u5728\u8fdb\u884c\u65f6\uff0c\u5982\u679c\u8fde\u63a5\u56e0\u201ckeep-alive\u201d\u6d3b\u52a8\u68c0\u6d4b\u5230\u4e00\u4e2a\u5931\u8d25\u800c\u4e2d \u65ad\uff0c\u4e5f\u53ef\u80fd\u5bfc\u81f4\u6b64\u9519\u8bef\u3002\u6b64\u65f6\uff0c\u6b63\u5728\u8fdb\u884c\u7684\u64cd\u4f5c\u4ee5\u9519\u8bef\u7801WSAENETRESET\u5931\u8d25\u8fd4\u56de\uff0c\u540e\u7eed\u64cd\u4f5c\u5c06\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u7801WSAECONNRESET\u3002 \u4f46\u662f\u5982\u679c\u9891\u7e41\u51fa\u73b0\uff0c\u5c31\u8868\u793a\u5f88 \u591a\u5ba2\u6237\u7aef\u8fde\u63a5\u5230Apache\u670d\u52a1\u5668\u7684\u54cd\u5e94\u65f6\u95f4\u592a\u957f\u4e86\uff0c\u53ef\u80fd\u662f\u7f51\u7edc\u7684\u95ee\u9898\u6216\u8005\u670d\u52a1\u5668\u6027\u80fd\u95ee\u9898\u3002 25. \u5173\u4e8edjango.urls.path\u548cdjango.urls.re_path \u5728django2.0\u4ee5\u540e django.urls.path \u4e0d\u7528\u4e8e\u6b63\u5219\u5339\u914d\uff0c\u5982\u679c\u60f3\u7528\u6b63\u5219\uff0c\u53ef\u4ee5\u7528 django.urls.re_path from django.urls import re_path re_path(r'^(?P<album_id>[0-9])/$', views.detail, name='detail'), \u5982\u679c\u7528url()\uff0c\u4e5f\u4f1a\u94fe\u63a5\u5230re_path()\u7684","title":"Home"},{"location":"#1","text":"def change_percent(num): return \"%.2f%%\" % (num * 100)","title":"1. \u5c0f\u6570\u8f6c\u6362\u4e3a\u767e\u5206\u6570"},{"location":"#2","text":"\u67e5\u770b\u5f53\u524d\u76ee\u5f55 os.getcwd() \u6216 from os import path d = path.dirname(__file__) # __file__ \u4e3a\u5f53\u524d\u6587\u4ef6, \u82e5\u679c\u5728ide\u4e2d\u8fd0\u884c\u6b64\u884c\u4f1a\u62a5\u9519,\u53ef\u6539\u4e3a #d = path.dirname('.') \u83b7\u5f97\u5355\u4e2a\u76ee\u5f55\u8282\u70b9\u7684\u5b50\u8282\u70b9 os.listdir(rootdir) \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u4fe1\u606f for parent,dirnames,filenames in os.walk(rootdir): #\u4e09\u4e2a\u53c2\u6570\uff1a\u5206\u522b\u8fd4\u56de1.\u7236\u76ee\u5f55 2.\u6240\u6709\u6587\u4ef6\u5939\u540d\u5b57\uff08\u4e0d\u542b\u8def\u5f84\uff093.\u6240\u6709\u6587\u4ef6\u540d\u5b57 for dirname in dirnames: #\u8f93\u51fa\u6587\u4ef6\u5939\u4fe1\u606f print \"parent is:\" + parent print \"dirname is\" + dirname for filename in filenames: #\u8f93\u51fa\u6587\u4ef6\u4fe1\u606f print \"parent is:\" + parent print \"filename is:\" + filename print \"the full name of the file is:\" + os.path.join(parent,filename) #\u8f93\u51fa\u6587\u4ef6\u8def\u5f84\u4fe1\u606f","title":"2. \u6587\u4ef6\u64cd\u4f5c"},{"location":"#3-csv","text":"\u5199\u5165 import csv def writer_to_csv(info): result_csv = open('result.csv', 'a', encoding='utf8') writer = csv.writer(result_csv) writer.writerow(info) result_csv.close() \u8bfb\u51fa import csv def read_csv(file): csv_file = open(file, 'r') reader = csv.reader(csv_file) for item in reader: yield item[0]","title":"3. \u8bfb\u5199csv\u6587\u4ef6"},{"location":"#4-python36ini","text":"\u8bf4\u660e \uff1apython2.7-3.5\u4f7f\u7528\u7684\u662f ConfigParser \u6a21\u5757 import configparser","title":"4. python3.6\u8bfbini\u914d\u7f6e\u6587\u4ef6"},{"location":"#5-django","text":"\u5f00\u542fdjango\u670d\u52a1\u65f6\uff0c\u4f7f\u75280.0.0.0:\u7aef\u53e3\u542f\u52a8\uff0c\u4f8b\uff1a ./manage.py runserver 0.0.0.0:9999 \u4fee\u6539setting\u6587\u4ef6\u4e2d\u7684ALLOWED_HOSTS ALLOWED_HOSTS = ['*', ] \u6ce8\u610f\uff1a ['*', ] \u4e00\u5b9a\u8981\u52a0 ,","title":"5. django\u4e4b\u5141\u8bb8\u5916\u90e8\u673a\u5668\u8bbf\u95ee\u672c\u673a\u670d\u52a1"},{"location":"#6-pythonpool","text":"\u8bf4\u660e\uff1a \u4f7f\u7528 Pool \u7c7b\uff0c\u9700\u8981\u901a\u8fc7 from multiprocessing import Pool \u5bfc\u5165\u6c60 join\u65b9\u6cd5\u5fc5\u987b\u5728close\u6216terminate\u4e4b\u540e\u4f7f\u7528\u3002 apply_async() \u51fd\u6570\u539f\u578b\uff1a apply_async(func[, args=()[, kwds={}[,callback=None]]]) \uff0c\u8be5\u65b9\u6cd5\u975e\u963b\u585e\u4e14\u652f\u6301\u7ed3\u679c\u8fd4\u56de\u8fdb\u884c\u56de\u8c03\u3002 \u793a\u4f8b\uff1a import time from multiprocessing import Pool def run(fn): # fn: \u51fd\u6570\u53c2\u6570\u662f\u6570\u636e\u5217\u8868\u7684\u4e00\u4e2a\u5143\u7d20 time.sleep(1) return fn * fn if __name__ == \"__main__\": testFL = [1, 2, 3, 4, 5, 6] print('\u987a\u5e8f\u6267\u884c:') # \u987a\u5e8f\u6267\u884c(\u4e5f\u5c31\u662f\u4e32\u884c\u6267\u884c\uff0c\u5355\u8fdb\u7a0b) s = time.time() for fn in testFL: print(run(fn)) e1 = time.time() print(\"\u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a\", int(e1 - s)) print('\u591a\u8fdb\u7a0b\u6267\u884c:') # \u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u884c\u6267\u884c pool = Pool(5) # \u521b\u5efa\u62e5\u67095\u4e2a\u8fdb\u7a0b\u6570\u91cf\u7684\u8fdb\u7a0b\u6c60 # testFL:\u8981\u5904\u7406\u7684\u6570\u636e\u5217\u8868\uff0crun\uff1a\u5904\u7406testFL\u5217\u8868\u4e2d\u6570\u636e\u7684\u51fd\u6570 # rl = pool.map(run, testFL) for fn in testFL: pool.apply_async(run, args=(fn, )) pool.close() # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u4e0d\u518d\u63a5\u53d7\u65b0\u7684\u8fdb\u7a0b pool.join() # \u4e3b\u8fdb\u7a0b\u963b\u585e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa e2 = time.time() print(\"\u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a\", int(e2 - e1)) # print(rl) \u54cd\u5e94\uff1a \u987a\u5e8f\u6267\u884c: 1 4 9 16 25 36 \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a 6 \u591a\u8fdb\u7a0b\u6267\u884c: \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a 2 map() \u51fd\u6570\u539f\u578b\uff1a map(func, iterable[, chunksize=None]) \uff0cPool\u7c7b\u4e2d\u7684map\u65b9\u6cd5\uff0c\u4e0e\u5185\u7f6e\u7684map\u51fd\u6570\u7528\u6cd5\u884c\u4e3a\u57fa\u672c\u4e00\u81f4\uff0c\u5b83\u4f1a\u4f7f\u8fdb\u7a0b\u963b\u585e\u76f4\u5230\u8fd4\u56de\u7ed3\u679c\u3002 \u6ce8\u610f\uff1a \u867d\u7136\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f46\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c\u5fc5\u987b\u5728\u6574\u4e2a\u961f\u5217\u90fd\u5c31\u7eea\u540e\uff0c\u7a0b\u5e8f\u624d\u4f1a\u8fd0\u884c\u5b50\u8fdb\u7a0b\u3002 \u793a\u4f8b\uff1a ```python import time from multiprocessing import Pool def run(fn): # fn: \u51fd\u6570\u53c2\u6570\u662f\u6570\u636e\u5217\u8868\u7684\u4e00\u4e2a\u5143\u7d20 time.sleep(1) return fn * fn if name == \" main \": testFL = [1, 2, 3, 4, 5, 6] print('\u987a\u5e8f\u6267\u884c:') # \u987a\u5e8f\u6267\u884c(\u4e5f\u5c31\u662f\u4e32\u884c\u6267\u884c\uff0c\u5355\u8fdb\u7a0b) s = time.time() for fn in testFL: print(run(fn)) e1 = time.time() print(\"\u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a\", int(e1 - s)) print('\u591a\u8fdb\u7a0b\u6267\u884c:') # \u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u884c\u6267\u884c pool = Pool(5) # \u521b\u5efa\u62e5\u67095\u4e2a\u8fdb\u7a0b\u6570\u91cf\u7684\u8fdb\u7a0b\u6c60 # testFL:\u8981\u5904\u7406\u7684\u6570\u636e\u5217\u8868\uff0crun\uff1a\u5904\u7406testFL\u5217\u8868\u4e2d\u6570\u636e\u7684\u51fd\u6570 rl = pool.map(run, testFL) # for fn in testFL: # pool.apply_async(run, args=(fn, )) pool.close() # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u4e0d\u518d\u63a5\u53d7\u65b0\u7684\u8fdb\u7a0b pool.join() # \u4e3b\u8fdb\u7a0b\u963b\u585e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa e2 = time.time() print(rl) print(\"\u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a\", int(e2 - e1)) ``` - \u54cd\u5e94\uff1a \u987a\u5e8f\u6267\u884c: 1 4 9 16 25 36 \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a 6 \u591a\u8fdb\u7a0b\u6267\u884c: [1, 4, 9, 16, 25, 36] \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a 2","title":"6. Python\u591a\u8fdb\u7a0b\u5e76\u53d1\u64cd\u4f5c\u4e2d\u8fdb\u7a0b\u6c60Pool\u7684\u5e94\u7528"},{"location":"#7-queue","text":"\u6ce8\u610f\uff1a \u8fdb\u7a0b\u6c60\u4f7f\u7528\u961f\u5217\uff0c\u5e94\u4f7f\u7528 Manager \u5bf9\u8c61\u7684Queue from multiprocessing import Manager qid_queue = Manager().Queue()","title":"7. \u8fdb\u7a0b\u6c60\u4f7f\u7528queue\u961f\u5217"},{"location":"#8-operatoritemgetter","text":"\u8fd4\u56de\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4f7f\u7528\u88ab\u64cd\u4f5c\u5143\u7684 __getitem__() \u65b9\u6cd5\u4ece\u5176\u88ab\u64cd\u4f5c\u5143\u83b7\u53d6 \u9879 \u3002\u901a\u8fc7\u8be5\u51fd\u6570\u4f5c\u7528\u5230\u5bf9\u8c61\u4e0a\u624d\u80fd\u83b7\u53d6\u503c\u3002\u5982\u679c\u6307\u5b9a\u4e86\u591a\u4e2a\u9879\uff0c\u5219\u8fd4\u56de\u67e5\u627e\u503c\u7684\u4e00\u7ec4\u3002\u4f8b\u5982: \u5728f = itemgetter(2)\u4e4b\u540e\uff0c\u8c03\u7528f(r)\u8fd4\u56der[2]\u3002 \u5728g = itemgetter(2,5,3)\u4e4b\u540e\uff0c\u8c03\u7528g(r)\u8fd4\u56de(r[2]\uff0c r[5]\uff0c r[3])\u3002 \u7b49\u4ef7\u4e8e: def itemgetter(*items): if len(items) == 1: item = items[0] def g(obj): return obj[item] else: def g(obj): return tuple(obj[item] for item in items) return g \u9879\u53ef\u4ee5\u662f\u88ab\u64cd\u4f5c\u5143\u7684 __getitem__() \u65b9\u6cd5\u6240\u63a5\u53d7\u7684\u4efb\u4f55\u7c7b\u578b\u3002\u5b57\u5178\u63a5\u53d7\u5404\u79cd\u54c8\u5e0c\u503c\uff0c\u5217\u8868\u3001\u5143\u7ec4\u548c\u5b57\u7b26\u4e32\u63a5\u53d7\u7d22\u5f15\u6216\u7247: >>> itemgetter(1)('ABCDEFG') 'B' >>> itemgetter(1,3,5)('ABCDEFG') ('B', 'D', 'F') >>> itemgetter(slice(2,None))('ABCDEFG') 'CDEFG' \u5728\u7248\u672c2.5\u4e2d\u66f4\u6539:\u6dfb\u52a0\u4e86\u5bf9\u591a\u4e2a\u9879\u76ee\u63d0\u53d6\u7684\u652f\u6301\u3002 \u4f7f\u7528itemgetter()\u4ece\u5143\u7ec4\u8bb0\u5f55\u4e2d\u68c0\u7d22\u7279\u5b9a\u5b57\u6bb5\u7684\u793a\u4f8b: >>> inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)] >>> getcount = itemgetter(1) >>> map(getcount, inventory) [3, 2, 5, 1] >>> sorted(inventory, key=getcount) [('orange', 1), ('banana', 2), ('apple', 3), ('pear', 5)]","title":"8. operator.itemgetter()"},{"location":"#9-sorted","text":"sort \u4e0e sorted \u533a\u522b\uff1a sort \u662f\u5e94\u7528\u5728 list \u4e0a\u7684\u65b9\u6cd5\uff0csorted \u53ef\u4ee5\u5bf9\u6240\u6709\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\u64cd\u4f5c\u3002 list \u7684 sort \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u5bf9\u5df2\u7ecf\u5b58\u5728\u7684\u5217\u8868\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u5185\u5efa\u51fd\u6570 sorted \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u65b0\u7684 list\uff0c\u800c\u4e0d\u662f\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\u64cd\u4f5c\u3002 sorted \u8bed\u6cd5\uff1a sorted(iterable[, cmp[, key[, reverse]]]) \u53c2\u6570\u8bf4\u660e\uff1a iterable -- \u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 cmp -- \u6bd4\u8f83\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u5177\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u7684\u503c\u90fd\u662f\u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u53d6\u51fa\uff0c\u6b64\u51fd\u6570\u5fc5\u987b\u9075\u5b88\u7684\u89c4\u5219\u4e3a\uff0c\u5927\u4e8e\u5219\u8fd4\u56de1\uff0c\u5c0f\u4e8e\u5219\u8fd4\u56de-1\uff0c\u7b49\u4e8e\u5219\u8fd4\u56de0\u3002 key -- \u4e3b\u8981\u662f\u7528\u6765\u8fdb\u884c\u6bd4\u8f83\u7684\u5143\u7d20\uff0c\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u5177\u4f53\u7684\u51fd\u6570\u7684\u53c2\u6570\u5c31\u662f\u53d6\u81ea\u4e8e\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\uff0c\u6307\u5b9a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u6765\u8fdb\u884c\u6392\u5e8f\u3002 reverse -- \u6392\u5e8f\u89c4\u5219\uff0creverse = True \u964d\u5e8f \uff0c reverse = False \u5347\u5e8f\uff08\u9ed8\u8ba4\uff09\u3002 \u4f8b\u5b50\uff1a >>>a = [5,7,6,3,4,1,2] >>> b = sorted(a) # \u4fdd\u7559\u539f\u5217\u8868 >>> a [5, 7, 6, 3, 4, 1, 2] >>> b [1, 2, 3, 4, 5, 6, 7] >>> L=[('b',2),('a',1),('c',3),('d',4)] >>> sorted(L, cmp=lambda x,y:cmp(x[1],y[1])) # \u5229\u7528cmp\u51fd\u6570 [('a', 1), ('b', 2), ('c', 3), ('d', 4)] >>> sorted(L, key=lambda x:x[1]) # \u5229\u7528key [('a', 1), ('b', 2), ('c', 3), ('d', 4)] >>> students = [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)] >>> sorted(students, key=lambda s: s[2]) # \u6309\u5e74\u9f84\u6392\u5e8f [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)] >>> sorted(students, key=lambda s: s[2], reverse=True) # \u6309\u964d\u5e8f [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)] \u6ce8\u610f \uff1a\u5efa\u8bae\u4f7f\u7528key\uff0c\u800c\u4e0d\u662fcmp\uff0c\u56e0\u4e3akey\u66f4\u8282\u7701\u5185\u5b58\u7a7a\u95f4","title":"9. sorted()\u5185\u5efa\u51fd\u6570"},{"location":"#10-python27-unicodedecodeerror-ascii-codec-cant-decode-byte-0xe5-in-position-108-ordinal-not-in-range128","text":"\u51fa\u73b0\u9519\u8bef\u539f\u56e0 \uff1a python\u7684str\u9ed8\u8ba4\u662fascii\u7f16\u7801\uff0c\u548cunicode\u7f16\u7801\u51b2\u7a81 \u89e3\u51b3\u65b9\u6848 \uff1a import sys reload(sys) sys.setdefaultencoding('utf8')","title":"10. python2.7 \u89e3\u51b3UnicodeDecodeError: \u2018ascii\u2019 codec can\u2019t decode byte 0xe5 in position 108: ordinal not in range(128\u3002\u3002\u3002\u3002"},{"location":"#11-python","text":"product \u7b1b\u5361\u5c14\u79ef permutations \u6392\u5217 combinations \u7ec4\u5408,\u6ca1\u6709\u91cd\u590d combinations_with_replacement \u7ec4\u5408,\u6709\u91cd\u590d >>> import itertools >>> for i in itertools.product('ABCD', r=2): ... print i, ... ('A', 'A') ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'A') ('B', 'B') ('B', 'C') ('B', 'D') ('C', 'A') ('C', 'B') ('C', 'C') ('C', 'D') ('D', 'A') ('D', 'B') ('D', 'C') ('D', 'D') >>> for i in itertools.permutations('ABCD', 2): ... print i, ... ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'A') ('B', 'C') ('B', 'D') ('C', 'A') ('C', 'B') ('C', 'D') ('D', 'A') ('D', 'B') ('D', 'C') >>> for i in itertools.combinations('ABCD', 2): ... print i, ... ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'C') ('B', 'D') ('C', 'D') >>> for i in itertools.combinations_with_replacement('ABCD', 2): ... print i, ... ('A', 'A') ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'B') ('B', 'C') ('B', 'D') ('C', 'C') ('C', 'D') ('D', 'D')","title":"11. \u51e0\u4e2a\u6709\u7528\u7684python\u51fd\u6570 (\u7b1b\u5361\u5c14\u79ef, \u6392\u5217, \u7ec4\u5408)"},{"location":"#12-python","text":"\u7ed9\u5b9a\u4e24\u4e2a\u975e\u7a7a\u94fe\u8868\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u4f4d\u6570\u6309\u7167\u9006\u5e8f\u65b9\u5f0f\u5b58\u50a8\uff0c\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u4e24\u6570\u76f8\u52a0\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a(2 -> 4 -> 3) + (5 -> 6 -> 4) \u8f93\u51fa\uff1a7 -> 0 -> 8 \u539f\u56e0\uff1a342 + 465 = 807 \u4ee3\u7801\u5b9e\u73b0\uff1a # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None def addTwoNumbers(self, l1, l2): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" val_sum = l1.val + l2.val list_node = ListNode(val_sum % 10) a = val_sum // 10 node = list_node while True: try: l1 = l1.next except: pass try: l2 = l2.next except: pass if not l1 and not l2: break elif not l1: l1_val = 0 l2_val = l2.val elif not l2: l2_val = 0 l1_val = l1.val else: l1_val = l1.val l2_val = l2.val val_sum = l1_val + l2_val + a temp_node = ListNode(val_sum % 10) node.next = temp_node node = temp_node a = val_sum // 10 if a != 0: node.next = ListNode(a) return list_node","title":"12. python\u6c42\u4e24\u4e2a\u94fe\u8868\u7ec4\u6210\u7684\u6570\u5b57\u7684\u548c"},{"location":"#13-pythondivmoda-b","text":"v2.7 \u5b9e\u9645\u4e0a\u662f\u7b97a\u9664\u4ee5b\u7684\u5546\u548c\u4f59\u6570\uff0c\u8fd4\u56de(\u5546\uff0c\u4f59\u6570) divmod(1,2) (0, 1) divmod(5, 1) (5, 0)","title":"13. python\u5185\u7f6e\u51fd\u6570\u2014\u2014divmod(a, b)"},{"location":"#14-pythonenumeratesequence-start0","text":">>> seasons = ['Spring', 'Summer', 'Fall', 'Winter'] >>> list(enumerate(seasons)) [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')] >>> list(enumerate(seasons, start=1)) [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]","title":"14. python\u5185\u7f6e\u51fd\u6570\u2014\u2014enumerate(sequence, start=0)"},{"location":"#15-pythonfilterfunction-iterable","text":"v2.7 \u5982\u679cfunction\u662fNone\uff0c\u5c31\u7b49\u4ef7\u4e8e\uff1a [item for item in iterable if item] \u5982\u679cfunction\u4e0d\u662fNone\uff0c\u5c31\u7b49\u4ef7\u4e8e\uff1a [item for item in iterable if function(item)]","title":"15. python\u5185\u7f6e\u51fd\u6570\u2014\u2014filter(function, iterable)"},{"location":"#16-datetime","text":"datetime\u6a21\u5757\u7528\u4e8e\u662fdate\u548ctime\u6a21\u5757\u7684\u5408\u96c6\uff0cdatetime\u6709\u4e24\u4e2a\u5e38\u91cf\uff0cMAXYEAR\u548cMINYEAR\uff0c\u5206\u522b\u662f9999\u548c1. datetime\u6a21\u5757\u5b9a\u4e49\u4e865\u4e2a\u7c7b\uff0c\u5206\u522b\u662f 1. datetime.date\uff1a\u8868\u793a\u65e5\u671f\u7684\u7c7b 2. datetime.datetime\uff1a\u8868\u793a\u65e5\u671f\u65f6\u95f4\u7684\u7c7b 3. datetime.time\uff1a\u8868\u793a\u65f6\u95f4\u7684\u7c7b 4. datetime.timedelta\uff1a\u8868\u793a\u65f6\u95f4\u95f4\u9694\uff0c\u5373\u4e24\u4e2a\u65f6\u95f4\u70b9\u7684\u95f4\u9694 5. datetime.tzinfo\uff1a\u65f6\u533a\u7684\u76f8\u5173\u4fe1\u606f datetime.date\u7c7b date\u7c7b\u6709\u4e09\u4e2a\u53c2\u6570,datetime.date(year,month,day)\uff0c\u8fd4\u56de datetime.date(2018, 7, 30) datetime.date.ctime() ,\u8fd4\u56de\u683c\u5f0f\u5982 Sun Apr 16 00:00:00 2017 >>>datetime.date.ctime(datetime.date(2018, 7, 30)) 'Mon Jul 30 00:00:00 2018' datetime.date.fromtimestamp(timestamp) ,\u6839\u636e\u7ed9\u5b9a\u7684\u65f6\u95f4\u622e\uff0c\u8fd4\u56de\u4e00\u4e2adate\u5bf9\u8c61\uff1b datetime.date.today() \u4f5c\u7528\u76f8\u540c >>>datetime.date.today() datetime.date(2018, 7, 30) datetime.date.isocalendar() :\u8fd4\u56de\u683c\u5f0f\u5982(year\uff0cmonth\uff0cday)\u7684\u5143\u7ec4 >>>datetime.date.isocalendar(datetime.date(2018, 7, 30)) (2018, 31, 1) datetime.date.isoformat() \uff1a\u8fd4\u56de\u683c\u5f0f\u5982YYYY-MM-DD >>>datetime.date.isoformat(datetime.date(2018, 7, 30)) '2018-07-30' datetime.date.isoweekday() \uff1a\u8fd4\u56de\u7ed9\u5b9a\u65e5\u671f\u7684\u661f\u671f\uff080-6\uff09\uff0c\u661f\u671f\u4e00=0\uff0c\u661f\u671f\u65e5=6 >>>datetime.date.isoweekday(datetime.date.today()) 1 datetime.date.replace(year,month,day) \uff1a\u66ff\u6362\u7ed9\u5b9a\u65e5\u671f\uff0c\u4f46\u4e0d\u6539\u53d8\u539f\u65e5\u671f >>>a = datetime.date.today() >>>a.replace(day=26) datetime.date(2018, 7, 26) datetime.date.strftime(format) :\u628a\u65e5\u671f\u65f6\u95f4\u6309\u7167\u7ed9\u5b9a\u7684format\u8fdb\u884c\u683c\u5f0f\u5316\u3002 >>>datetime.date.strftime(datetime.date.today(), '%Y-%m-%d') '2018-07-30' ``` >>>a = datetime.date.today() >>>a datetime.date(2018, 7, 30) >>>a.strftime('%Y-%m-%d') '2018-07-30' ``` datetime.date.timetuple() \uff1a\u8fd4\u56de\u65e5\u671f\u5bf9\u5e94\u7684time.struct_time\u5bf9\u8c61 >>>a = datetime.date.today() >>>datetime.date.timetuple(a) time.struct_time(tm_year=2018, tm_mon=7, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=211, tm_isdst=-1) datetime.date.weekday() \uff1a\u8fd4\u56de\u65e5\u671f\u7684\u661f\u671f >>>a = datetime.date.today() >>>datetime.date.weekday(a) 0 >>>a.weekday() 0 datetime.time\u7c7b time\u7c7b\u67095\u4e2a\u53c2\u6570\uff0cdatetime.time(hour,minute,second,microsecond,tzoninfo),\u8fd4\u56de08:29:30 datetime.time.replace() >>>datetime.time.replace(datetime.time(), hour=1) datetime.time(1, 0) datetime.time.strftime(format) :\u6309\u7167format\u683c\u5f0f\u8fd4\u56de\u65f6\u95f4 >>>datetime.time.strftime(datetime.time(2,3), \"%H:%M\") '02:03' datetime.time.tzname() \uff1a\u8fd4\u56de\u65f6\u533a\u540d\u5b57 datetime.time.utcoffset() \uff1a\u8fd4\u56de\u65f6\u533a\u7684\u65f6\u95f4\u504f\u79fb\u91cf datetime.datetime\u7c7b datetime\u7c7b\u6709\u5f88\u591a\u53c2\u6570\uff0cdatetime(year, month, day[, hour[, minute[, second[,microsecond[,tzinfo]]]]])\uff0c\u8fd4\u56de\u5e74\u6708\u65e5\uff0c\u65f6\u5206\u79d2 datetime.datetime.ctime() datetime.datetime.now().date() \uff1a\u8fd4\u56de\u5f53\u524d\u65e5\u671f\u65f6\u95f4\u7684\u65e5\u671f\u90e8\u5206 datetime.datetime.now().time() \uff1a\u8fd4\u56de\u5f53\u524d\u65e5\u671f\u65f6\u95f4\u7684\u65f6\u95f4\u90e8\u5206 datetime.datetime.fromtimestamp() datetime.datetime.now() \uff1a\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4 datetime.datetime.replace() datetime.datetime.strftime() \uff1a\u7531\u65e5\u671f\u683c\u5f0f\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u683c\u5f0f >>>datetime.datetime.now().strftime('%b-%d-%Y %H:%M:%S') 'Apr-16-2017 21:01:35' datetime.datetime.strptime() :\u7531\u5b57\u7b26\u4e32\u683c\u5f0f\u8f6c\u5316\u4e3a\u65e5\u671f\u683c\u5f0f >>>datetime.datetime.strptime('Apr-16-2017 21:01:35', '%b-%d-%Y %H:%M:%S') 2017-04-16 21:01:35 datetime.timedelta\u7c7b datetime.datetime.timedelta\u7528\u4e8e\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u4f8b\u5982\uff1a >>> a=datetime.datetime.now() >>> b=datetime.datetime.now() >>> a datetime.datetime(2017, 4, 16, 21, 21, 20, 871000) >>> b datetime.datetime(2017, 4, 16, 21, 21, 29, 603000) >>> b-a datetime.timedelta(0, 8, 732000) >>> (b-a).seconds 8 \u6216\u8005 time1 = datetime.datetime(2016, 10, 20) time2 = datetime.datetime(2015, 11, 2) \"\"\"\u8ba1\u7b97\u5929\u6570\u5dee\u503c\"\"\" print(time1-time2).days \"\"\"\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u76f8\u9694\u7684\u79d2\u6570\"\"\" print (time1-time2).total_seconds()","title":"16. datetime"},{"location":"#17-could-not-install-packages-due-to-an-environmenterror-errno-13-permission-denied-librarypython27site-packagesvine","text":"pip install --user flask \u5728install\u540e\u52a0 --user","title":"17. \u9488\u5bf9\u201ccould not install packages due to an EnvironmentError: [Errno 13] Permission denied: '/Library/Python/2.7/site-packages/vine'\u201d\u7684\u89e3\u51b3\u65b9\u5f0f"},{"location":"#18-xml","text":"v2.7 dicttoxml\u4f1a\u81ea\u52a8\u5728\u5934\u90e8\u6dfb\u52a0 <?xml version=\"1.0\" encoding=\"UTF-8\" ?> \u5e76\u901a\u8fc7\u53c2\u6570\u8bbe\u7f6exml\u7684\u5c5e\u6027 import dicttoxml dicttoxml.dicttoxml(self.post_data_dict, root=True, custom_root=\"request\", attr_type=False)","title":"18. \u5b57\u5178\u8f6cxml"},{"location":"#19-orand","text":"\u5982\u679c\u7528or\uff0c\u5e94\u8be5\u628a\u4e3atrue\u7684\u5199\u5728or\u524d\uff0c\u51cf\u5c0f\u8fd0\u7b97\u65f6\u95f4\uff1b \u5982\u679c\u7528and\uff0c\u5e94\u8be5\u628afalse\u7684\u5199\u5728and\u524d","title":"19. or\u548cand"},{"location":"#20-xmltodict","text":"\u5982\u679cxml\u4e2d\u5728\u540c\u4e00\u7ea7\u6709\u76f8\u540c\u5143\u7d20\uff0c\u5c31\u4f1a\u628a\u76f8\u540c\u5143\u7d20\u53d8\u6210\u5217\u8868\uff1b\u5982\u679c\u6ca1\u6709\u76f8\u540c\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u628a\u8be5\u5143\u7d20\u53d8\u4e3a\u5b57\u5178 \u5bf9\u4e8exml\u4e2d\u4e3a\u7a7a\u7684\u60c5\u51b5\uff0cxmltodict\u4f1a\u81ea\u52a8\u5c06\u503c\u53d8\u4e3a None","title":"20. xmltodict\u7684\u5751"},{"location":"#21-if-else","text":"\u53ea\u6709if [a for a in a_list if a==1] if-else [a if a==1 else a-1 for a in a_list]","title":"21. \u5217\u8868\u751f\u6210\u5f0f\u4e2d\u7684if-else"},{"location":"#22-mysql-said-authentication-plugin-caching_sha2_password-cannot-be-loaded-dlopenusrlocal","text":"\u5728\u4f7f\u7528MySQL Workbench\u8fde\u63a5\u672c\u5730\u6570\u636e\u5e93\u7684\u65f6\u5019\uff0c\u51fa\u73b0\u4e86 MySQL said: Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen(/usr/local/lib/plugin/caching_sha2_password.so, 2): image not found \u8fd9\u662f\u56e0\u4e3a\u5728\u94fe\u63a5\u6570\u636e\u5e93\u65f6\u4e0d\u80fd\u52a0\u8f7d\u2018caching_sha2_password'\u8fd9\u4e2a\u63d2\u4ef6\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u5bf9\u8eab\u4efd\u9a8c\u8bc1\u3002 \u89e3\u51b3\u65b9\u6848\u662f\uff1a 1. \u6253\u5f00\u7cfb\u7edf\u504f\u597d\u8bbe\u7f6e\uff0c\u627e\u5230mysql\uff0c\u70b9\u51fbInitialize Database\u3002 2. \u8f93\u5165\u4f60\u7684\u65b0\u5bc6\u7801\uff0c\u8bb0\u4f4f\u8fd9\u4e2a\u5bc6\u7801\uff0c\u7528\u4e8e\u540e\u671f\u94fe\u63a5\u6570\u636e\u5e93\u7684\u767b\u9646\u4f7f\u7528\u3002 3. \u9009\u62e9\u2018Use legacy password\u2018\u3002 4. \u91cd\u542fmysql\u670d\u52a1\u3002 \u8fd9\u6837\u5728\u8fde\u63a5\u5c31\u6ca1\u6709\u95ee\u9898\u4e86","title":"22. \u9488\u5bf9MySQL said: Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen(/usr/local/...\u7684\u95ee\u9898"},{"location":"#23-django-model","text":"comment_list = Comment.objects.all()[:5].only('post', 'text') # \u53ea\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5","title":"23. django model\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5"},{"location":"#24-connection-reset-by-peer","text":"Connection reset by peer: socket write error\u9519\u8bef\u5206\u6790\uff1a \u5e38\u51fa\u73b0\u7684Connection reset by peer: \u539f\u56e0\u53ef\u80fd\u662f\u591a\u65b9\u9762\u7684\uff0c\u4e0d\u8fc7\u66f4\u5e38\u89c1\u7684\u539f\u56e0\u662f\uff1a \u2460\uff1a\u670d\u52a1\u5668\u7684\u5e76\u53d1\u8fde\u63a5\u6570\u8d85\u8fc7\u4e86\u5176\u627f\u8f7d\u91cf\uff0c\u670d\u52a1\u5668\u4f1a\u5c06\u5176\u4e2d\u4e00\u4e9b\u8fde\u63a5Down\u6389\uff1b \u2461\uff1a\u5ba2\u6237\u5173\u6389\u4e86\u6d4f\u89c8\u5668\uff0c\u800c\u670d\u52a1\u5668\u8fd8\u5728\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e\uff1b \u2462\uff1a\u6d4f\u89c8\u5668\u7aef\u6309\u4e86Stop \u901a\u5e38\u539f\u56e0\u4e3a\uff1a\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u5bf9\u7b49\u65b9\u5e94\u7528\u7a0b\u5e8f\u7a81\u7136\u505c\u6b62\u8fd0\u884c\uff0c\u6216\u8fdc\u7a0b\u4e3b\u673a\u91cd\u65b0\u542f\u52a8\uff0c\u6216\u8fdc\u7a0b\u4e3b\u673a\u5728\u8fdc\u7a0b\u65b9\u5957\u63a5\u5b57\u4e0a\u4f7f\u7528\u4e86\u201c\u5f3a\u5236\u201d\u5173\u95ed \uff08\u53c2\u89c1setsockopt(SO_LINGER)\uff09\u3002\u53e6\u5916\uff0c\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u6b63\u5728\u8fdb\u884c\u65f6\uff0c\u5982\u679c\u8fde\u63a5\u56e0\u201ckeep-alive\u201d\u6d3b\u52a8\u68c0\u6d4b\u5230\u4e00\u4e2a\u5931\u8d25\u800c\u4e2d \u65ad\uff0c\u4e5f\u53ef\u80fd\u5bfc\u81f4\u6b64\u9519\u8bef\u3002\u6b64\u65f6\uff0c\u6b63\u5728\u8fdb\u884c\u7684\u64cd\u4f5c\u4ee5\u9519\u8bef\u7801WSAENETRESET\u5931\u8d25\u8fd4\u56de\uff0c\u540e\u7eed\u64cd\u4f5c\u5c06\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u7801WSAECONNRESET\u3002 \u4f46\u662f\u5982\u679c\u9891\u7e41\u51fa\u73b0\uff0c\u5c31\u8868\u793a\u5f88 \u591a\u5ba2\u6237\u7aef\u8fde\u63a5\u5230Apache\u670d\u52a1\u5668\u7684\u54cd\u5e94\u65f6\u95f4\u592a\u957f\u4e86\uff0c\u53ef\u80fd\u662f\u7f51\u7edc\u7684\u95ee\u9898\u6216\u8005\u670d\u52a1\u5668\u6027\u80fd\u95ee\u9898\u3002","title":"24. Connection reset by peer\u7684\u5e38\u89c1\u539f\u56e0"},{"location":"#25-djangourlspathdjangourlsre_path","text":"\u5728django2.0\u4ee5\u540e django.urls.path \u4e0d\u7528\u4e8e\u6b63\u5219\u5339\u914d\uff0c\u5982\u679c\u60f3\u7528\u6b63\u5219\uff0c\u53ef\u4ee5\u7528 django.urls.re_path from django.urls import re_path re_path(r'^(?P<album_id>[0-9])/$', views.detail, name='detail'), \u5982\u679c\u7528url()\uff0c\u4e5f\u4f1a\u94fe\u63a5\u5230re_path()\u7684","title":"25. \u5173\u4e8edjango.urls.path\u548cdjango.urls.re_path"}]}